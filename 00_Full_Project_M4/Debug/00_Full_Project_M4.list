
00_Full_Project_M4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001310  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080014a4  080014ac  000024ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080014a4  080014a4  000024ac  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080014a4  080014a4  000024ac  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080014a4  080014ac  000024ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080014a4  080014a4  000024a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080014a8  080014a8  000024a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000024ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000024ac  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00003000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00003000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000024ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000181f  00000000  00000000  000024dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000008d9  00000000  00000000  00003cfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000228  00000000  00000000  000045d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000179  00000000  00000000  00004800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000023a9  00000000  00000000  00004979  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00003638  00000000  00000000  00006d22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00008bd5  00000000  00000000  0000a35a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00012f2f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000005e8  00000000  00000000  00012f74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005b  00000000  00000000  0001355c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800148c 	.word	0x0800148c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	0800148c 	.word	0x0800148c

080001d4 <ClockDriver_vEnable_Peripheral_Clocks>:
 *      Author: chris
 */
#include "clock_driver.h"

void ClockDriver_vEnable_Peripheral_Clocks(TypeDef_Peripheral_Bus* periph)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b089      	sub	sp, #36	@ 0x24
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
	uint8_t size = 0;
 80001dc:	2300      	movs	r3, #0
 80001de:	72fb      	strb	r3, [r7, #11]

	/* System clock */
	RCC->CR |= (1U << 0); 			// HSI clock, 8 MHz
 80001e0:	4b4c      	ldr	r3, [pc, #304]	@ (8000314 <ClockDriver_vEnable_Peripheral_Clocks+0x140>)
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	4a4b      	ldr	r2, [pc, #300]	@ (8000314 <ClockDriver_vEnable_Peripheral_Clocks+0x140>)
 80001e6:	f043 0301 	orr.w	r3, r3, #1
 80001ea:	6013      	str	r3, [r2, #0]
	RCC->CFGR &= ~(0xF << 4);		// HSI clock not divided
 80001ec:	4b49      	ldr	r3, [pc, #292]	@ (8000314 <ClockDriver_vEnable_Peripheral_Clocks+0x140>)
 80001ee:	685b      	ldr	r3, [r3, #4]
 80001f0:	4a48      	ldr	r2, [pc, #288]	@ (8000314 <ClockDriver_vEnable_Peripheral_Clocks+0x140>)
 80001f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80001f6:	6053      	str	r3, [r2, #4]

	/* AHB1 bus clocks */
	size = periph->SizeAHB1;
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	781b      	ldrb	r3, [r3, #0]
 80001fc:	72fb      	strb	r3, [r7, #11]

	for (int i = 0; i < size; i++)
 80001fe:	2300      	movs	r3, #0
 8000200:	61fb      	str	r3, [r7, #28]
 8000202:	e00f      	b.n	8000224 <ClockDriver_vEnable_Peripheral_Clocks+0x50>
	{
		RCC->AHBENR |= (1U << periph->AHB1Bus[i]);
 8000204:	4b43      	ldr	r3, [pc, #268]	@ (8000314 <ClockDriver_vEnable_Peripheral_Clocks+0x140>)
 8000206:	695a      	ldr	r2, [r3, #20]
 8000208:	6879      	ldr	r1, [r7, #4]
 800020a:	69fb      	ldr	r3, [r7, #28]
 800020c:	005b      	lsls	r3, r3, #1
 800020e:	440b      	add	r3, r1
 8000210:	88db      	ldrh	r3, [r3, #6]
 8000212:	4619      	mov	r1, r3
 8000214:	2301      	movs	r3, #1
 8000216:	408b      	lsls	r3, r1
 8000218:	493e      	ldr	r1, [pc, #248]	@ (8000314 <ClockDriver_vEnable_Peripheral_Clocks+0x140>)
 800021a:	4313      	orrs	r3, r2
 800021c:	614b      	str	r3, [r1, #20]
	for (int i = 0; i < size; i++)
 800021e:	69fb      	ldr	r3, [r7, #28]
 8000220:	3301      	adds	r3, #1
 8000222:	61fb      	str	r3, [r7, #28]
 8000224:	7afb      	ldrb	r3, [r7, #11]
 8000226:	69fa      	ldr	r2, [r7, #28]
 8000228:	429a      	cmp	r2, r3
 800022a:	dbeb      	blt.n	8000204 <ClockDriver_vEnable_Peripheral_Clocks+0x30>
	}

	/* AHB2 bus clocks */
	size = periph->SizeAHB2;
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	785b      	ldrb	r3, [r3, #1]
 8000230:	72fb      	strb	r3, [r7, #11]
	for (int i = 0; i < size; i++)
 8000232:	2300      	movs	r3, #0
 8000234:	61bb      	str	r3, [r7, #24]
 8000236:	e010      	b.n	800025a <ClockDriver_vEnable_Peripheral_Clocks+0x86>
	{
		RCC->AHBENR |= (1U << periph->AHB2Bus[i]);
 8000238:	4b36      	ldr	r3, [pc, #216]	@ (8000314 <ClockDriver_vEnable_Peripheral_Clocks+0x140>)
 800023a:	695a      	ldr	r2, [r3, #20]
 800023c:	6879      	ldr	r1, [r7, #4]
 800023e:	69bb      	ldr	r3, [r7, #24]
 8000240:	3308      	adds	r3, #8
 8000242:	005b      	lsls	r3, r3, #1
 8000244:	440b      	add	r3, r1
 8000246:	885b      	ldrh	r3, [r3, #2]
 8000248:	4619      	mov	r1, r3
 800024a:	2301      	movs	r3, #1
 800024c:	408b      	lsls	r3, r1
 800024e:	4931      	ldr	r1, [pc, #196]	@ (8000314 <ClockDriver_vEnable_Peripheral_Clocks+0x140>)
 8000250:	4313      	orrs	r3, r2
 8000252:	614b      	str	r3, [r1, #20]
	for (int i = 0; i < size; i++)
 8000254:	69bb      	ldr	r3, [r7, #24]
 8000256:	3301      	adds	r3, #1
 8000258:	61bb      	str	r3, [r7, #24]
 800025a:	7afb      	ldrb	r3, [r7, #11]
 800025c:	69ba      	ldr	r2, [r7, #24]
 800025e:	429a      	cmp	r2, r3
 8000260:	dbea      	blt.n	8000238 <ClockDriver_vEnable_Peripheral_Clocks+0x64>
	}

	/* AHB3 bus clocks */
	size = periph->SizeAHB3;
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	789b      	ldrb	r3, [r3, #2]
 8000266:	72fb      	strb	r3, [r7, #11]
	for (int i = 0; i < size; i++)
 8000268:	2300      	movs	r3, #0
 800026a:	617b      	str	r3, [r7, #20]
 800026c:	e010      	b.n	8000290 <ClockDriver_vEnable_Peripheral_Clocks+0xbc>
	{
		RCC->AHBENR |= (1U << periph->AHB3Bus[i]);
 800026e:	4b29      	ldr	r3, [pc, #164]	@ (8000314 <ClockDriver_vEnable_Peripheral_Clocks+0x140>)
 8000270:	695a      	ldr	r2, [r3, #20]
 8000272:	6879      	ldr	r1, [r7, #4]
 8000274:	697b      	ldr	r3, [r7, #20]
 8000276:	330c      	adds	r3, #12
 8000278:	005b      	lsls	r3, r3, #1
 800027a:	440b      	add	r3, r1
 800027c:	88db      	ldrh	r3, [r3, #6]
 800027e:	4619      	mov	r1, r3
 8000280:	2301      	movs	r3, #1
 8000282:	408b      	lsls	r3, r1
 8000284:	4923      	ldr	r1, [pc, #140]	@ (8000314 <ClockDriver_vEnable_Peripheral_Clocks+0x140>)
 8000286:	4313      	orrs	r3, r2
 8000288:	614b      	str	r3, [r1, #20]
	for (int i = 0; i < size; i++)
 800028a:	697b      	ldr	r3, [r7, #20]
 800028c:	3301      	adds	r3, #1
 800028e:	617b      	str	r3, [r7, #20]
 8000290:	7afb      	ldrb	r3, [r7, #11]
 8000292:	697a      	ldr	r2, [r7, #20]
 8000294:	429a      	cmp	r2, r3
 8000296:	dbea      	blt.n	800026e <ClockDriver_vEnable_Peripheral_Clocks+0x9a>
	}

	/* APB1 bus clocks */
	size = periph->SizeAPB1;
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	78db      	ldrb	r3, [r3, #3]
 800029c:	72fb      	strb	r3, [r7, #11]
	for (int i = 0; i < size; i++)
 800029e:	2300      	movs	r3, #0
 80002a0:	613b      	str	r3, [r7, #16]
 80002a2:	e011      	b.n	80002c8 <ClockDriver_vEnable_Peripheral_Clocks+0xf4>
	{
		RCC->APB1ENR |= (1U << (uint8_t)((periph->APB1Bus[i]) & 0x00FF));
 80002a4:	4b1b      	ldr	r3, [pc, #108]	@ (8000314 <ClockDriver_vEnable_Peripheral_Clocks+0x140>)
 80002a6:	69da      	ldr	r2, [r3, #28]
 80002a8:	6879      	ldr	r1, [r7, #4]
 80002aa:	693b      	ldr	r3, [r7, #16]
 80002ac:	3310      	adds	r3, #16
 80002ae:	005b      	lsls	r3, r3, #1
 80002b0:	440b      	add	r3, r1
 80002b2:	885b      	ldrh	r3, [r3, #2]
 80002b4:	b2db      	uxtb	r3, r3
 80002b6:	4619      	mov	r1, r3
 80002b8:	2301      	movs	r3, #1
 80002ba:	408b      	lsls	r3, r1
 80002bc:	4915      	ldr	r1, [pc, #84]	@ (8000314 <ClockDriver_vEnable_Peripheral_Clocks+0x140>)
 80002be:	4313      	orrs	r3, r2
 80002c0:	61cb      	str	r3, [r1, #28]
	for (int i = 0; i < size; i++)
 80002c2:	693b      	ldr	r3, [r7, #16]
 80002c4:	3301      	adds	r3, #1
 80002c6:	613b      	str	r3, [r7, #16]
 80002c8:	7afb      	ldrb	r3, [r7, #11]
 80002ca:	693a      	ldr	r2, [r7, #16]
 80002cc:	429a      	cmp	r2, r3
 80002ce:	dbe9      	blt.n	80002a4 <ClockDriver_vEnable_Peripheral_Clocks+0xd0>
	}

	/* APB2 bus clocks */
	size = periph->SizeAPB2;
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	791b      	ldrb	r3, [r3, #4]
 80002d4:	72fb      	strb	r3, [r7, #11]
	for (int i = 0; i < size; i++)
 80002d6:	2300      	movs	r3, #0
 80002d8:	60fb      	str	r3, [r7, #12]
 80002da:	e010      	b.n	80002fe <ClockDriver_vEnable_Peripheral_Clocks+0x12a>
	{
		RCC->APB2ENR |= (1U << (uint8_t)((periph->APB2Bus[i]) & 0x00FF));
 80002dc:	4b0d      	ldr	r3, [pc, #52]	@ (8000314 <ClockDriver_vEnable_Peripheral_Clocks+0x140>)
 80002de:	699a      	ldr	r2, [r3, #24]
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	68f9      	ldr	r1, [r7, #12]
 80002e4:	3128      	adds	r1, #40	@ 0x28
 80002e6:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80002ea:	b2db      	uxtb	r3, r3
 80002ec:	4619      	mov	r1, r3
 80002ee:	2301      	movs	r3, #1
 80002f0:	408b      	lsls	r3, r1
 80002f2:	4908      	ldr	r1, [pc, #32]	@ (8000314 <ClockDriver_vEnable_Peripheral_Clocks+0x140>)
 80002f4:	4313      	orrs	r3, r2
 80002f6:	618b      	str	r3, [r1, #24]
	for (int i = 0; i < size; i++)
 80002f8:	68fb      	ldr	r3, [r7, #12]
 80002fa:	3301      	adds	r3, #1
 80002fc:	60fb      	str	r3, [r7, #12]
 80002fe:	7afb      	ldrb	r3, [r7, #11]
 8000300:	68fa      	ldr	r2, [r7, #12]
 8000302:	429a      	cmp	r2, r3
 8000304:	dbea      	blt.n	80002dc <ClockDriver_vEnable_Peripheral_Clocks+0x108>
	}
}
 8000306:	bf00      	nop
 8000308:	bf00      	nop
 800030a:	3724      	adds	r7, #36	@ 0x24
 800030c:	46bd      	mov	sp, r7
 800030e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000312:	4770      	bx	lr
 8000314:	40021000 	.word	0x40021000

08000318 <ClockDriver_vClockSelect>:

void ClockDriver_vClockSelect(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b09a      	sub	sp, #104	@ 0x68
 800031c:	af00      	add	r7, sp, #0
	TypeDef_Peripheral_Bus peripherals;
	peripherals.SizeAHB1 = 1;
 800031e:	2301      	movs	r3, #1
 8000320:	713b      	strb	r3, [r7, #4]
	peripherals.AHB1Bus[0] = DMA1_Clock;
 8000322:	2300      	movs	r3, #0
 8000324:	817b      	strh	r3, [r7, #10]

	peripherals.SizeAHB2 = 3;
 8000326:	2303      	movs	r3, #3
 8000328:	717b      	strb	r3, [r7, #5]
	peripherals.AHB2Bus[0] = GPIOA_Clock;
 800032a:	2311      	movs	r3, #17
 800032c:	82fb      	strh	r3, [r7, #22]
	peripherals.AHB2Bus[1] = GPIOB_Clock;
 800032e:	2312      	movs	r3, #18
 8000330:	833b      	strh	r3, [r7, #24]
	peripherals.AHB2Bus[2] = GPIOC_Clock;
 8000332:	2313      	movs	r3, #19
 8000334:	837b      	strh	r3, [r7, #26]

	peripherals.SizeAHB3 = 1;
 8000336:	2301      	movs	r3, #1
 8000338:	71bb      	strb	r3, [r7, #6]
	peripherals.AHB3Bus[0] = ADC12_Clock;
 800033a:	231c      	movs	r3, #28
 800033c:	847b      	strh	r3, [r7, #34]	@ 0x22

	peripherals.SizeAPB1 = 4;
 800033e:	2304      	movs	r3, #4
 8000340:	71fb      	strb	r3, [r7, #7]
	peripherals.APB1Bus[0] = SPI3_Clock;
 8000342:	f240 130f 	movw	r3, #271	@ 0x10f
 8000346:	84fb      	strh	r3, [r7, #38]	@ 0x26
	peripherals.APB1Bus[1] = USART3_Clock;
 8000348:	f44f 7389 	mov.w	r3, #274	@ 0x112
 800034c:	853b      	strh	r3, [r7, #40]	@ 0x28
	peripherals.APB1Bus[2] = I2C1_Clock;
 800034e:	f241 0315 	movw	r3, #4117	@ 0x1015
 8000352:	857b      	strh	r3, [r7, #42]	@ 0x2a
	peripherals.APB1Bus[3] = SPI2_Clock;
 8000354:	f44f 7387 	mov.w	r3, #270	@ 0x10e
 8000358:	85bb      	strh	r3, [r7, #44]	@ 0x2c

	peripherals.SizeAPB2 = 2;
 800035a:	2302      	movs	r3, #2
 800035c:	723b      	strb	r3, [r7, #8]
	peripherals.APB2Bus[0] = SYSCFG_Clock;
 800035e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000362:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
	peripherals.APB2Bus[1] = EXTI_Clock;
 8000366:	f241 0302 	movw	r3, #4098	@ 0x1002
 800036a:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56

	ClockDriver_vEnable_Peripheral_Clocks(&peripherals);
 800036e:	1d3b      	adds	r3, r7, #4
 8000370:	4618      	mov	r0, r3
 8000372:	f7ff ff2f 	bl	80001d4 <ClockDriver_vEnable_Peripheral_Clocks>
}
 8000376:	bf00      	nop
 8000378:	3768      	adds	r7, #104	@ 0x68
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}
	...

08000380 <Hal_ADC_vInit>:
 * 	- Configure sample rate
 * 	- Configure resolution
 * 	- Enable ADC and wait till its ready
 */
void Hal_ADC_vInit(void)
{
 8000380:	b480      	push	{r7}
 8000382:	b083      	sub	sp, #12
 8000384:	af00      	add	r7, sp, #0
	ADC_MASTER->CCR &= ~(0x3 << 16);
 8000386:	4b55      	ldr	r3, [pc, #340]	@ (80004dc <Hal_ADC_vInit+0x15c>)
 8000388:	689b      	ldr	r3, [r3, #8]
 800038a:	4a54      	ldr	r2, [pc, #336]	@ (80004dc <Hal_ADC_vInit+0x15c>)
 800038c:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8000390:	6093      	str	r3, [r2, #8]
	ADC_MASTER->CCR |= (0x1 << 16);		// HCLK/1
 8000392:	4b52      	ldr	r3, [pc, #328]	@ (80004dc <Hal_ADC_vInit+0x15c>)
 8000394:	689b      	ldr	r3, [r3, #8]
 8000396:	4a51      	ldr	r2, [pc, #324]	@ (80004dc <Hal_ADC_vInit+0x15c>)
 8000398:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800039c:	6093      	str	r3, [r2, #8]
    if (ADC1->CR & (1U << 0))  // Check ADEN
 800039e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80003a2:	689b      	ldr	r3, [r3, #8]
 80003a4:	f003 0301 	and.w	r3, r3, #1
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d00f      	beq.n	80003cc <Hal_ADC_vInit+0x4c>
    {
        ADC1->CR |= (1U << 1); // Set ADDIS to disable ADC
 80003ac:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80003b0:	689b      	ldr	r3, [r3, #8]
 80003b2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80003b6:	f043 0302 	orr.w	r3, r3, #2
 80003ba:	6093      	str	r3, [r2, #8]
        while (ADC1->CR & (1U << 0));  // Wait until ADEN == 0
 80003bc:	bf00      	nop
 80003be:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80003c2:	689b      	ldr	r3, [r3, #8]
 80003c4:	f003 0301 	and.w	r3, r3, #1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d1f8      	bne.n	80003be <Hal_ADC_vInit+0x3e>
    }

    // 2. Enable voltage regulator
    ADC1->CR &= ~(0b11 << 28);      // Clear bits 28 and 29
 80003cc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80003d0:	689b      	ldr	r3, [r3, #8]
 80003d2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80003d6:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 80003da:	6093      	str	r3, [r2, #8]
    ADC1->CR |=  (0b01 << 28);      // Set ADVREGEN = 01
 80003dc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80003e0:	689b      	ldr	r3, [r3, #8]
 80003e2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80003e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80003ea:	6093      	str	r3, [r2, #8]
    for (volatile int i = 0; i < 10000; ++i);  // Short delay (10+ µs needed)
 80003ec:	2300      	movs	r3, #0
 80003ee:	607b      	str	r3, [r7, #4]
 80003f0:	e002      	b.n	80003f8 <Hal_ADC_vInit+0x78>
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	3301      	adds	r3, #1
 80003f6:	607b      	str	r3, [r7, #4]
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	f242 720f 	movw	r2, #9999	@ 0x270f
 80003fe:	4293      	cmp	r3, r2
 8000400:	ddf7      	ble.n	80003f2 <Hal_ADC_vInit+0x72>

    // 3. Calibrate ADC
    ADC1->CR &= ~(1U << 30);   // Single-ended calibration
 8000402:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000406:	689b      	ldr	r3, [r3, #8]
 8000408:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800040c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8000410:	6093      	str	r3, [r2, #8]
    ADC1->CR |= (1U << 31);    // Start calibration
 8000412:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000416:	689b      	ldr	r3, [r3, #8]
 8000418:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800041c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000420:	6093      	str	r3, [r2, #8]

    while (ADC1->CR & (1U << 31));  // Wait for calibration to finish
 8000422:	bf00      	nop
 8000424:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000428:	689b      	ldr	r3, [r3, #8]
 800042a:	2b00      	cmp	r3, #0
 800042c:	dbfa      	blt.n	8000424 <Hal_ADC_vInit+0xa4>

    // 4. Enable ADC
    ADC1->CR |= (1U << 0);  // ADEN
 800042e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000432:	689b      	ldr	r3, [r3, #8]
 8000434:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000438:	f043 0301 	orr.w	r3, r3, #1
 800043c:	6093      	str	r3, [r2, #8]
    while (!(ADC1->ISR & (1U << 0)));  // Wait for ADRDY
 800043e:	bf00      	nop
 8000440:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	f003 0301 	and.w	r3, r3, #1
 800044a:	2b00      	cmp	r3, #0
 800044c:	d0f8      	beq.n	8000440 <Hal_ADC_vInit+0xc0>

    // 5. Configure channel, resolution, sample time (same as before)
    ADC1->SQR1 &= ~(0xF << 0);		// 1 conversion
 800044e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000454:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000458:	f023 030f 	bic.w	r3, r3, #15
 800045c:	6313      	str	r3, [r2, #48]	@ 0x30
    ADC1->SQR1 |= (1U << 6);  		// Rank 1 = channel 1
 800045e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000462:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000464:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000468:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800046c:	6313      	str	r3, [r2, #48]	@ 0x30

    ADC1->SMPR1 &= ~(0x7 << 3);
 800046e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000472:	695b      	ldr	r3, [r3, #20]
 8000474:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000478:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 800047c:	6153      	str	r3, [r2, #20]
    ADC1->SMPR1 |= (0b111 << 3);	// Long sample time
 800047e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000482:	695b      	ldr	r3, [r3, #20]
 8000484:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000488:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 800048c:	6153      	str	r3, [r2, #20]

    ADC1->CFGR &= ~(0x3 << 3);		// 12-bit resolution
 800048e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000492:	68db      	ldr	r3, [r3, #12]
 8000494:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000498:	f023 0318 	bic.w	r3, r3, #24
 800049c:	60d3      	str	r3, [r2, #12]
    ADC1->CFGR |= (1U << 0);		// Enable DMA
 800049e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80004a2:	68db      	ldr	r3, [r3, #12]
 80004a4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80004a8:	f043 0301 	orr.w	r3, r3, #1
 80004ac:	60d3      	str	r3, [r2, #12]
    ADC1->CFGR &= ~(1U << 1);		// DMA one shot
 80004ae:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80004b2:	68db      	ldr	r3, [r3, #12]
 80004b4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80004b8:	f023 0302 	bic.w	r3, r3, #2
 80004bc:	60d3      	str	r3, [r2, #12]

    ADC1->CFGR |= (1U << 13);  // CONT = 1 => Continuous conversion mode
 80004be:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80004c2:	68db      	ldr	r3, [r3, #12]
 80004c4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80004c8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80004cc:	60d3      	str	r3, [r2, #12]
}
 80004ce:	bf00      	nop
 80004d0:	370c      	adds	r7, #12
 80004d2:	46bd      	mov	sp, r7
 80004d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop
 80004dc:	50000300 	.word	0x50000300

080004e0 <Hal_ADC_vStart>:

void Hal_ADC_vStart(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
	ADC1->CR |= (1U << 2);  // ADSTART = 1
 80004e4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80004e8:	689b      	ldr	r3, [r3, #8]
 80004ea:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80004ee:	f043 0304 	orr.w	r3, r3, #4
 80004f2:	6093      	str	r3, [r2, #8]
}
 80004f4:	bf00      	nop
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr

080004fe <Hal_ADC_u16ReadChannel>:

uint16_t Hal_ADC_u16ReadChannel(void)
{
 80004fe:	b480      	push	{r7}
 8000500:	af00      	add	r7, sp, #0
    return (uint16_t)ADC1->DR;
 8000502:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000508:	b29b      	uxth	r3, r3
}
 800050a:	4618      	mov	r0, r3
 800050c:	46bd      	mov	sp, r7
 800050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000512:	4770      	bx	lr

08000514 <Hal_GPIO_vEnable>:
 */

#include "hal_gpio.h"

void Hal_GPIO_vEnable(short u8PinNumber, char u8Type, GPIO_X gpio)
{
 8000514:	b480      	push	{r7}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0
 800051a:	4603      	mov	r3, r0
 800051c:	80fb      	strh	r3, [r7, #6]
 800051e:	460b      	mov	r3, r1
 8000520:	717b      	strb	r3, [r7, #5]
 8000522:	4613      	mov	r3, r2
 8000524:	713b      	strb	r3, [r7, #4]
	switch(gpio)
 8000526:	793b      	ldrb	r3, [r7, #4]
 8000528:	2b02      	cmp	r3, #2
 800052a:	d046      	beq.n	80005ba <Hal_GPIO_vEnable+0xa6>
 800052c:	2b02      	cmp	r3, #2
 800052e:	dc62      	bgt.n	80005f6 <Hal_GPIO_vEnable+0xe2>
 8000530:	2b00      	cmp	r3, #0
 8000532:	d002      	beq.n	800053a <Hal_GPIO_vEnable+0x26>
 8000534:	2b01      	cmp	r3, #1
 8000536:	d022      	beq.n	800057e <Hal_GPIO_vEnable+0x6a>

	case GPIO_D:
	case GPIO_E:
	case GPIO_H:
	default:
		break;
 8000538:	e05d      	b.n	80005f6 <Hal_GPIO_vEnable+0xe2>
		GPIOA->MODER &= GPIO_MODER_RESET(u8PinNumber);
 800053a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	4619      	mov	r1, r3
 8000542:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000546:	005b      	lsls	r3, r3, #1
 8000548:	2203      	movs	r2, #3
 800054a:	fa02 f303 	lsl.w	r3, r2, r3
 800054e:	43db      	mvns	r3, r3
 8000550:	ea01 0203 	and.w	r2, r1, r3
 8000554:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000558:	601a      	str	r2, [r3, #0]
		GPIOA->MODER |= GPIO_MODER_SET(u8PinNumber, u8Type);
 800055a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4619      	mov	r1, r3
 8000562:	797b      	ldrb	r3, [r7, #5]
 8000564:	f003 0203 	and.w	r2, r3, #3
 8000568:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800056c:	005b      	lsls	r3, r3, #1
 800056e:	fa02 f303 	lsl.w	r3, r2, r3
 8000572:	ea41 0203 	orr.w	r2, r1, r3
 8000576:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800057a:	601a      	str	r2, [r3, #0]
		break;
 800057c:	e03c      	b.n	80005f8 <Hal_GPIO_vEnable+0xe4>
		GPIOB->MODER &= GPIO_MODER_RESET(u8PinNumber);
 800057e:	4b21      	ldr	r3, [pc, #132]	@ (8000604 <Hal_GPIO_vEnable+0xf0>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	4619      	mov	r1, r3
 8000584:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000588:	005b      	lsls	r3, r3, #1
 800058a:	2203      	movs	r2, #3
 800058c:	fa02 f303 	lsl.w	r3, r2, r3
 8000590:	43db      	mvns	r3, r3
 8000592:	ea01 0203 	and.w	r2, r1, r3
 8000596:	4b1b      	ldr	r3, [pc, #108]	@ (8000604 <Hal_GPIO_vEnable+0xf0>)
 8000598:	601a      	str	r2, [r3, #0]
		GPIOB->MODER |= GPIO_MODER_SET(u8PinNumber, u8Type);
 800059a:	4b1a      	ldr	r3, [pc, #104]	@ (8000604 <Hal_GPIO_vEnable+0xf0>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	4619      	mov	r1, r3
 80005a0:	797b      	ldrb	r3, [r7, #5]
 80005a2:	f003 0203 	and.w	r2, r3, #3
 80005a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005aa:	005b      	lsls	r3, r3, #1
 80005ac:	fa02 f303 	lsl.w	r3, r2, r3
 80005b0:	ea41 0203 	orr.w	r2, r1, r3
 80005b4:	4b13      	ldr	r3, [pc, #76]	@ (8000604 <Hal_GPIO_vEnable+0xf0>)
 80005b6:	601a      	str	r2, [r3, #0]
		break;
 80005b8:	e01e      	b.n	80005f8 <Hal_GPIO_vEnable+0xe4>
		GPIOC->MODER &= GPIO_MODER_RESET(u8PinNumber);
 80005ba:	4b13      	ldr	r3, [pc, #76]	@ (8000608 <Hal_GPIO_vEnable+0xf4>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4619      	mov	r1, r3
 80005c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005c4:	005b      	lsls	r3, r3, #1
 80005c6:	2203      	movs	r2, #3
 80005c8:	fa02 f303 	lsl.w	r3, r2, r3
 80005cc:	43db      	mvns	r3, r3
 80005ce:	ea01 0203 	and.w	r2, r1, r3
 80005d2:	4b0d      	ldr	r3, [pc, #52]	@ (8000608 <Hal_GPIO_vEnable+0xf4>)
 80005d4:	601a      	str	r2, [r3, #0]
		GPIOC->MODER |= GPIO_MODER_SET(u8PinNumber, u8Type);
 80005d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000608 <Hal_GPIO_vEnable+0xf4>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4619      	mov	r1, r3
 80005dc:	797b      	ldrb	r3, [r7, #5]
 80005de:	f003 0203 	and.w	r2, r3, #3
 80005e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005e6:	005b      	lsls	r3, r3, #1
 80005e8:	fa02 f303 	lsl.w	r3, r2, r3
 80005ec:	ea41 0203 	orr.w	r2, r1, r3
 80005f0:	4b05      	ldr	r3, [pc, #20]	@ (8000608 <Hal_GPIO_vEnable+0xf4>)
 80005f2:	601a      	str	r2, [r3, #0]
		break;
 80005f4:	e000      	b.n	80005f8 <Hal_GPIO_vEnable+0xe4>
		break;
 80005f6:	bf00      	nop
	}
}
 80005f8:	bf00      	nop
 80005fa:	370c      	adds	r7, #12
 80005fc:	46bd      	mov	sp, r7
 80005fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000602:	4770      	bx	lr
 8000604:	48000400 	.word	0x48000400
 8000608:	48000800 	.word	0x48000800

0800060c <Hal_GPIO_vTyp>:

void Hal_GPIO_vTyp(short u8PinNumber, short u8Typ, GPIO_X gpio)
{
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	4603      	mov	r3, r0
 8000614:	80fb      	strh	r3, [r7, #6]
 8000616:	460b      	mov	r3, r1
 8000618:	80bb      	strh	r3, [r7, #4]
 800061a:	4613      	mov	r3, r2
 800061c:	70fb      	strb	r3, [r7, #3]
	switch(gpio)
 800061e:	78fb      	ldrb	r3, [r7, #3]
 8000620:	2b02      	cmp	r3, #2
 8000622:	d03e      	beq.n	80006a2 <Hal_GPIO_vTyp+0x96>
 8000624:	2b02      	cmp	r3, #2
 8000626:	dc56      	bgt.n	80006d6 <Hal_GPIO_vTyp+0xca>
 8000628:	2b00      	cmp	r3, #0
 800062a:	d002      	beq.n	8000632 <Hal_GPIO_vTyp+0x26>
 800062c:	2b01      	cmp	r3, #1
 800062e:	d01e      	beq.n	800066e <Hal_GPIO_vTyp+0x62>

	case GPIO_D:
	case GPIO_E:
	case GPIO_H:
	default:
		break;
 8000630:	e051      	b.n	80006d6 <Hal_GPIO_vTyp+0xca>
		GPIOA->OTYPER &= GPIO_OTYPER_RESET(u8PinNumber);
 8000632:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000636:	685b      	ldr	r3, [r3, #4]
 8000638:	4619      	mov	r1, r3
 800063a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800063e:	2201      	movs	r2, #1
 8000640:	fa02 f303 	lsl.w	r3, r2, r3
 8000644:	43db      	mvns	r3, r3
 8000646:	ea01 0203 	and.w	r2, r1, r3
 800064a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800064e:	605a      	str	r2, [r3, #4]
		GPIOA->OTYPER |= GPIO_OTYPER_SET(u8PinNumber, u8Typ);
 8000650:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000654:	685a      	ldr	r2, [r3, #4]
 8000656:	88bb      	ldrh	r3, [r7, #4]
 8000658:	f003 0101 	and.w	r1, r3, #1
 800065c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000660:	fa01 f303 	lsl.w	r3, r1, r3
 8000664:	f04f 4190 	mov.w	r1, #1207959552	@ 0x48000000
 8000668:	4313      	orrs	r3, r2
 800066a:	604b      	str	r3, [r1, #4]
		break;
 800066c:	e034      	b.n	80006d8 <Hal_GPIO_vTyp+0xcc>
		GPIOB->OTYPER &= GPIO_OTYPER_RESET(u8PinNumber);
 800066e:	4b1d      	ldr	r3, [pc, #116]	@ (80006e4 <Hal_GPIO_vTyp+0xd8>)
 8000670:	685b      	ldr	r3, [r3, #4]
 8000672:	4619      	mov	r1, r3
 8000674:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000678:	2201      	movs	r2, #1
 800067a:	fa02 f303 	lsl.w	r3, r2, r3
 800067e:	43db      	mvns	r3, r3
 8000680:	ea01 0203 	and.w	r2, r1, r3
 8000684:	4b17      	ldr	r3, [pc, #92]	@ (80006e4 <Hal_GPIO_vTyp+0xd8>)
 8000686:	605a      	str	r2, [r3, #4]
		GPIOB->OTYPER |= GPIO_OTYPER_SET(u8PinNumber, u8Typ);
 8000688:	4b16      	ldr	r3, [pc, #88]	@ (80006e4 <Hal_GPIO_vTyp+0xd8>)
 800068a:	685a      	ldr	r2, [r3, #4]
 800068c:	88bb      	ldrh	r3, [r7, #4]
 800068e:	f003 0101 	and.w	r1, r3, #1
 8000692:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000696:	fa01 f303 	lsl.w	r3, r1, r3
 800069a:	4912      	ldr	r1, [pc, #72]	@ (80006e4 <Hal_GPIO_vTyp+0xd8>)
 800069c:	4313      	orrs	r3, r2
 800069e:	604b      	str	r3, [r1, #4]
		break;
 80006a0:	e01a      	b.n	80006d8 <Hal_GPIO_vTyp+0xcc>
		GPIOC->OTYPER &= GPIO_OTYPER_RESET(u8PinNumber);
 80006a2:	4b11      	ldr	r3, [pc, #68]	@ (80006e8 <Hal_GPIO_vTyp+0xdc>)
 80006a4:	685b      	ldr	r3, [r3, #4]
 80006a6:	4619      	mov	r1, r3
 80006a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006ac:	2201      	movs	r2, #1
 80006ae:	fa02 f303 	lsl.w	r3, r2, r3
 80006b2:	43db      	mvns	r3, r3
 80006b4:	ea01 0203 	and.w	r2, r1, r3
 80006b8:	4b0b      	ldr	r3, [pc, #44]	@ (80006e8 <Hal_GPIO_vTyp+0xdc>)
 80006ba:	605a      	str	r2, [r3, #4]
		GPIOC->OTYPER |= GPIO_OTYPER_SET(u8PinNumber, u8Typ);
 80006bc:	4b0a      	ldr	r3, [pc, #40]	@ (80006e8 <Hal_GPIO_vTyp+0xdc>)
 80006be:	685a      	ldr	r2, [r3, #4]
 80006c0:	88bb      	ldrh	r3, [r7, #4]
 80006c2:	f003 0101 	and.w	r1, r3, #1
 80006c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006ca:	fa01 f303 	lsl.w	r3, r1, r3
 80006ce:	4906      	ldr	r1, [pc, #24]	@ (80006e8 <Hal_GPIO_vTyp+0xdc>)
 80006d0:	4313      	orrs	r3, r2
 80006d2:	604b      	str	r3, [r1, #4]
		break;
 80006d4:	e000      	b.n	80006d8 <Hal_GPIO_vTyp+0xcc>
		break;
 80006d6:	bf00      	nop
	}
}
 80006d8:	bf00      	nop
 80006da:	370c      	adds	r7, #12
 80006dc:	46bd      	mov	sp, r7
 80006de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e2:	4770      	bx	lr
 80006e4:	48000400 	.word	0x48000400
 80006e8:	48000800 	.word	0x48000800

080006ec <Hal_GPIO_vPullUpPullDown>:
	GPIOA->OSPEEDR |= GPIO_OPSPEED_RESET(u8PinNumber);
	GPIOA->OSPEEDR |= GPIO_OPSPEED_SET(u8OutputSpeed, u8PinNumber);
}

void Hal_GPIO_vPullUpPullDown(short u8PinNumber, short u8PullUpPullDown, GPIO_X gpio)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	80fb      	strh	r3, [r7, #6]
 80006f6:	460b      	mov	r3, r1
 80006f8:	80bb      	strh	r3, [r7, #4]
 80006fa:	4613      	mov	r3, r2
 80006fc:	70fb      	strb	r3, [r7, #3]
	switch(gpio)
 80006fe:	78fb      	ldrb	r3, [r7, #3]
 8000700:	2b02      	cmp	r3, #2
 8000702:	d03c      	beq.n	800077e <Hal_GPIO_vPullUpPullDown+0x92>
 8000704:	2b02      	cmp	r3, #2
 8000706:	dc53      	bgt.n	80007b0 <Hal_GPIO_vPullUpPullDown+0xc4>
 8000708:	2b00      	cmp	r3, #0
 800070a:	d002      	beq.n	8000712 <Hal_GPIO_vPullUpPullDown+0x26>
 800070c:	2b01      	cmp	r3, #1
 800070e:	d01d      	beq.n	800074c <Hal_GPIO_vPullUpPullDown+0x60>

	case GPIO_D:
	case GPIO_E:
	case GPIO_H:
	default:
		break;
 8000710:	e04e      	b.n	80007b0 <Hal_GPIO_vPullUpPullDown+0xc4>
		GPIOA->PUPDR &= GPIO_PUPD_RESET(u8PinNumber);
 8000712:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000716:	68db      	ldr	r3, [r3, #12]
 8000718:	4619      	mov	r1, r3
 800071a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800071e:	2201      	movs	r2, #1
 8000720:	fa02 f303 	lsl.w	r3, r2, r3
 8000724:	43db      	mvns	r3, r3
 8000726:	ea01 0203 	and.w	r2, r1, r3
 800072a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800072e:	60da      	str	r2, [r3, #12]
		GPIOA->PUPDR |= GPIO_PUPD_SET(u8PullUpPullDown, u8PinNumber);
 8000730:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000734:	68da      	ldr	r2, [r3, #12]
 8000736:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800073a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800073e:	fa01 f303 	lsl.w	r3, r1, r3
 8000742:	f04f 4190 	mov.w	r1, #1207959552	@ 0x48000000
 8000746:	4313      	orrs	r3, r2
 8000748:	60cb      	str	r3, [r1, #12]
		break;
 800074a:	e032      	b.n	80007b2 <Hal_GPIO_vPullUpPullDown+0xc6>
		GPIOB->PUPDR &= GPIO_PUPD_RESET(u8PinNumber);
 800074c:	4b1c      	ldr	r3, [pc, #112]	@ (80007c0 <Hal_GPIO_vPullUpPullDown+0xd4>)
 800074e:	68db      	ldr	r3, [r3, #12]
 8000750:	4619      	mov	r1, r3
 8000752:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000756:	2201      	movs	r2, #1
 8000758:	fa02 f303 	lsl.w	r3, r2, r3
 800075c:	43db      	mvns	r3, r3
 800075e:	ea01 0203 	and.w	r2, r1, r3
 8000762:	4b17      	ldr	r3, [pc, #92]	@ (80007c0 <Hal_GPIO_vPullUpPullDown+0xd4>)
 8000764:	60da      	str	r2, [r3, #12]
		GPIOB->PUPDR |= GPIO_PUPD_SET(u8PullUpPullDown, u8PinNumber);
 8000766:	4b16      	ldr	r3, [pc, #88]	@ (80007c0 <Hal_GPIO_vPullUpPullDown+0xd4>)
 8000768:	68da      	ldr	r2, [r3, #12]
 800076a:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800076e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000772:	fa01 f303 	lsl.w	r3, r1, r3
 8000776:	4912      	ldr	r1, [pc, #72]	@ (80007c0 <Hal_GPIO_vPullUpPullDown+0xd4>)
 8000778:	4313      	orrs	r3, r2
 800077a:	60cb      	str	r3, [r1, #12]
		break;
 800077c:	e019      	b.n	80007b2 <Hal_GPIO_vPullUpPullDown+0xc6>
		GPIOC->PUPDR &= GPIO_PUPD_RESET(u8PinNumber);
 800077e:	4b11      	ldr	r3, [pc, #68]	@ (80007c4 <Hal_GPIO_vPullUpPullDown+0xd8>)
 8000780:	68db      	ldr	r3, [r3, #12]
 8000782:	4619      	mov	r1, r3
 8000784:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000788:	2201      	movs	r2, #1
 800078a:	fa02 f303 	lsl.w	r3, r2, r3
 800078e:	43db      	mvns	r3, r3
 8000790:	ea01 0203 	and.w	r2, r1, r3
 8000794:	4b0b      	ldr	r3, [pc, #44]	@ (80007c4 <Hal_GPIO_vPullUpPullDown+0xd8>)
 8000796:	60da      	str	r2, [r3, #12]
		GPIOC->PUPDR |= GPIO_PUPD_SET(u8PullUpPullDown, u8PinNumber);
 8000798:	4b0a      	ldr	r3, [pc, #40]	@ (80007c4 <Hal_GPIO_vPullUpPullDown+0xd8>)
 800079a:	68da      	ldr	r2, [r3, #12]
 800079c:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80007a0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80007a4:	fa01 f303 	lsl.w	r3, r1, r3
 80007a8:	4906      	ldr	r1, [pc, #24]	@ (80007c4 <Hal_GPIO_vPullUpPullDown+0xd8>)
 80007aa:	4313      	orrs	r3, r2
 80007ac:	60cb      	str	r3, [r1, #12]
		break;
 80007ae:	e000      	b.n	80007b2 <Hal_GPIO_vPullUpPullDown+0xc6>
		break;
 80007b0:	bf00      	nop
	}
}
 80007b2:	bf00      	nop
 80007b4:	370c      	adds	r7, #12
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	48000400 	.word	0x48000400
 80007c4:	48000800 	.word	0x48000800

080007c8 <Hal_GPIO_vOutputEnable>:

void Hal_GPIO_vOutputEnable(short u8PinNumber, GPIO_X gpio)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	4603      	mov	r3, r0
 80007d0:	460a      	mov	r2, r1
 80007d2:	80fb      	strh	r3, [r7, #6]
 80007d4:	4613      	mov	r3, r2
 80007d6:	717b      	strb	r3, [r7, #5]
	switch(gpio)
 80007d8:	797b      	ldrb	r3, [r7, #5]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d002      	beq.n	80007e4 <Hal_GPIO_vOutputEnable+0x1c>
 80007de:	2b01      	cmp	r3, #1
 80007e0:	d009      	beq.n	80007f6 <Hal_GPIO_vOutputEnable+0x2e>

	case GPIO_D:
	case GPIO_E:
	case GPIO_H:
	default:
		break;
 80007e2:	e010      	b.n	8000806 <Hal_GPIO_vOutputEnable+0x3e>
		GPIOA->BSRR = GPIO_BSSR_SET(u8PinNumber, GPIO_PIN_EN);
 80007e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007e8:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80007ec:	2101      	movs	r1, #1
 80007ee:	fa01 f303 	lsl.w	r3, r1, r3
 80007f2:	6193      	str	r3, [r2, #24]
		break;
 80007f4:	e007      	b.n	8000806 <Hal_GPIO_vOutputEnable+0x3e>
		GPIOB->BSRR = GPIO_BSSR_SET(u8PinNumber, GPIO_PIN_EN);
 80007f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007fa:	4a06      	ldr	r2, [pc, #24]	@ (8000814 <Hal_GPIO_vOutputEnable+0x4c>)
 80007fc:	2101      	movs	r1, #1
 80007fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000802:	6193      	str	r3, [r2, #24]
		break;
 8000804:	bf00      	nop
	}
}
 8000806:	bf00      	nop
 8000808:	370c      	adds	r7, #12
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	48000400 	.word	0x48000400

08000818 <Config_vSetupGPIO>:
		break;
	}
}

void Config_vSetupGPIO(uint8_t u8Pin, uint8_t u8PinType, uint8_t u8Typ, uint8_t u8PuPd, GPIO_X gpio)
{
 8000818:	b590      	push	{r4, r7, lr}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0
 800081e:	4604      	mov	r4, r0
 8000820:	4608      	mov	r0, r1
 8000822:	4611      	mov	r1, r2
 8000824:	461a      	mov	r2, r3
 8000826:	4623      	mov	r3, r4
 8000828:	71fb      	strb	r3, [r7, #7]
 800082a:	4603      	mov	r3, r0
 800082c:	71bb      	strb	r3, [r7, #6]
 800082e:	460b      	mov	r3, r1
 8000830:	717b      	strb	r3, [r7, #5]
 8000832:	4613      	mov	r3, r2
 8000834:	713b      	strb	r3, [r7, #4]
	Hal_GPIO_vEnable(u8Pin, u8PinType, gpio);
 8000836:	79fb      	ldrb	r3, [r7, #7]
 8000838:	b21b      	sxth	r3, r3
 800083a:	7e3a      	ldrb	r2, [r7, #24]
 800083c:	79b9      	ldrb	r1, [r7, #6]
 800083e:	4618      	mov	r0, r3
 8000840:	f7ff fe68 	bl	8000514 <Hal_GPIO_vEnable>
	Hal_GPIO_vTyp(u8Pin, u8Typ, gpio);
 8000844:	79fb      	ldrb	r3, [r7, #7]
 8000846:	b21b      	sxth	r3, r3
 8000848:	797a      	ldrb	r2, [r7, #5]
 800084a:	b211      	sxth	r1, r2
 800084c:	7e3a      	ldrb	r2, [r7, #24]
 800084e:	4618      	mov	r0, r3
 8000850:	f7ff fedc 	bl	800060c <Hal_GPIO_vTyp>
	Hal_GPIO_vPullUpPullDown(u8Pin, u8PuPd, gpio);
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	b21b      	sxth	r3, r3
 8000858:	793a      	ldrb	r2, [r7, #4]
 800085a:	b211      	sxth	r1, r2
 800085c:	7e3a      	ldrb	r2, [r7, #24]
 800085e:	4618      	mov	r0, r3
 8000860:	f7ff ff44 	bl	80006ec <Hal_GPIO_vPullUpPullDown>
}
 8000864:	bf00      	nop
 8000866:	370c      	adds	r7, #12
 8000868:	46bd      	mov	sp, r7
 800086a:	bd90      	pop	{r4, r7, pc}

0800086c <Hal_GPIO_vSetupAlternateFunction>:

void Hal_GPIO_vSetupAlternateFunction(uint8_t u8Pin, uint8_t u8AltFunc, GPIO_X gpio)
{
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
 8000872:	4603      	mov	r3, r0
 8000874:	71fb      	strb	r3, [r7, #7]
 8000876:	460b      	mov	r3, r1
 8000878:	71bb      	strb	r3, [r7, #6]
 800087a:	4613      	mov	r3, r2
 800087c:	717b      	strb	r3, [r7, #5]
	switch (gpio){
 800087e:	797b      	ldrb	r3, [r7, #5]
 8000880:	2b05      	cmp	r3, #5
 8000882:	f200 813d 	bhi.w	8000b00 <Hal_GPIO_vSetupAlternateFunction+0x294>
 8000886:	a201      	add	r2, pc, #4	@ (adr r2, 800088c <Hal_GPIO_vSetupAlternateFunction+0x20>)
 8000888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800088c:	080008a5 	.word	0x080008a5
 8000890:	08000917 	.word	0x08000917
 8000894:	08000979 	.word	0x08000979
 8000898:	080009db 	.word	0x080009db
 800089c:	08000a3d 	.word	0x08000a3d
 80008a0:	08000a9f 	.word	0x08000a9f
		case GPIO_A:
			if (u8Pin <= 7)
 80008a4:	79fb      	ldrb	r3, [r7, #7]
 80008a6:	2b07      	cmp	r3, #7
 80008a8:	d819      	bhi.n	80008de <Hal_GPIO_vSetupAlternateFunction+0x72>
			{
			    GPIOA->AFRL &= ~(0xF << (u8Pin*4));
 80008aa:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80008ae:	6a1a      	ldr	r2, [r3, #32]
 80008b0:	79fb      	ldrb	r3, [r7, #7]
 80008b2:	009b      	lsls	r3, r3, #2
 80008b4:	210f      	movs	r1, #15
 80008b6:	fa01 f303 	lsl.w	r3, r1, r3
 80008ba:	43db      	mvns	r3, r3
 80008bc:	f04f 4190 	mov.w	r1, #1207959552	@ 0x48000000
 80008c0:	4013      	ands	r3, r2
 80008c2:	620b      	str	r3, [r1, #32]
			    GPIOA->AFRL |=  (u8AltFunc << (u8Pin*4));
 80008c4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80008c8:	6a1a      	ldr	r2, [r3, #32]
 80008ca:	79b9      	ldrb	r1, [r7, #6]
 80008cc:	79fb      	ldrb	r3, [r7, #7]
 80008ce:	009b      	lsls	r3, r3, #2
 80008d0:	fa01 f303 	lsl.w	r3, r1, r3
 80008d4:	f04f 4190 	mov.w	r1, #1207959552	@ 0x48000000
 80008d8:	4313      	orrs	r3, r2
 80008da:	620b      	str	r3, [r1, #32]
			else
			{
			    GPIOA->AFRH &= ~(0xF << ((u8Pin-8)*4));
			    GPIOA->AFRH |=  (u8AltFunc << ((u8Pin-8)*4));
			}
			break;
 80008dc:	e111      	b.n	8000b02 <Hal_GPIO_vSetupAlternateFunction+0x296>
			    GPIOA->AFRH &= ~(0xF << ((u8Pin-8)*4));
 80008de:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80008e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80008e4:	79fb      	ldrb	r3, [r7, #7]
 80008e6:	3b08      	subs	r3, #8
 80008e8:	009b      	lsls	r3, r3, #2
 80008ea:	210f      	movs	r1, #15
 80008ec:	fa01 f303 	lsl.w	r3, r1, r3
 80008f0:	43db      	mvns	r3, r3
 80008f2:	f04f 4190 	mov.w	r1, #1207959552	@ 0x48000000
 80008f6:	4013      	ands	r3, r2
 80008f8:	624b      	str	r3, [r1, #36]	@ 0x24
			    GPIOA->AFRH |=  (u8AltFunc << ((u8Pin-8)*4));
 80008fa:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80008fe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000900:	79b9      	ldrb	r1, [r7, #6]
 8000902:	79fb      	ldrb	r3, [r7, #7]
 8000904:	3b08      	subs	r3, #8
 8000906:	009b      	lsls	r3, r3, #2
 8000908:	fa01 f303 	lsl.w	r3, r1, r3
 800090c:	f04f 4190 	mov.w	r1, #1207959552	@ 0x48000000
 8000910:	4313      	orrs	r3, r2
 8000912:	624b      	str	r3, [r1, #36]	@ 0x24
			break;
 8000914:	e0f5      	b.n	8000b02 <Hal_GPIO_vSetupAlternateFunction+0x296>

		case GPIO_B:
			if (u8Pin <= 7)
 8000916:	79fb      	ldrb	r3, [r7, #7]
 8000918:	2b07      	cmp	r3, #7
 800091a:	d815      	bhi.n	8000948 <Hal_GPIO_vSetupAlternateFunction+0xdc>
			{
			    GPIOB->AFRL &= ~(0xF << (u8Pin*4));
 800091c:	4b7c      	ldr	r3, [pc, #496]	@ (8000b10 <Hal_GPIO_vSetupAlternateFunction+0x2a4>)
 800091e:	6a1a      	ldr	r2, [r3, #32]
 8000920:	79fb      	ldrb	r3, [r7, #7]
 8000922:	009b      	lsls	r3, r3, #2
 8000924:	210f      	movs	r1, #15
 8000926:	fa01 f303 	lsl.w	r3, r1, r3
 800092a:	43db      	mvns	r3, r3
 800092c:	4978      	ldr	r1, [pc, #480]	@ (8000b10 <Hal_GPIO_vSetupAlternateFunction+0x2a4>)
 800092e:	4013      	ands	r3, r2
 8000930:	620b      	str	r3, [r1, #32]
			    GPIOB->AFRL |=  (u8AltFunc << (u8Pin*4));
 8000932:	4b77      	ldr	r3, [pc, #476]	@ (8000b10 <Hal_GPIO_vSetupAlternateFunction+0x2a4>)
 8000934:	6a1a      	ldr	r2, [r3, #32]
 8000936:	79b9      	ldrb	r1, [r7, #6]
 8000938:	79fb      	ldrb	r3, [r7, #7]
 800093a:	009b      	lsls	r3, r3, #2
 800093c:	fa01 f303 	lsl.w	r3, r1, r3
 8000940:	4973      	ldr	r1, [pc, #460]	@ (8000b10 <Hal_GPIO_vSetupAlternateFunction+0x2a4>)
 8000942:	4313      	orrs	r3, r2
 8000944:	620b      	str	r3, [r1, #32]
			else
			{
			    GPIOB->AFRH &= ~(0xF << ((u8Pin-8)*4));
			    GPIOB->AFRH |=  (u8AltFunc << ((u8Pin-8)*4));
			}
			break;
 8000946:	e0dc      	b.n	8000b02 <Hal_GPIO_vSetupAlternateFunction+0x296>
			    GPIOB->AFRH &= ~(0xF << ((u8Pin-8)*4));
 8000948:	4b71      	ldr	r3, [pc, #452]	@ (8000b10 <Hal_GPIO_vSetupAlternateFunction+0x2a4>)
 800094a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800094c:	79fb      	ldrb	r3, [r7, #7]
 800094e:	3b08      	subs	r3, #8
 8000950:	009b      	lsls	r3, r3, #2
 8000952:	210f      	movs	r1, #15
 8000954:	fa01 f303 	lsl.w	r3, r1, r3
 8000958:	43db      	mvns	r3, r3
 800095a:	496d      	ldr	r1, [pc, #436]	@ (8000b10 <Hal_GPIO_vSetupAlternateFunction+0x2a4>)
 800095c:	4013      	ands	r3, r2
 800095e:	624b      	str	r3, [r1, #36]	@ 0x24
			    GPIOB->AFRH |=  (u8AltFunc << ((u8Pin-8)*4));
 8000960:	4b6b      	ldr	r3, [pc, #428]	@ (8000b10 <Hal_GPIO_vSetupAlternateFunction+0x2a4>)
 8000962:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000964:	79b9      	ldrb	r1, [r7, #6]
 8000966:	79fb      	ldrb	r3, [r7, #7]
 8000968:	3b08      	subs	r3, #8
 800096a:	009b      	lsls	r3, r3, #2
 800096c:	fa01 f303 	lsl.w	r3, r1, r3
 8000970:	4967      	ldr	r1, [pc, #412]	@ (8000b10 <Hal_GPIO_vSetupAlternateFunction+0x2a4>)
 8000972:	4313      	orrs	r3, r2
 8000974:	624b      	str	r3, [r1, #36]	@ 0x24
			break;
 8000976:	e0c4      	b.n	8000b02 <Hal_GPIO_vSetupAlternateFunction+0x296>

		case GPIO_C:
			if (u8Pin <= 7)
 8000978:	79fb      	ldrb	r3, [r7, #7]
 800097a:	2b07      	cmp	r3, #7
 800097c:	d815      	bhi.n	80009aa <Hal_GPIO_vSetupAlternateFunction+0x13e>
			{
			    GPIOC->AFRL &= ~(0xF << (u8Pin*4));  // Clear AFR for PB9
 800097e:	4b65      	ldr	r3, [pc, #404]	@ (8000b14 <Hal_GPIO_vSetupAlternateFunction+0x2a8>)
 8000980:	6a1a      	ldr	r2, [r3, #32]
 8000982:	79fb      	ldrb	r3, [r7, #7]
 8000984:	009b      	lsls	r3, r3, #2
 8000986:	210f      	movs	r1, #15
 8000988:	fa01 f303 	lsl.w	r3, r1, r3
 800098c:	43db      	mvns	r3, r3
 800098e:	4961      	ldr	r1, [pc, #388]	@ (8000b14 <Hal_GPIO_vSetupAlternateFunction+0x2a8>)
 8000990:	4013      	ands	r3, r2
 8000992:	620b      	str	r3, [r1, #32]
			    GPIOC->AFRL |=  (u8AltFunc << (u8Pin*4));  // AF7 = USART3
 8000994:	4b5f      	ldr	r3, [pc, #380]	@ (8000b14 <Hal_GPIO_vSetupAlternateFunction+0x2a8>)
 8000996:	6a1a      	ldr	r2, [r3, #32]
 8000998:	79b9      	ldrb	r1, [r7, #6]
 800099a:	79fb      	ldrb	r3, [r7, #7]
 800099c:	009b      	lsls	r3, r3, #2
 800099e:	fa01 f303 	lsl.w	r3, r1, r3
 80009a2:	495c      	ldr	r1, [pc, #368]	@ (8000b14 <Hal_GPIO_vSetupAlternateFunction+0x2a8>)
 80009a4:	4313      	orrs	r3, r2
 80009a6:	620b      	str	r3, [r1, #32]
			else
			{
			    GPIOC->AFRH &= ~(0xF << ((u8Pin-8)*4));  // Clear AFR for PB9
			    GPIOC->AFRH |=  (u8AltFunc << ((u8Pin-8)*4));
			}
			break;
 80009a8:	e0ab      	b.n	8000b02 <Hal_GPIO_vSetupAlternateFunction+0x296>
			    GPIOC->AFRH &= ~(0xF << ((u8Pin-8)*4));  // Clear AFR for PB9
 80009aa:	4b5a      	ldr	r3, [pc, #360]	@ (8000b14 <Hal_GPIO_vSetupAlternateFunction+0x2a8>)
 80009ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80009ae:	79fb      	ldrb	r3, [r7, #7]
 80009b0:	3b08      	subs	r3, #8
 80009b2:	009b      	lsls	r3, r3, #2
 80009b4:	210f      	movs	r1, #15
 80009b6:	fa01 f303 	lsl.w	r3, r1, r3
 80009ba:	43db      	mvns	r3, r3
 80009bc:	4955      	ldr	r1, [pc, #340]	@ (8000b14 <Hal_GPIO_vSetupAlternateFunction+0x2a8>)
 80009be:	4013      	ands	r3, r2
 80009c0:	624b      	str	r3, [r1, #36]	@ 0x24
			    GPIOC->AFRH |=  (u8AltFunc << ((u8Pin-8)*4));
 80009c2:	4b54      	ldr	r3, [pc, #336]	@ (8000b14 <Hal_GPIO_vSetupAlternateFunction+0x2a8>)
 80009c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80009c6:	79b9      	ldrb	r1, [r7, #6]
 80009c8:	79fb      	ldrb	r3, [r7, #7]
 80009ca:	3b08      	subs	r3, #8
 80009cc:	009b      	lsls	r3, r3, #2
 80009ce:	fa01 f303 	lsl.w	r3, r1, r3
 80009d2:	4950      	ldr	r1, [pc, #320]	@ (8000b14 <Hal_GPIO_vSetupAlternateFunction+0x2a8>)
 80009d4:	4313      	orrs	r3, r2
 80009d6:	624b      	str	r3, [r1, #36]	@ 0x24
			break;
 80009d8:	e093      	b.n	8000b02 <Hal_GPIO_vSetupAlternateFunction+0x296>

		case GPIO_D:
			if (u8Pin <= 7)
 80009da:	79fb      	ldrb	r3, [r7, #7]
 80009dc:	2b07      	cmp	r3, #7
 80009de:	d815      	bhi.n	8000a0c <Hal_GPIO_vSetupAlternateFunction+0x1a0>
			{
			    GPIOD->AFRL &= ~(0xF << (u8Pin*4));  // Clear AFR for PB9
 80009e0:	4b4d      	ldr	r3, [pc, #308]	@ (8000b18 <Hal_GPIO_vSetupAlternateFunction+0x2ac>)
 80009e2:	6a1a      	ldr	r2, [r3, #32]
 80009e4:	79fb      	ldrb	r3, [r7, #7]
 80009e6:	009b      	lsls	r3, r3, #2
 80009e8:	210f      	movs	r1, #15
 80009ea:	fa01 f303 	lsl.w	r3, r1, r3
 80009ee:	43db      	mvns	r3, r3
 80009f0:	4949      	ldr	r1, [pc, #292]	@ (8000b18 <Hal_GPIO_vSetupAlternateFunction+0x2ac>)
 80009f2:	4013      	ands	r3, r2
 80009f4:	620b      	str	r3, [r1, #32]
			    GPIOD->AFRL |=  (u8AltFunc << (u8Pin*4));  // AF7 = USART3
 80009f6:	4b48      	ldr	r3, [pc, #288]	@ (8000b18 <Hal_GPIO_vSetupAlternateFunction+0x2ac>)
 80009f8:	6a1a      	ldr	r2, [r3, #32]
 80009fa:	79b9      	ldrb	r1, [r7, #6]
 80009fc:	79fb      	ldrb	r3, [r7, #7]
 80009fe:	009b      	lsls	r3, r3, #2
 8000a00:	fa01 f303 	lsl.w	r3, r1, r3
 8000a04:	4944      	ldr	r1, [pc, #272]	@ (8000b18 <Hal_GPIO_vSetupAlternateFunction+0x2ac>)
 8000a06:	4313      	orrs	r3, r2
 8000a08:	620b      	str	r3, [r1, #32]
			else
			{
			    GPIOD->AFRH &= ~(0xF << ((u8Pin-8)*4));  // Clear AFR for PB9
			    GPIOD->AFRH |=  (u8AltFunc << ((u8Pin-8)*4));
			}
			break;
 8000a0a:	e07a      	b.n	8000b02 <Hal_GPIO_vSetupAlternateFunction+0x296>
			    GPIOD->AFRH &= ~(0xF << ((u8Pin-8)*4));  // Clear AFR for PB9
 8000a0c:	4b42      	ldr	r3, [pc, #264]	@ (8000b18 <Hal_GPIO_vSetupAlternateFunction+0x2ac>)
 8000a0e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000a10:	79fb      	ldrb	r3, [r7, #7]
 8000a12:	3b08      	subs	r3, #8
 8000a14:	009b      	lsls	r3, r3, #2
 8000a16:	210f      	movs	r1, #15
 8000a18:	fa01 f303 	lsl.w	r3, r1, r3
 8000a1c:	43db      	mvns	r3, r3
 8000a1e:	493e      	ldr	r1, [pc, #248]	@ (8000b18 <Hal_GPIO_vSetupAlternateFunction+0x2ac>)
 8000a20:	4013      	ands	r3, r2
 8000a22:	624b      	str	r3, [r1, #36]	@ 0x24
			    GPIOD->AFRH |=  (u8AltFunc << ((u8Pin-8)*4));
 8000a24:	4b3c      	ldr	r3, [pc, #240]	@ (8000b18 <Hal_GPIO_vSetupAlternateFunction+0x2ac>)
 8000a26:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000a28:	79b9      	ldrb	r1, [r7, #6]
 8000a2a:	79fb      	ldrb	r3, [r7, #7]
 8000a2c:	3b08      	subs	r3, #8
 8000a2e:	009b      	lsls	r3, r3, #2
 8000a30:	fa01 f303 	lsl.w	r3, r1, r3
 8000a34:	4938      	ldr	r1, [pc, #224]	@ (8000b18 <Hal_GPIO_vSetupAlternateFunction+0x2ac>)
 8000a36:	4313      	orrs	r3, r2
 8000a38:	624b      	str	r3, [r1, #36]	@ 0x24
			break;
 8000a3a:	e062      	b.n	8000b02 <Hal_GPIO_vSetupAlternateFunction+0x296>

		case GPIO_E:
			if (u8Pin <= 7)
 8000a3c:	79fb      	ldrb	r3, [r7, #7]
 8000a3e:	2b07      	cmp	r3, #7
 8000a40:	d815      	bhi.n	8000a6e <Hal_GPIO_vSetupAlternateFunction+0x202>
			{
			    GPIOE->AFRL &= ~(0xF << (u8Pin*4));  // Clear AFR for PB9
 8000a42:	4b36      	ldr	r3, [pc, #216]	@ (8000b1c <Hal_GPIO_vSetupAlternateFunction+0x2b0>)
 8000a44:	6a1a      	ldr	r2, [r3, #32]
 8000a46:	79fb      	ldrb	r3, [r7, #7]
 8000a48:	009b      	lsls	r3, r3, #2
 8000a4a:	210f      	movs	r1, #15
 8000a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a50:	43db      	mvns	r3, r3
 8000a52:	4932      	ldr	r1, [pc, #200]	@ (8000b1c <Hal_GPIO_vSetupAlternateFunction+0x2b0>)
 8000a54:	4013      	ands	r3, r2
 8000a56:	620b      	str	r3, [r1, #32]
			    GPIOE->AFRL |=  (u8AltFunc << (u8Pin*4));  // AF7 = USART3
 8000a58:	4b30      	ldr	r3, [pc, #192]	@ (8000b1c <Hal_GPIO_vSetupAlternateFunction+0x2b0>)
 8000a5a:	6a1a      	ldr	r2, [r3, #32]
 8000a5c:	79b9      	ldrb	r1, [r7, #6]
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
 8000a60:	009b      	lsls	r3, r3, #2
 8000a62:	fa01 f303 	lsl.w	r3, r1, r3
 8000a66:	492d      	ldr	r1, [pc, #180]	@ (8000b1c <Hal_GPIO_vSetupAlternateFunction+0x2b0>)
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	620b      	str	r3, [r1, #32]
			else
			{
			    GPIOE->AFRH &= ~(0xF << ((u8Pin-8)*4));  // Clear AFR for PB9
			    GPIOE->AFRH |=  (u8AltFunc << ((u8Pin-8)*4));
			}
			break;
 8000a6c:	e049      	b.n	8000b02 <Hal_GPIO_vSetupAlternateFunction+0x296>
			    GPIOE->AFRH &= ~(0xF << ((u8Pin-8)*4));  // Clear AFR for PB9
 8000a6e:	4b2b      	ldr	r3, [pc, #172]	@ (8000b1c <Hal_GPIO_vSetupAlternateFunction+0x2b0>)
 8000a70:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000a72:	79fb      	ldrb	r3, [r7, #7]
 8000a74:	3b08      	subs	r3, #8
 8000a76:	009b      	lsls	r3, r3, #2
 8000a78:	210f      	movs	r1, #15
 8000a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a7e:	43db      	mvns	r3, r3
 8000a80:	4926      	ldr	r1, [pc, #152]	@ (8000b1c <Hal_GPIO_vSetupAlternateFunction+0x2b0>)
 8000a82:	4013      	ands	r3, r2
 8000a84:	624b      	str	r3, [r1, #36]	@ 0x24
			    GPIOE->AFRH |=  (u8AltFunc << ((u8Pin-8)*4));
 8000a86:	4b25      	ldr	r3, [pc, #148]	@ (8000b1c <Hal_GPIO_vSetupAlternateFunction+0x2b0>)
 8000a88:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000a8a:	79b9      	ldrb	r1, [r7, #6]
 8000a8c:	79fb      	ldrb	r3, [r7, #7]
 8000a8e:	3b08      	subs	r3, #8
 8000a90:	009b      	lsls	r3, r3, #2
 8000a92:	fa01 f303 	lsl.w	r3, r1, r3
 8000a96:	4921      	ldr	r1, [pc, #132]	@ (8000b1c <Hal_GPIO_vSetupAlternateFunction+0x2b0>)
 8000a98:	4313      	orrs	r3, r2
 8000a9a:	624b      	str	r3, [r1, #36]	@ 0x24
			break;
 8000a9c:	e031      	b.n	8000b02 <Hal_GPIO_vSetupAlternateFunction+0x296>

		case GPIO_H:
			if (u8Pin <= 7)
 8000a9e:	79fb      	ldrb	r3, [r7, #7]
 8000aa0:	2b07      	cmp	r3, #7
 8000aa2:	d815      	bhi.n	8000ad0 <Hal_GPIO_vSetupAlternateFunction+0x264>
			{
			    GPIOH->AFRL &= ~(0xF << (u8Pin*4));  // Clear AFR for PB9
 8000aa4:	4b1e      	ldr	r3, [pc, #120]	@ (8000b20 <Hal_GPIO_vSetupAlternateFunction+0x2b4>)
 8000aa6:	6a1a      	ldr	r2, [r3, #32]
 8000aa8:	79fb      	ldrb	r3, [r7, #7]
 8000aaa:	009b      	lsls	r3, r3, #2
 8000aac:	210f      	movs	r1, #15
 8000aae:	fa01 f303 	lsl.w	r3, r1, r3
 8000ab2:	43db      	mvns	r3, r3
 8000ab4:	491a      	ldr	r1, [pc, #104]	@ (8000b20 <Hal_GPIO_vSetupAlternateFunction+0x2b4>)
 8000ab6:	4013      	ands	r3, r2
 8000ab8:	620b      	str	r3, [r1, #32]
			    GPIOH->AFRL |=  (u8AltFunc << (u8Pin*4));  // AF7 = USART3
 8000aba:	4b19      	ldr	r3, [pc, #100]	@ (8000b20 <Hal_GPIO_vSetupAlternateFunction+0x2b4>)
 8000abc:	6a1a      	ldr	r2, [r3, #32]
 8000abe:	79b9      	ldrb	r1, [r7, #6]
 8000ac0:	79fb      	ldrb	r3, [r7, #7]
 8000ac2:	009b      	lsls	r3, r3, #2
 8000ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ac8:	4915      	ldr	r1, [pc, #84]	@ (8000b20 <Hal_GPIO_vSetupAlternateFunction+0x2b4>)
 8000aca:	4313      	orrs	r3, r2
 8000acc:	620b      	str	r3, [r1, #32]
			else
			{
			    GPIOH->AFRH &= ~(0xF << ((u8Pin-8)*4));  // Clear AFR for PB9
			    GPIOH->AFRH |=  (u8AltFunc << ((u8Pin-8)*4));
			}
			break;
 8000ace:	e018      	b.n	8000b02 <Hal_GPIO_vSetupAlternateFunction+0x296>
			    GPIOH->AFRH &= ~(0xF << ((u8Pin-8)*4));  // Clear AFR for PB9
 8000ad0:	4b13      	ldr	r3, [pc, #76]	@ (8000b20 <Hal_GPIO_vSetupAlternateFunction+0x2b4>)
 8000ad2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000ad4:	79fb      	ldrb	r3, [r7, #7]
 8000ad6:	3b08      	subs	r3, #8
 8000ad8:	009b      	lsls	r3, r3, #2
 8000ada:	210f      	movs	r1, #15
 8000adc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae0:	43db      	mvns	r3, r3
 8000ae2:	490f      	ldr	r1, [pc, #60]	@ (8000b20 <Hal_GPIO_vSetupAlternateFunction+0x2b4>)
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	624b      	str	r3, [r1, #36]	@ 0x24
			    GPIOH->AFRH |=  (u8AltFunc << ((u8Pin-8)*4));
 8000ae8:	4b0d      	ldr	r3, [pc, #52]	@ (8000b20 <Hal_GPIO_vSetupAlternateFunction+0x2b4>)
 8000aea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000aec:	79b9      	ldrb	r1, [r7, #6]
 8000aee:	79fb      	ldrb	r3, [r7, #7]
 8000af0:	3b08      	subs	r3, #8
 8000af2:	009b      	lsls	r3, r3, #2
 8000af4:	fa01 f303 	lsl.w	r3, r1, r3
 8000af8:	4909      	ldr	r1, [pc, #36]	@ (8000b20 <Hal_GPIO_vSetupAlternateFunction+0x2b4>)
 8000afa:	4313      	orrs	r3, r2
 8000afc:	624b      	str	r3, [r1, #36]	@ 0x24
			break;
 8000afe:	e000      	b.n	8000b02 <Hal_GPIO_vSetupAlternateFunction+0x296>

		default:

			break;
 8000b00:	bf00      	nop
	}
}
 8000b02:	bf00      	nop
 8000b04:	370c      	adds	r7, #12
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	48000400 	.word	0x48000400
 8000b14:	48000800 	.word	0x48000800
 8000b18:	48000c00 	.word	0x48000c00
 8000b1c:	48001000 	.word	0x48001000
 8000b20:	48001400 	.word	0x48001400

08000b24 <Hal_I2C_vInitMaster>:
		{0xF8, 0x14, 0x12, 0x11, 0x11, 0x12, 0x14, 0xF8}
};

/* Configure the CR2 register for master transmission */
void Hal_I2C_vInitMaster(uint8_t address)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	71fb      	strb	r3, [r7, #7]
	I2C1->TIMINGR |= (0x1 < 28);		// PRESC
 8000b2e:	4b1f      	ldr	r3, [pc, #124]	@ (8000bac <Hal_I2C_vInitMaster+0x88>)
 8000b30:	691b      	ldr	r3, [r3, #16]
 8000b32:	4a1e      	ldr	r2, [pc, #120]	@ (8000bac <Hal_I2C_vInitMaster+0x88>)
 8000b34:	f043 0301 	orr.w	r3, r3, #1
 8000b38:	6113      	str	r3, [r2, #16]
	I2C1->TIMINGR |= (0x4 < 20);		// SCLDEL
 8000b3a:	4b1c      	ldr	r3, [pc, #112]	@ (8000bac <Hal_I2C_vInitMaster+0x88>)
 8000b3c:	691b      	ldr	r3, [r3, #16]
 8000b3e:	4a1b      	ldr	r2, [pc, #108]	@ (8000bac <Hal_I2C_vInitMaster+0x88>)
 8000b40:	f043 0301 	orr.w	r3, r3, #1
 8000b44:	6113      	str	r3, [r2, #16]
	I2C1->TIMINGR |= (0x2 < 26);		// SDADEL
 8000b46:	4b19      	ldr	r3, [pc, #100]	@ (8000bac <Hal_I2C_vInitMaster+0x88>)
 8000b48:	691b      	ldr	r3, [r3, #16]
 8000b4a:	4a18      	ldr	r2, [pc, #96]	@ (8000bac <Hal_I2C_vInitMaster+0x88>)
 8000b4c:	f043 0301 	orr.w	r3, r3, #1
 8000b50:	6113      	str	r3, [r2, #16]
	I2C1->TIMINGR |= (0xF < 8);			// SCLH
 8000b52:	4b16      	ldr	r3, [pc, #88]	@ (8000bac <Hal_I2C_vInitMaster+0x88>)
 8000b54:	4a15      	ldr	r2, [pc, #84]	@ (8000bac <Hal_I2C_vInitMaster+0x88>)
 8000b56:	691b      	ldr	r3, [r3, #16]
 8000b58:	6113      	str	r3, [r2, #16]
	I2C1->TIMINGR |= (0x13 < 0);		// SCLL
 8000b5a:	4b14      	ldr	r3, [pc, #80]	@ (8000bac <Hal_I2C_vInitMaster+0x88>)
 8000b5c:	4a13      	ldr	r2, [pc, #76]	@ (8000bac <Hal_I2C_vInitMaster+0x88>)
 8000b5e:	691b      	ldr	r3, [r3, #16]
 8000b60:	6113      	str	r3, [r2, #16]

	I2C1->CR2 |= (address << 1); // Set the slave address
 8000b62:	4b12      	ldr	r3, [pc, #72]	@ (8000bac <Hal_I2C_vInitMaster+0x88>)
 8000b64:	685a      	ldr	r2, [r3, #4]
 8000b66:	79fb      	ldrb	r3, [r7, #7]
 8000b68:	005b      	lsls	r3, r3, #1
 8000b6a:	4910      	ldr	r1, [pc, #64]	@ (8000bac <Hal_I2C_vInitMaster+0x88>)
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	604b      	str	r3, [r1, #4]
	I2C1->CR2 &= ~(1U << 10);	// Master request write transfer
 8000b70:	4b0e      	ldr	r3, [pc, #56]	@ (8000bac <Hal_I2C_vInitMaster+0x88>)
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	4a0d      	ldr	r2, [pc, #52]	@ (8000bac <Hal_I2C_vInitMaster+0x88>)
 8000b76:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000b7a:	6053      	str	r3, [r2, #4]
	I2C1->CR2 &= ~(1U << 11);	// 7bit addressing
 8000b7c:	4b0b      	ldr	r3, [pc, #44]	@ (8000bac <Hal_I2C_vInitMaster+0x88>)
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	4a0a      	ldr	r2, [pc, #40]	@ (8000bac <Hal_I2C_vInitMaster+0x88>)
 8000b82:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000b86:	6053      	str	r3, [r2, #4]
	I2C1->CR2 |= (8 << 16); 	// 8 bytes to send
 8000b88:	4b08      	ldr	r3, [pc, #32]	@ (8000bac <Hal_I2C_vInitMaster+0x88>)
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	4a07      	ldr	r2, [pc, #28]	@ (8000bac <Hal_I2C_vInitMaster+0x88>)
 8000b8e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000b92:	6053      	str	r3, [r2, #4]

	I2C1->CR1 |= (1U << 0);  // Enable peripheral
 8000b94:	4b05      	ldr	r3, [pc, #20]	@ (8000bac <Hal_I2C_vInitMaster+0x88>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a04      	ldr	r2, [pc, #16]	@ (8000bac <Hal_I2C_vInitMaster+0x88>)
 8000b9a:	f043 0301 	orr.w	r3, r3, #1
 8000b9e:	6013      	str	r3, [r2, #0]
}
 8000ba0:	bf00      	nop
 8000ba2:	370c      	adds	r7, #12
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr
 8000bac:	40005400 	.word	0x40005400

08000bb0 <Hal_I2C_vWriteCommand>:

void Hal_I2C_vWriteCommand(uint8_t addr, uint8_t cmd)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	460a      	mov	r2, r1
 8000bba:	71fb      	strb	r3, [r7, #7]
 8000bbc:	4613      	mov	r3, r2
 8000bbe:	71bb      	strb	r3, [r7, #6]
    // Clear previous settings
    I2C1->CR2 = 0;
 8000bc0:	4b1b      	ldr	r3, [pc, #108]	@ (8000c30 <Hal_I2C_vWriteCommand+0x80>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	605a      	str	r2, [r3, #4]

    // Set slave address (bits [7:1]) and number of bytes (bits [23:16])
    I2C1->CR2 = ((addr << 1) & 0xFE) | (2 << 16); // 2 bytes (control + data)
 8000bc6:	79fb      	ldrb	r3, [r7, #7]
 8000bc8:	005b      	lsls	r3, r3, #1
 8000bca:	b2db      	uxtb	r3, r3
 8000bcc:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000bd0:	4b17      	ldr	r3, [pc, #92]	@ (8000c30 <Hal_I2C_vWriteCommand+0x80>)
 8000bd2:	605a      	str	r2, [r3, #4]

    // Set START bit (bit 13)
    I2C1->CR2 |= (1U << 13);
 8000bd4:	4b16      	ldr	r3, [pc, #88]	@ (8000c30 <Hal_I2C_vWriteCommand+0x80>)
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	4a15      	ldr	r2, [pc, #84]	@ (8000c30 <Hal_I2C_vWriteCommand+0x80>)
 8000bda:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000bde:	6053      	str	r3, [r2, #4]

    // Wait until TXIS (bit 1 of ISR) is set — ready to transmit
    while (!(I2C1->ISR & (1U << 1)));
 8000be0:	bf00      	nop
 8000be2:	4b13      	ldr	r3, [pc, #76]	@ (8000c30 <Hal_I2C_vWriteCommand+0x80>)
 8000be4:	699b      	ldr	r3, [r3, #24]
 8000be6:	f003 0302 	and.w	r3, r3, #2
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d0f9      	beq.n	8000be2 <Hal_I2C_vWriteCommand+0x32>

    // Send control byte (0x00 = command)
    I2C1->TXDR = 0x00;
 8000bee:	4b10      	ldr	r3, [pc, #64]	@ (8000c30 <Hal_I2C_vWriteCommand+0x80>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	629a      	str	r2, [r3, #40]	@ 0x28

    // Wait for next TXIS
    while (!(I2C1->ISR & (1U << 1)));
 8000bf4:	bf00      	nop
 8000bf6:	4b0e      	ldr	r3, [pc, #56]	@ (8000c30 <Hal_I2C_vWriteCommand+0x80>)
 8000bf8:	699b      	ldr	r3, [r3, #24]
 8000bfa:	f003 0302 	and.w	r3, r3, #2
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d0f9      	beq.n	8000bf6 <Hal_I2C_vWriteCommand+0x46>

    // Send actual command byte
    I2C1->TXDR = cmd;
 8000c02:	4a0b      	ldr	r2, [pc, #44]	@ (8000c30 <Hal_I2C_vWriteCommand+0x80>)
 8000c04:	79bb      	ldrb	r3, [r7, #6]
 8000c06:	6293      	str	r3, [r2, #40]	@ 0x28

    // Wait until TC (bit 6 of ISR) = Transfer Complete
    while (!(I2C1->ISR & (1U << 6)));
 8000c08:	bf00      	nop
 8000c0a:	4b09      	ldr	r3, [pc, #36]	@ (8000c30 <Hal_I2C_vWriteCommand+0x80>)
 8000c0c:	699b      	ldr	r3, [r3, #24]
 8000c0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d0f9      	beq.n	8000c0a <Hal_I2C_vWriteCommand+0x5a>

    // Set STOP (bit 14 of CR2)
    I2C1->CR2 |= (1U << 14);
 8000c16:	4b06      	ldr	r3, [pc, #24]	@ (8000c30 <Hal_I2C_vWriteCommand+0x80>)
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	4a05      	ldr	r2, [pc, #20]	@ (8000c30 <Hal_I2C_vWriteCommand+0x80>)
 8000c1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c20:	6053      	str	r3, [r2, #4]
}
 8000c22:	bf00      	nop
 8000c24:	370c      	adds	r7, #12
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	40005400 	.word	0x40005400

08000c34 <SSD1306_vInit>:

void SSD1306_vInit(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
    Hal_I2C_vWriteCommand(OLED, 0xAE); // Display off
 8000c38:	21ae      	movs	r1, #174	@ 0xae
 8000c3a:	203c      	movs	r0, #60	@ 0x3c
 8000c3c:	f7ff ffb8 	bl	8000bb0 <Hal_I2C_vWriteCommand>
    Hal_I2C_vWriteCommand(OLED, 0xD5); Hal_I2C_vWriteCommand(OLED, 0x80); // Clock divide
 8000c40:	21d5      	movs	r1, #213	@ 0xd5
 8000c42:	203c      	movs	r0, #60	@ 0x3c
 8000c44:	f7ff ffb4 	bl	8000bb0 <Hal_I2C_vWriteCommand>
 8000c48:	2180      	movs	r1, #128	@ 0x80
 8000c4a:	203c      	movs	r0, #60	@ 0x3c
 8000c4c:	f7ff ffb0 	bl	8000bb0 <Hal_I2C_vWriteCommand>
    Hal_I2C_vWriteCommand(OLED, 0xA8); Hal_I2C_vWriteCommand(OLED, 0x1F); // Multiplex = 32
 8000c50:	21a8      	movs	r1, #168	@ 0xa8
 8000c52:	203c      	movs	r0, #60	@ 0x3c
 8000c54:	f7ff ffac 	bl	8000bb0 <Hal_I2C_vWriteCommand>
 8000c58:	211f      	movs	r1, #31
 8000c5a:	203c      	movs	r0, #60	@ 0x3c
 8000c5c:	f7ff ffa8 	bl	8000bb0 <Hal_I2C_vWriteCommand>
    Hal_I2C_vWriteCommand(OLED, 0xD3); Hal_I2C_vWriteCommand(OLED, 0x00); // Offset
 8000c60:	21d3      	movs	r1, #211	@ 0xd3
 8000c62:	203c      	movs	r0, #60	@ 0x3c
 8000c64:	f7ff ffa4 	bl	8000bb0 <Hal_I2C_vWriteCommand>
 8000c68:	2100      	movs	r1, #0
 8000c6a:	203c      	movs	r0, #60	@ 0x3c
 8000c6c:	f7ff ffa0 	bl	8000bb0 <Hal_I2C_vWriteCommand>
    Hal_I2C_vWriteCommand(OLED, 0x40); // Start line
 8000c70:	2140      	movs	r1, #64	@ 0x40
 8000c72:	203c      	movs	r0, #60	@ 0x3c
 8000c74:	f7ff ff9c 	bl	8000bb0 <Hal_I2C_vWriteCommand>
    Hal_I2C_vWriteCommand(OLED, 0x8D); Hal_I2C_vWriteCommand(OLED, 0x14); // Charge pump on
 8000c78:	218d      	movs	r1, #141	@ 0x8d
 8000c7a:	203c      	movs	r0, #60	@ 0x3c
 8000c7c:	f7ff ff98 	bl	8000bb0 <Hal_I2C_vWriteCommand>
 8000c80:	2114      	movs	r1, #20
 8000c82:	203c      	movs	r0, #60	@ 0x3c
 8000c84:	f7ff ff94 	bl	8000bb0 <Hal_I2C_vWriteCommand>
    Hal_I2C_vWriteCommand(OLED, 0x20); Hal_I2C_vWriteCommand(OLED, 0x00); // Horizontal addressing
 8000c88:	2120      	movs	r1, #32
 8000c8a:	203c      	movs	r0, #60	@ 0x3c
 8000c8c:	f7ff ff90 	bl	8000bb0 <Hal_I2C_vWriteCommand>
 8000c90:	2100      	movs	r1, #0
 8000c92:	203c      	movs	r0, #60	@ 0x3c
 8000c94:	f7ff ff8c 	bl	8000bb0 <Hal_I2C_vWriteCommand>
    Hal_I2C_vWriteCommand(OLED, 0xA1); // Segment remap
 8000c98:	21a1      	movs	r1, #161	@ 0xa1
 8000c9a:	203c      	movs	r0, #60	@ 0x3c
 8000c9c:	f7ff ff88 	bl	8000bb0 <Hal_I2C_vWriteCommand>
    Hal_I2C_vWriteCommand(OLED, 0xC8); // COM scan direction
 8000ca0:	21c8      	movs	r1, #200	@ 0xc8
 8000ca2:	203c      	movs	r0, #60	@ 0x3c
 8000ca4:	f7ff ff84 	bl	8000bb0 <Hal_I2C_vWriteCommand>
    Hal_I2C_vWriteCommand(OLED, 0xDA); Hal_I2C_vWriteCommand(OLED, 0x02); // COM config
 8000ca8:	21da      	movs	r1, #218	@ 0xda
 8000caa:	203c      	movs	r0, #60	@ 0x3c
 8000cac:	f7ff ff80 	bl	8000bb0 <Hal_I2C_vWriteCommand>
 8000cb0:	2102      	movs	r1, #2
 8000cb2:	203c      	movs	r0, #60	@ 0x3c
 8000cb4:	f7ff ff7c 	bl	8000bb0 <Hal_I2C_vWriteCommand>
    Hal_I2C_vWriteCommand(OLED, 0x81); Hal_I2C_vWriteCommand(OLED, 0x8F); // Contrast
 8000cb8:	2181      	movs	r1, #129	@ 0x81
 8000cba:	203c      	movs	r0, #60	@ 0x3c
 8000cbc:	f7ff ff78 	bl	8000bb0 <Hal_I2C_vWriteCommand>
 8000cc0:	218f      	movs	r1, #143	@ 0x8f
 8000cc2:	203c      	movs	r0, #60	@ 0x3c
 8000cc4:	f7ff ff74 	bl	8000bb0 <Hal_I2C_vWriteCommand>
    Hal_I2C_vWriteCommand(OLED, 0xD9); Hal_I2C_vWriteCommand(OLED, 0xF1); // Precharge
 8000cc8:	21d9      	movs	r1, #217	@ 0xd9
 8000cca:	203c      	movs	r0, #60	@ 0x3c
 8000ccc:	f7ff ff70 	bl	8000bb0 <Hal_I2C_vWriteCommand>
 8000cd0:	21f1      	movs	r1, #241	@ 0xf1
 8000cd2:	203c      	movs	r0, #60	@ 0x3c
 8000cd4:	f7ff ff6c 	bl	8000bb0 <Hal_I2C_vWriteCommand>
    Hal_I2C_vWriteCommand(OLED, 0xDB); Hal_I2C_vWriteCommand(OLED, 0x40); // VCOM detect
 8000cd8:	21db      	movs	r1, #219	@ 0xdb
 8000cda:	203c      	movs	r0, #60	@ 0x3c
 8000cdc:	f7ff ff68 	bl	8000bb0 <Hal_I2C_vWriteCommand>
 8000ce0:	2140      	movs	r1, #64	@ 0x40
 8000ce2:	203c      	movs	r0, #60	@ 0x3c
 8000ce4:	f7ff ff64 	bl	8000bb0 <Hal_I2C_vWriteCommand>
    Hal_I2C_vWriteCommand(OLED, 0xA4); // Resume RAM content
 8000ce8:	21a4      	movs	r1, #164	@ 0xa4
 8000cea:	203c      	movs	r0, #60	@ 0x3c
 8000cec:	f7ff ff60 	bl	8000bb0 <Hal_I2C_vWriteCommand>
    Hal_I2C_vWriteCommand(OLED, 0xA6); // Normal display
 8000cf0:	21a6      	movs	r1, #166	@ 0xa6
 8000cf2:	203c      	movs	r0, #60	@ 0x3c
 8000cf4:	f7ff ff5c 	bl	8000bb0 <Hal_I2C_vWriteCommand>
    Hal_I2C_vWriteCommand(OLED, 0xAF); // Display ON
 8000cf8:	21af      	movs	r1, #175	@ 0xaf
 8000cfa:	203c      	movs	r0, #60	@ 0x3c
 8000cfc:	f7ff ff58 	bl	8000bb0 <Hal_I2C_vWriteCommand>
}
 8000d00:	bf00      	nop
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <SSD1306_vWriteData>:

void SSD1306_vWriteData(uint8_t addr, uint8_t data)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	460a      	mov	r2, r1
 8000d0e:	71fb      	strb	r3, [r7, #7]
 8000d10:	4613      	mov	r3, r2
 8000d12:	71bb      	strb	r3, [r7, #6]
    // Clear previous transfer settings
    I2C1->CR2 = 0;
 8000d14:	4b1b      	ldr	r3, [pc, #108]	@ (8000d84 <SSD1306_vWriteData+0x80>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	605a      	str	r2, [r3, #4]

    // Set slave address and number of bytes to send (2 bytes: control + data)
    I2C1->CR2 = ((addr << 1) & 0xFE) | (2 << 16); // 7-bit address, write mode
 8000d1a:	79fb      	ldrb	r3, [r7, #7]
 8000d1c:	005b      	lsls	r3, r3, #1
 8000d1e:	b2db      	uxtb	r3, r3
 8000d20:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000d24:	4b17      	ldr	r3, [pc, #92]	@ (8000d84 <SSD1306_vWriteData+0x80>)
 8000d26:	605a      	str	r2, [r3, #4]

    // Start the transmission
    I2C1->CR2 |= (1U << 13); // START
 8000d28:	4b16      	ldr	r3, [pc, #88]	@ (8000d84 <SSD1306_vWriteData+0x80>)
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	4a15      	ldr	r2, [pc, #84]	@ (8000d84 <SSD1306_vWriteData+0x80>)
 8000d2e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000d32:	6053      	str	r3, [r2, #4]

    // Wait for TXIS (ready to transmit)
    while (!(I2C1->ISR & (1U << 1)));
 8000d34:	bf00      	nop
 8000d36:	4b13      	ldr	r3, [pc, #76]	@ (8000d84 <SSD1306_vWriteData+0x80>)
 8000d38:	699b      	ldr	r3, [r3, #24]
 8000d3a:	f003 0302 	and.w	r3, r3, #2
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d0f9      	beq.n	8000d36 <SSD1306_vWriteData+0x32>

    // Send control byte: 0x40 indicates "data" follows
    I2C1->TXDR = 0x40;
 8000d42:	4b10      	ldr	r3, [pc, #64]	@ (8000d84 <SSD1306_vWriteData+0x80>)
 8000d44:	2240      	movs	r2, #64	@ 0x40
 8000d46:	629a      	str	r2, [r3, #40]	@ 0x28

    // Wait for TXIS again
    while (!(I2C1->ISR & (1U << 1)));
 8000d48:	bf00      	nop
 8000d4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d84 <SSD1306_vWriteData+0x80>)
 8000d4c:	699b      	ldr	r3, [r3, #24]
 8000d4e:	f003 0302 	and.w	r3, r3, #2
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d0f9      	beq.n	8000d4a <SSD1306_vWriteData+0x46>

    // Send actual data byte
    I2C1->TXDR = data;
 8000d56:	4a0b      	ldr	r2, [pc, #44]	@ (8000d84 <SSD1306_vWriteData+0x80>)
 8000d58:	79bb      	ldrb	r3, [r7, #6]
 8000d5a:	6293      	str	r3, [r2, #40]	@ 0x28

    // Wait until transfer is complete
    while (!(I2C1->ISR & (1U << 6))); // TC
 8000d5c:	bf00      	nop
 8000d5e:	4b09      	ldr	r3, [pc, #36]	@ (8000d84 <SSD1306_vWriteData+0x80>)
 8000d60:	699b      	ldr	r3, [r3, #24]
 8000d62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d0f9      	beq.n	8000d5e <SSD1306_vWriteData+0x5a>

    // Send STOP condition
    I2C1->CR2 |= (1U << 14);
 8000d6a:	4b06      	ldr	r3, [pc, #24]	@ (8000d84 <SSD1306_vWriteData+0x80>)
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	4a05      	ldr	r2, [pc, #20]	@ (8000d84 <SSD1306_vWriteData+0x80>)
 8000d70:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d74:	6053      	str	r3, [r2, #4]
}
 8000d76:	bf00      	nop
 8000d78:	370c      	adds	r7, #12
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	40005400 	.word	0x40005400

08000d88 <SSD1306_vSendCommandBlock>:

void SSD1306_vSendCommandBlock(uint8_t page, uint8_t columnLow, uint8_t columnHigh)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	4603      	mov	r3, r0
 8000d90:	71fb      	strb	r3, [r7, #7]
 8000d92:	460b      	mov	r3, r1
 8000d94:	71bb      	strb	r3, [r7, #6]
 8000d96:	4613      	mov	r3, r2
 8000d98:	717b      	strb	r3, [r7, #5]
    Hal_I2C_vWriteCommand(OLED, 0xB0 | (page & 0x03));     // Page address
 8000d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9e:	f003 0303 	and.w	r3, r3, #3
 8000da2:	b25b      	sxtb	r3, r3
 8000da4:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 8000da8:	b25b      	sxtb	r3, r3
 8000daa:	b2db      	uxtb	r3, r3
 8000dac:	4619      	mov	r1, r3
 8000dae:	203c      	movs	r0, #60	@ 0x3c
 8000db0:	f7ff fefe 	bl	8000bb0 <Hal_I2C_vWriteCommand>
    Hal_I2C_vWriteCommand(OLED, 0x00 | (columnLow & 0x0F)); // Lower column
 8000db4:	79bb      	ldrb	r3, [r7, #6]
 8000db6:	f003 030f 	and.w	r3, r3, #15
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	203c      	movs	r0, #60	@ 0x3c
 8000dc0:	f7ff fef6 	bl	8000bb0 <Hal_I2C_vWriteCommand>
    Hal_I2C_vWriteCommand(OLED, 0x10 | (columnHigh & 0x0F)); // Upper column
 8000dc4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000dc8:	f003 030f 	and.w	r3, r3, #15
 8000dcc:	b25b      	sxtb	r3, r3
 8000dce:	f043 0310 	orr.w	r3, r3, #16
 8000dd2:	b25b      	sxtb	r3, r3
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	203c      	movs	r0, #60	@ 0x3c
 8000dda:	f7ff fee9 	bl	8000bb0 <Hal_I2C_vWriteCommand>
}
 8000dde:	bf00      	nop
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <SSD1306_vSendData>:

void SSD1306_vSendData(uint8_t data)
{
 8000de6:	b580      	push	{r7, lr}
 8000de8:	b082      	sub	sp, #8
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	4603      	mov	r3, r0
 8000dee:	71fb      	strb	r3, [r7, #7]
	// Send the data
	SSD1306_vWriteData(OLED, data);
 8000df0:	79fb      	ldrb	r3, [r7, #7]
 8000df2:	4619      	mov	r1, r3
 8000df4:	203c      	movs	r0, #60	@ 0x3c
 8000df6:	f7ff ff85 	bl	8000d04 <SSD1306_vWriteData>
}
 8000dfa:	bf00      	nop
 8000dfc:	3708      	adds	r7, #8
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}

08000e02 <SSD1306_vResetDisplay>:

void SSD1306_vResetDisplay(void)
{
 8000e02:	b580      	push	{r7, lr}
 8000e04:	b084      	sub	sp, #16
 8000e06:	af00      	add	r7, sp, #0
    for (int k = 0; k < 4; k++)
 8000e08:	2300      	movs	r3, #0
 8000e0a:	60fb      	str	r3, [r7, #12]
 8000e0c:	e020      	b.n	8000e50 <SSD1306_vResetDisplay+0x4e>
    {
        for (int i = 0; i<128; i++)
 8000e0e:	2300      	movs	r3, #0
 8000e10:	60bb      	str	r3, [r7, #8]
 8000e12:	e017      	b.n	8000e44 <SSD1306_vResetDisplay+0x42>
        {
        	uint8_t lower = (i & 0x0F);
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	f003 030f 	and.w	r3, r3, #15
 8000e1c:	71fb      	strb	r3, [r7, #7]
        	uint8_t upper = ((i >> 4) & 0x0F);
 8000e1e:	68bb      	ldr	r3, [r7, #8]
 8000e20:	111b      	asrs	r3, r3, #4
 8000e22:	b2db      	uxtb	r3, r3
 8000e24:	f003 030f 	and.w	r3, r3, #15
 8000e28:	71bb      	strb	r3, [r7, #6]
            SSD1306_vSendCommandBlock(k, lower, upper);
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	79ba      	ldrb	r2, [r7, #6]
 8000e30:	79f9      	ldrb	r1, [r7, #7]
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff ffa8 	bl	8000d88 <SSD1306_vSendCommandBlock>
            SSD1306_vSendData(0x00);
 8000e38:	2000      	movs	r0, #0
 8000e3a:	f7ff ffd4 	bl	8000de6 <SSD1306_vSendData>
        for (int i = 0; i<128; i++)
 8000e3e:	68bb      	ldr	r3, [r7, #8]
 8000e40:	3301      	adds	r3, #1
 8000e42:	60bb      	str	r3, [r7, #8]
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	2b7f      	cmp	r3, #127	@ 0x7f
 8000e48:	dde4      	ble.n	8000e14 <SSD1306_vResetDisplay+0x12>
    for (int k = 0; k < 4; k++)
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	2b03      	cmp	r3, #3
 8000e54:	dddb      	ble.n	8000e0e <SSD1306_vResetDisplay+0xc>
        }
    }
}
 8000e56:	bf00      	nop
 8000e58:	bf00      	nop
 8000e5a:	3710      	adds	r7, #16
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <Hal_SPI_vInitReceiver>:


#include "hal_spi.h"

void Hal_SPI_vInitReceiver(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
	SPI3->CR1 |= (1U << 0)	  // Second clock is first data capture and clock to 1 when idle
 8000e64:	4b17      	ldr	r3, [pc, #92]	@ (8000ec4 <Hal_SPI_vInitReceiver+0x64>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a16      	ldr	r2, [pc, #88]	@ (8000ec4 <Hal_SPI_vInitReceiver+0x64>)
 8000e6a:	f043 0303 	orr.w	r3, r3, #3
 8000e6e:	6013      	str	r3, [r2, #0]
			| (1U << 1);
	SPI3->CR1 &= ~(1U << 2);  // Clear MSTR bit → Set slave mode
 8000e70:	4b14      	ldr	r3, [pc, #80]	@ (8000ec4 <Hal_SPI_vInitReceiver+0x64>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a13      	ldr	r2, [pc, #76]	@ (8000ec4 <Hal_SPI_vInitReceiver+0x64>)
 8000e76:	f023 0304 	bic.w	r3, r3, #4
 8000e7a:	6013      	str	r3, [r2, #0]
	SPI3->CR1 &= ~(1U << 7);  // Use MSB first (standard)
 8000e7c:	4b11      	ldr	r3, [pc, #68]	@ (8000ec4 <Hal_SPI_vInitReceiver+0x64>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a10      	ldr	r2, [pc, #64]	@ (8000ec4 <Hal_SPI_vInitReceiver+0x64>)
 8000e82:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000e86:	6013      	str	r3, [r2, #0]
	SPI3->CR1 |= (1U << 11);  // Set 16-bit data
 8000e88:	4b0e      	ldr	r3, [pc, #56]	@ (8000ec4 <Hal_SPI_vInitReceiver+0x64>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a0d      	ldr	r2, [pc, #52]	@ (8000ec4 <Hal_SPI_vInitReceiver+0x64>)
 8000e8e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000e92:	6013      	str	r3, [r2, #0]

	SPI3->CR1 |= (1U << 8);  // SSM = 1
 8000e94:	4b0b      	ldr	r3, [pc, #44]	@ (8000ec4 <Hal_SPI_vInitReceiver+0x64>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a0a      	ldr	r2, [pc, #40]	@ (8000ec4 <Hal_SPI_vInitReceiver+0x64>)
 8000e9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e9e:	6013      	str	r3, [r2, #0]
	SPI3->CR1 |= (1U << 9);  // SSI = 1
 8000ea0:	4b08      	ldr	r3, [pc, #32]	@ (8000ec4 <Hal_SPI_vInitReceiver+0x64>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a07      	ldr	r2, [pc, #28]	@ (8000ec4 <Hal_SPI_vInitReceiver+0x64>)
 8000ea6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000eaa:	6013      	str	r3, [r2, #0]

    // Enable SPI
	SPI3->CR1 |= (1U << 6);  // SPE
 8000eac:	4b05      	ldr	r3, [pc, #20]	@ (8000ec4 <Hal_SPI_vInitReceiver+0x64>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a04      	ldr	r2, [pc, #16]	@ (8000ec4 <Hal_SPI_vInitReceiver+0x64>)
 8000eb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000eb6:	6013      	str	r3, [r2, #0]
}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	40003c00 	.word	0x40003c00

08000ec8 <Hal_SPI2_vInitReceiver>:
    return (uint8_t)SPI3->DR;
}


void Hal_SPI2_vInitReceiver(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
	SPI2->CR1 |= (1U << 0)	  // Second clock is first data capture and clock to 1 when idle
 8000ecc:	4b1a      	ldr	r3, [pc, #104]	@ (8000f38 <Hal_SPI2_vInitReceiver+0x70>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a19      	ldr	r2, [pc, #100]	@ (8000f38 <Hal_SPI2_vInitReceiver+0x70>)
 8000ed2:	f043 0303 	orr.w	r3, r3, #3
 8000ed6:	6013      	str	r3, [r2, #0]
			| (1U << 1);
	SPI2->CR1 &= ~(1U << 2);  // Clear MSTR bit → Set slave mode
 8000ed8:	4b17      	ldr	r3, [pc, #92]	@ (8000f38 <Hal_SPI2_vInitReceiver+0x70>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a16      	ldr	r2, [pc, #88]	@ (8000f38 <Hal_SPI2_vInitReceiver+0x70>)
 8000ede:	f023 0304 	bic.w	r3, r3, #4
 8000ee2:	6013      	str	r3, [r2, #0]
	SPI2->CR1 &= ~(1U << 7);  // Use MSB first (standard)
 8000ee4:	4b14      	ldr	r3, [pc, #80]	@ (8000f38 <Hal_SPI2_vInitReceiver+0x70>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a13      	ldr	r2, [pc, #76]	@ (8000f38 <Hal_SPI2_vInitReceiver+0x70>)
 8000eea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000eee:	6013      	str	r3, [r2, #0]
	SPI2->CR1 |= (1U << 11);  // Set 16-bit data
 8000ef0:	4b11      	ldr	r3, [pc, #68]	@ (8000f38 <Hal_SPI2_vInitReceiver+0x70>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a10      	ldr	r2, [pc, #64]	@ (8000f38 <Hal_SPI2_vInitReceiver+0x70>)
 8000ef6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000efa:	6013      	str	r3, [r2, #0]
	SPI2->CR1 &= ~(1U << 15);	// 2 line unidirectional mode
 8000efc:	4b0e      	ldr	r3, [pc, #56]	@ (8000f38 <Hal_SPI2_vInitReceiver+0x70>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a0d      	ldr	r2, [pc, #52]	@ (8000f38 <Hal_SPI2_vInitReceiver+0x70>)
 8000f02:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000f06:	6013      	str	r3, [r2, #0]
	SPI2->CR1 &= ~(1U << 10);   // RXONLY = 1 → Receive-only mode
 8000f08:	4b0b      	ldr	r3, [pc, #44]	@ (8000f38 <Hal_SPI2_vInitReceiver+0x70>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a0a      	ldr	r2, [pc, #40]	@ (8000f38 <Hal_SPI2_vInitReceiver+0x70>)
 8000f0e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000f12:	6013      	str	r3, [r2, #0]

	SPI2->CR1 &= ~(1U << 8);  // SSM = 0 → hardware NSS
 8000f14:	4b08      	ldr	r3, [pc, #32]	@ (8000f38 <Hal_SPI2_vInitReceiver+0x70>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a07      	ldr	r2, [pc, #28]	@ (8000f38 <Hal_SPI2_vInitReceiver+0x70>)
 8000f1a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000f1e:	6013      	str	r3, [r2, #0]

    // Enable SPI
	SPI2->CR1 |= (1U << 6);  // SPE
 8000f20:	4b05      	ldr	r3, [pc, #20]	@ (8000f38 <Hal_SPI2_vInitReceiver+0x70>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a04      	ldr	r2, [pc, #16]	@ (8000f38 <Hal_SPI2_vInitReceiver+0x70>)
 8000f26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f2a:	6013      	str	r3, [r2, #0]
}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	40003800 	.word	0x40003800

08000f3c <Hal_vSPI2_StartReceive>:


uint16_t Hal_vSPI2_StartReceive(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
    while (!(SPI2->SR & (1U << 0)));  // Wait for RXNE
 8000f40:	bf00      	nop
 8000f42:	4b07      	ldr	r3, [pc, #28]	@ (8000f60 <Hal_vSPI2_StartReceive+0x24>)
 8000f44:	689b      	ldr	r3, [r3, #8]
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d0f9      	beq.n	8000f42 <Hal_vSPI2_StartReceive+0x6>
    return (uint8_t)SPI2->DR;
 8000f4e:	4b04      	ldr	r3, [pc, #16]	@ (8000f60 <Hal_vSPI2_StartReceive+0x24>)
 8000f50:	68db      	ldr	r3, [r3, #12]
 8000f52:	b2db      	uxtb	r3, r3
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	40003800 	.word	0x40003800

08000f64 <Hal_SysTick_vInit>:

#include "hal_systick.h"


void Hal_SysTick_vInit(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
	STK_LOAD = RELOAD_VAL;
 8000f68:	4b07      	ldr	r3, [pc, #28]	@ (8000f88 <Hal_SysTick_vInit+0x24>)
 8000f6a:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8000f6e:	601a      	str	r2, [r3, #0]
	STK_VAL = 0;
 8000f70:	4b06      	ldr	r3, [pc, #24]	@ (8000f8c <Hal_SysTick_vInit+0x28>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	601a      	str	r2, [r3, #0]
	STK_CTRL = CTRL_ENABLE | CTRL_TICKINT | CTRL_CLKSRC;
 8000f76:	4b06      	ldr	r3, [pc, #24]	@ (8000f90 <Hal_SysTick_vInit+0x2c>)
 8000f78:	2207      	movs	r2, #7
 8000f7a:	601a      	str	r2, [r3, #0]
}
 8000f7c:	bf00      	nop
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	e000e014 	.word	0xe000e014
 8000f8c:	e000e018 	.word	0xe000e018
 8000f90:	e000e010 	.word	0xe000e010

08000f94 <Hal_ButtonInterrupt_vInit>:

void Hal_ButtonInterrupt_vInit(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
	// Configure SYSCFG
	SYSCFG->EXTICR4 &= ~(0xF << 4);
 8000f98:	4b13      	ldr	r3, [pc, #76]	@ (8000fe8 <Hal_ButtonInterrupt_vInit+0x54>)
 8000f9a:	695b      	ldr	r3, [r3, #20]
 8000f9c:	4a12      	ldr	r2, [pc, #72]	@ (8000fe8 <Hal_ButtonInterrupt_vInit+0x54>)
 8000f9e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000fa2:	6153      	str	r3, [r2, #20]
	SYSCFG->EXTICR4 |= (0x2 << 4);
 8000fa4:	4b10      	ldr	r3, [pc, #64]	@ (8000fe8 <Hal_ButtonInterrupt_vInit+0x54>)
 8000fa6:	695b      	ldr	r3, [r3, #20]
 8000fa8:	4a0f      	ldr	r2, [pc, #60]	@ (8000fe8 <Hal_ButtonInterrupt_vInit+0x54>)
 8000faa:	f043 0320 	orr.w	r3, r3, #32
 8000fae:	6153      	str	r3, [r2, #20]
	// Configure EXTI13 line
    EXTI->IMR  |=  (1U << 13);         // Unmask interrupt
 8000fb0:	4b0e      	ldr	r3, [pc, #56]	@ (8000fec <Hal_ButtonInterrupt_vInit+0x58>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a0d      	ldr	r2, [pc, #52]	@ (8000fec <Hal_ButtonInterrupt_vInit+0x58>)
 8000fb6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000fba:	6013      	str	r3, [r2, #0]
    EXTI->FTSR1 |=  (0U << 13);         // Falling edge trigger
 8000fbc:	4b0b      	ldr	r3, [pc, #44]	@ (8000fec <Hal_ButtonInterrupt_vInit+0x58>)
 8000fbe:	4a0b      	ldr	r2, [pc, #44]	@ (8000fec <Hal_ButtonInterrupt_vInit+0x58>)
 8000fc0:	68db      	ldr	r3, [r3, #12]
 8000fc2:	60d3      	str	r3, [r2, #12]
    EXTI->RTSR1 |= (1U << 13);         // (optional) Disable rising edge
 8000fc4:	4b09      	ldr	r3, [pc, #36]	@ (8000fec <Hal_ButtonInterrupt_vInit+0x58>)
 8000fc6:	689b      	ldr	r3, [r3, #8]
 8000fc8:	4a08      	ldr	r2, [pc, #32]	@ (8000fec <Hal_ButtonInterrupt_vInit+0x58>)
 8000fca:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000fce:	6093      	str	r3, [r2, #8]

	// Configure NVIC
    NVIC_ISER1 |= (1U << (8));  // Enable IRQ 40 (EXTI15_10)
 8000fd0:	4b07      	ldr	r3, [pc, #28]	@ (8000ff0 <Hal_ButtonInterrupt_vInit+0x5c>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a06      	ldr	r2, [pc, #24]	@ (8000ff0 <Hal_ButtonInterrupt_vInit+0x5c>)
 8000fd6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fda:	6013      	str	r3, [r2, #0]
}
 8000fdc:	bf00      	nop
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	40010000 	.word	0x40010000
 8000fec:	40010400 	.word	0x40010400
 8000ff0:	e000e104 	.word	0xe000e104

08000ff4 <Hal_USART3_vInit>:
/*
 * USART 3 Tx Init
 */

void Hal_USART3_vInit(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
	/* USART2 configuration */
	USART3->CR1 &= ~(1U << 0);      // UE = 0 (disable)
 8000ffa:	4b20      	ldr	r3, [pc, #128]	@ (800107c <Hal_USART3_vInit+0x88>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a1f      	ldr	r2, [pc, #124]	@ (800107c <Hal_USART3_vInit+0x88>)
 8001000:	f023 0301 	bic.w	r3, r3, #1
 8001004:	6013      	str	r3, [r2, #0]
    USART3->CR1 &= ~(1U << 12);     // M = 0 (8-bit)
 8001006:	4b1d      	ldr	r3, [pc, #116]	@ (800107c <Hal_USART3_vInit+0x88>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a1c      	ldr	r2, [pc, #112]	@ (800107c <Hal_USART3_vInit+0x88>)
 800100c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001010:	6013      	str	r3, [r2, #0]
    USART3->CR1 &= ~(1U << 10);     // PCE = 0 (no parity)
 8001012:	4b1a      	ldr	r3, [pc, #104]	@ (800107c <Hal_USART3_vInit+0x88>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a19      	ldr	r2, [pc, #100]	@ (800107c <Hal_USART3_vInit+0x88>)
 8001018:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800101c:	6013      	str	r3, [r2, #0]
    USART3->CR2 &= ~(3U << 12);     // STOP[1:0] = 00 (1 stop bit)
 800101e:	4b17      	ldr	r3, [pc, #92]	@ (800107c <Hal_USART3_vInit+0x88>)
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	4a16      	ldr	r2, [pc, #88]	@ (800107c <Hal_USART3_vInit+0x88>)
 8001024:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001028:	6053      	str	r3, [r2, #4]
    // Baud = 115200 @ PCLK2 = 16 MHz
    uint32_t u32PeriphClock = 8000000;
 800102a:	4b15      	ldr	r3, [pc, #84]	@ (8001080 <Hal_USART3_vInit+0x8c>)
 800102c:	60fb      	str	r3, [r7, #12]
    uint32_t u32BaudRate = 115200;
 800102e:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8001032:	60bb      	str	r3, [r7, #8]
    uint16_t brr = (u32PeriphClock + (u32BaudRate/2))/u32BaudRate;
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	085a      	lsrs	r2, r3, #1
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	441a      	add	r2, r3
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001042:	80fb      	strh	r3, [r7, #6]
    USART3->BRR = brr;
 8001044:	4a0d      	ldr	r2, [pc, #52]	@ (800107c <Hal_USART3_vInit+0x88>)
 8001046:	88fb      	ldrh	r3, [r7, #6]
 8001048:	60d3      	str	r3, [r2, #12]

    // Enable DMA for transmit (DMAT)
    USART3->CR3 |= (1U << 7);
 800104a:	4b0c      	ldr	r3, [pc, #48]	@ (800107c <Hal_USART3_vInit+0x88>)
 800104c:	689b      	ldr	r3, [r3, #8]
 800104e:	4a0b      	ldr	r2, [pc, #44]	@ (800107c <Hal_USART3_vInit+0x88>)
 8001050:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001054:	6093      	str	r3, [r2, #8]

    /* Transfer direction */
	USART3->CR1 |= (1U<<3);
 8001056:	4b09      	ldr	r3, [pc, #36]	@ (800107c <Hal_USART3_vInit+0x88>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4a08      	ldr	r2, [pc, #32]	@ (800107c <Hal_USART3_vInit+0x88>)
 800105c:	f043 0308 	orr.w	r3, r3, #8
 8001060:	6013      	str	r3, [r2, #0]

    /* Enable the module */
    USART3->CR1 |= (1U << 0);   // UE = 1
 8001062:	4b06      	ldr	r3, [pc, #24]	@ (800107c <Hal_USART3_vInit+0x88>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a05      	ldr	r2, [pc, #20]	@ (800107c <Hal_USART3_vInit+0x88>)
 8001068:	f043 0301 	orr.w	r3, r3, #1
 800106c:	6013      	str	r3, [r2, #0]
}
 800106e:	bf00      	nop
 8001070:	3714      	adds	r7, #20
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	40004800 	.word	0x40004800
 8001080:	007a1200 	.word	0x007a1200

08001084 <Hal_USART3_vWriteFunction>:


void Hal_USART3_vWriteFunction(int ch)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
	/* Transmit register must be empty */
	while (!(USART3->ISR & 0x80)){} // bit 7 = TXE
 800108c:	bf00      	nop
 800108e:	4b08      	ldr	r3, [pc, #32]	@ (80010b0 <Hal_USART3_vWriteFunction+0x2c>)
 8001090:	69db      	ldr	r3, [r3, #28]
 8001092:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001096:	2b00      	cmp	r3, #0
 8001098:	d0f9      	beq.n	800108e <Hal_USART3_vWriteFunction+0xa>
	/* Write to transmit register */
	USART3->TDR = (ch & 0xFF);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a04      	ldr	r2, [pc, #16]	@ (80010b0 <Hal_USART3_vWriteFunction+0x2c>)
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80010a2:	bf00      	nop
 80010a4:	370c      	adds	r7, #12
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	40004800 	.word	0x40004800

080010b4 <Hal_USART3_WaitForTxReady>:

void Hal_USART3_WaitForTxReady(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
	/* Transmit register must be empty */
	while (!(USART3->ISR & 0x80)){}
 80010b8:	bf00      	nop
 80010ba:	4b06      	ldr	r3, [pc, #24]	@ (80010d4 <Hal_USART3_WaitForTxReady+0x20>)
 80010bc:	69db      	ldr	r3, [r3, #28]
 80010be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d0f9      	beq.n	80010ba <Hal_USART3_WaitForTxReady+0x6>
}
 80010c6:	bf00      	nop
 80010c8:	bf00      	nop
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	40004800 	.word	0x40004800

080010d8 <SendADCtoSlaveUSART>:
#include "../Inc/hal_i2c.h"
#include "../Inc/hal_uart.h"


void SendADCtoSlaveUSART(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
	/* 1) Read out ADC data */
	uint16_t adcData = Hal_ADC_u16ReadChannel();
 80010de:	f7ff fa0e 	bl	80004fe <Hal_ADC_u16ReadChannel>
 80010e2:	4603      	mov	r3, r0
 80010e4:	80fb      	strh	r3, [r7, #6]

	/* 2) Check, that data is valid */
	if (adcData != 0)
 80010e6:	88fb      	ldrh	r3, [r7, #6]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d019      	beq.n	8001120 <SendADCtoSlaveUSART+0x48>
	{
		/* 3) Start USART */
		Hal_USART3_vWriteFunction((uint8_t)(adcData >> 8));	// Send the upper bits first
 80010ec:	88fb      	ldrh	r3, [r7, #6]
 80010ee:	0a1b      	lsrs	r3, r3, #8
 80010f0:	b29b      	uxth	r3, r3
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff ffc5 	bl	8001084 <Hal_USART3_vWriteFunction>
		Hal_USART3_WaitForTxReady();
 80010fa:	f7ff ffdb 	bl	80010b4 <Hal_USART3_WaitForTxReady>
		Hal_USART3_vWriteFunction((uint8_t)(adcData));	// Send the lower bits last
 80010fe:	88fb      	ldrh	r3, [r7, #6]
 8001100:	b2db      	uxtb	r3, r3
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff ffbe 	bl	8001084 <Hal_USART3_vWriteFunction>

		/* 4) Display the number on the OLED */
		SSD1306_vSendData((uint8_t)(adcData >> 8));
 8001108:	88fb      	ldrh	r3, [r7, #6]
 800110a:	0a1b      	lsrs	r3, r3, #8
 800110c:	b29b      	uxth	r3, r3
 800110e:	b2db      	uxtb	r3, r3
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff fe68 	bl	8000de6 <SSD1306_vSendData>
		SSD1306_vSendData((uint8_t)adcData);
 8001116:	88fb      	ldrh	r3, [r7, #6]
 8001118:	b2db      	uxtb	r3, r3
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff fe63 	bl	8000de6 <SSD1306_vSendData>
	}
}
 8001120:	bf00      	nop
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}

08001128 <SysTick_Handler>:
 * Interrupt Handlers
 *********************************************************************************************************************************/

// SysTick interrupt
void SysTick_Handler(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
	volatile uint16_t dataSPI = Hal_vSPI2_StartReceive();
 800112e:	f7ff ff05 	bl	8000f3c <Hal_vSPI2_StartReceive>
 8001132:	4603      	mov	r3, r0
 8001134:	80fb      	strh	r3, [r7, #6]
	if ( dataSPI != 0)
 8001136:	88fb      	ldrh	r3, [r7, #6]
 8001138:	b29b      	uxth	r3, r3
 800113a:	2b00      	cmp	r3, #0
 800113c:	d003      	beq.n	8001146 <SysTick_Handler+0x1e>
	{
		Hal_GPIO_vOutputEnable(5, GPIO_A);
 800113e:	2100      	movs	r1, #0
 8001140:	2005      	movs	r0, #5
 8001142:	f7ff fb41 	bl	80007c8 <Hal_GPIO_vOutputEnable>
	}
	SendADCtoSlaveUSART();
 8001146:	f7ff ffc7 	bl	80010d8 <SendADCtoSlaveUSART>
//	Hal_vEnableDMAChannel2();
//	Hal_vEnableDMAChannel3();
}
 800114a:	bf00      	nop
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <PendSV_Handler>:

void PendSV_Handler()
{
 8001152:	b480      	push	{r7}
 8001154:	af00      	add	r7, sp, #0

}
 8001156:	bf00      	nop
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <EXTI15_10_IRQHandler>:

// Button interrupt
void EXTI15_10_IRQHandler(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
    if (EXTI->PR1 & (1U << 13))  // Check if EXTI13 triggered
 8001164:	4b07      	ldr	r3, [pc, #28]	@ (8001184 <EXTI15_10_IRQHandler+0x24>)
 8001166:	695b      	ldr	r3, [r3, #20]
 8001168:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800116c:	2b00      	cmp	r3, #0
 800116e:	d007      	beq.n	8001180 <EXTI15_10_IRQHandler+0x20>
    {
        EXTI->PR1 |= (1U << 13);  // Clear pending bit by writing 1
 8001170:	4b04      	ldr	r3, [pc, #16]	@ (8001184 <EXTI15_10_IRQHandler+0x24>)
 8001172:	695b      	ldr	r3, [r3, #20]
 8001174:	4a03      	ldr	r2, [pc, #12]	@ (8001184 <EXTI15_10_IRQHandler+0x24>)
 8001176:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800117a:	6153      	str	r3, [r2, #20]
//        Hal_DMA1_vCorruptData();
    	SendADCtoSlaveUSART();
 800117c:	f7ff ffac 	bl	80010d8 <SendADCtoSlaveUSART>
//        Hal_GPIO_vOutputToggle(5, GPIO_A);  // Your action
    }
}
 8001180:	bf00      	nop
 8001182:	bd80      	pop	{r7, pc}
 8001184:	40010400 	.word	0x40010400

08001188 <main>:
/*********************************************************************************************************************************
 * Main Function
 *********************************************************************************************************************************/

int main(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
	/* Activate all clocks which are needed */
	ClockDriver_vClockSelect();
 800118c:	f7ff f8c4 	bl	8000318 <ClockDriver_vClockSelect>

	// Activate all GPIOs needed
	Main_vSetupGPIOs();
 8001190:	f000 f818 	bl	80011c4 <Main_vSetupGPIOs>
	 * 	- I2C1
	 * 	- ADC1
	 ***************************************************/

	// USART3 Init
	Hal_USART3_vInit();
 8001194:	f7ff ff2e 	bl	8000ff4 <Hal_USART3_vInit>

    // ADC1 Init
    Hal_ADC_vInit();
 8001198:	f7ff f8f2 	bl	8000380 <Hal_ADC_vInit>
	// DMA1 Init
//	Hal_DMA_1_vInitChannel2();
//	Hal_DMA_1_vInitChannel3();

	// I2C Init
    Hal_I2C_vInitMaster(OLED);
 800119c:	203c      	movs	r0, #60	@ 0x3c
 800119e:	f7ff fcc1 	bl	8000b24 <Hal_I2C_vInitMaster>

    // SPI Receiver Init
    Hal_SPI_vInitReceiver();
 80011a2:	f7ff fe5d 	bl	8000e60 <Hal_SPI_vInitReceiver>
    Hal_SPI2_vInitReceiver();
 80011a6:	f7ff fe8f 	bl	8000ec8 <Hal_SPI2_vInitReceiver>

    // OLED SSD Init
    SSD1306_vInit();
 80011aa:	f7ff fd43 	bl	8000c34 <SSD1306_vInit>
	/***************************************************
	 * Initial functions
	 ***************************************************/

    // Reset Display
    SSD1306_vResetDisplay();
 80011ae:	f7ff fe28 	bl	8000e02 <SSD1306_vResetDisplay>

    // Start ADC1
    Hal_ADC_vStart();
 80011b2:	f7ff f995 	bl	80004e0 <Hal_ADC_vStart>
	/***************************************************
	 * Activate the interrupts (system and peripherals)
	 ***************************************************/

    // Enable Button interrupt
    Hal_ButtonInterrupt_vInit();
 80011b6:	f7ff feed 	bl	8000f94 <Hal_ButtonInterrupt_vInit>

    // Enable SysTick interrupt
	Hal_SysTick_vInit();
 80011ba:	f7ff fed3 	bl	8000f64 <Hal_SysTick_vInit>


    while(1)
 80011be:	bf00      	nop
 80011c0:	e7fd      	b.n	80011be <main+0x36>
	...

080011c4 <Main_vSetupGPIOs>:
/*********************************************************************************************************************************
 * Main Functions
 *********************************************************************************************************************************/

void Main_vSetupGPIOs(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af02      	add	r7, sp, #8
	// Activate button at PC13
	Config_vSetupGPIO(13, GPIO_INPUT, GPIO_PUSHPULL, GPIO_PULLUP, GPIO_C);
 80011ca:	2302      	movs	r3, #2
 80011cc:	9300      	str	r3, [sp, #0]
 80011ce:	2301      	movs	r3, #1
 80011d0:	2200      	movs	r2, #0
 80011d2:	2100      	movs	r1, #0
 80011d4:	200d      	movs	r0, #13
 80011d6:	f7ff fb1f 	bl	8000818 <Config_vSetupGPIO>

	// Set LED at GPIOA on Pin5 to output
	Config_vSetupGPIO(5, GPIO_OUTPUT, GPIO_PUSHPULL, GPIO_PULLUP, GPIO_A);
 80011da:	2300      	movs	r3, #0
 80011dc:	9300      	str	r3, [sp, #0]
 80011de:	2301      	movs	r3, #1
 80011e0:	2200      	movs	r2, #0
 80011e2:	2101      	movs	r1, #1
 80011e4:	2005      	movs	r0, #5
 80011e6:	f7ff fb17 	bl	8000818 <Config_vSetupGPIO>

	// Activate PB9 for USART3 Tx
//	Config_vSetupGPIO(9, GPIO_AF, GPIO_PUSHPULL, GPIO_PULLUP, GPIO_B);
//	Hal_GPIO_vSetupAlternateFunction(9, 7, GPIO_B);
	GPIOB->MODER &= ~(3U << 18);
 80011ea:	4b80      	ldr	r3, [pc, #512]	@ (80013ec <Main_vSetupGPIOs+0x228>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a7f      	ldr	r2, [pc, #508]	@ (80013ec <Main_vSetupGPIOs+0x228>)
 80011f0:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 80011f4:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1U << 19);
 80011f6:	4b7d      	ldr	r3, [pc, #500]	@ (80013ec <Main_vSetupGPIOs+0x228>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80011fe:	4b7b      	ldr	r3, [pc, #492]	@ (80013ec <Main_vSetupGPIOs+0x228>)
 8001200:	601a      	str	r2, [r3, #0]
	GPIOB->OTYPER &= ~(1U << 9);
 8001202:	4b7a      	ldr	r3, [pc, #488]	@ (80013ec <Main_vSetupGPIOs+0x228>)
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	4a79      	ldr	r2, [pc, #484]	@ (80013ec <Main_vSetupGPIOs+0x228>)
 8001208:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800120c:	6053      	str	r3, [r2, #4]
	GPIOB->PUPDR &= ~(3U << 18);
 800120e:	4b77      	ldr	r3, [pc, #476]	@ (80013ec <Main_vSetupGPIOs+0x228>)
 8001210:	68db      	ldr	r3, [r3, #12]
 8001212:	4a76      	ldr	r2, [pc, #472]	@ (80013ec <Main_vSetupGPIOs+0x228>)
 8001214:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 8001218:	60d3      	str	r3, [r2, #12]
	GPIOB->OSPEEDR &= ~(3U << 18);
 800121a:	4b74      	ldr	r3, [pc, #464]	@ (80013ec <Main_vSetupGPIOs+0x228>)
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	4a73      	ldr	r2, [pc, #460]	@ (80013ec <Main_vSetupGPIOs+0x228>)
 8001220:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 8001224:	6093      	str	r3, [r2, #8]
    GPIOB->AFRH &= ~(0xF << 4);  // Clear AFR for PB9
 8001226:	4b71      	ldr	r3, [pc, #452]	@ (80013ec <Main_vSetupGPIOs+0x228>)
 8001228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800122a:	4a70      	ldr	r2, [pc, #448]	@ (80013ec <Main_vSetupGPIOs+0x228>)
 800122c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001230:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOB->AFRH |=  (0x7 << 4);  // AF7 = USART3
 8001232:	4b6e      	ldr	r3, [pc, #440]	@ (80013ec <Main_vSetupGPIOs+0x228>)
 8001234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001236:	4a6d      	ldr	r2, [pc, #436]	@ (80013ec <Main_vSetupGPIOs+0x228>)
 8001238:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 800123c:	6253      	str	r3, [r2, #36]	@ 0x24

	/* Using PB6 SCL and PB7 SDA, because the other ones interfere with debug */
	Config_vSetupGPIO(6, GPIO_AF, GPIO_PUSHPULL, GPIO_PULLUP, GPIO_B);
 800123e:	2301      	movs	r3, #1
 8001240:	9300      	str	r3, [sp, #0]
 8001242:	2301      	movs	r3, #1
 8001244:	2200      	movs	r2, #0
 8001246:	2102      	movs	r1, #2
 8001248:	2006      	movs	r0, #6
 800124a:	f7ff fae5 	bl	8000818 <Config_vSetupGPIO>
	Hal_GPIO_vSetupAlternateFunction(6, 4, GPIO_B);
 800124e:	2201      	movs	r2, #1
 8001250:	2104      	movs	r1, #4
 8001252:	2006      	movs	r0, #6
 8001254:	f7ff fb0a 	bl	800086c <Hal_GPIO_vSetupAlternateFunction>

	Config_vSetupGPIO(7, GPIO_AF, GPIO_PUSHPULL, GPIO_PULLUP, GPIO_B);
 8001258:	2301      	movs	r3, #1
 800125a:	9300      	str	r3, [sp, #0]
 800125c:	2301      	movs	r3, #1
 800125e:	2200      	movs	r2, #0
 8001260:	2102      	movs	r1, #2
 8001262:	2007      	movs	r0, #7
 8001264:	f7ff fad8 	bl	8000818 <Config_vSetupGPIO>
	Hal_GPIO_vSetupAlternateFunction(7, 4, GPIO_B);
 8001268:	2201      	movs	r2, #1
 800126a:	2104      	movs	r1, #4
 800126c:	2007      	movs	r0, #7
 800126e:	f7ff fafd 	bl	800086c <Hal_GPIO_vSetupAlternateFunction>

    // Activate PA0 for the ADC as Analog input
	Config_vSetupGPIO(0, GPIO_ANALOG, GPIO_PUSHPULL, GPIO_NON, GPIO_A);
 8001272:	2300      	movs	r3, #0
 8001274:	9300      	str	r3, [sp, #0]
 8001276:	2300      	movs	r3, #0
 8001278:	2200      	movs	r2, #0
 800127a:	2103      	movs	r1, #3
 800127c:	2000      	movs	r0, #0
 800127e:	f7ff facb 	bl	8000818 <Config_vSetupGPIO>

	// PB3 SPI3 SCLK, PB4 SPI3 MISO, PB5 SPI3 MOSI -> AF5
	GPIOB->MODER &= ~(3U << 10);
 8001282:	4b5a      	ldr	r3, [pc, #360]	@ (80013ec <Main_vSetupGPIOs+0x228>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a59      	ldr	r2, [pc, #356]	@ (80013ec <Main_vSetupGPIOs+0x228>)
 8001288:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800128c:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1U << 11);
 800128e:	4b57      	ldr	r3, [pc, #348]	@ (80013ec <Main_vSetupGPIOs+0x228>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8001296:	4b55      	ldr	r3, [pc, #340]	@ (80013ec <Main_vSetupGPIOs+0x228>)
 8001298:	601a      	str	r2, [r3, #0]
	GPIOB->OTYPER &= ~(1U << 5);
 800129a:	4b54      	ldr	r3, [pc, #336]	@ (80013ec <Main_vSetupGPIOs+0x228>)
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	4a53      	ldr	r2, [pc, #332]	@ (80013ec <Main_vSetupGPIOs+0x228>)
 80012a0:	f023 0320 	bic.w	r3, r3, #32
 80012a4:	6053      	str	r3, [r2, #4]
	GPIOB->PUPDR &= ~(3U << 10);
 80012a6:	4b51      	ldr	r3, [pc, #324]	@ (80013ec <Main_vSetupGPIOs+0x228>)
 80012a8:	68db      	ldr	r3, [r3, #12]
 80012aa:	4a50      	ldr	r2, [pc, #320]	@ (80013ec <Main_vSetupGPIOs+0x228>)
 80012ac:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80012b0:	60d3      	str	r3, [r2, #12]
	GPIOB->OSPEEDR &= ~(3U << 10);
 80012b2:	4b4e      	ldr	r3, [pc, #312]	@ (80013ec <Main_vSetupGPIOs+0x228>)
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	4a4d      	ldr	r2, [pc, #308]	@ (80013ec <Main_vSetupGPIOs+0x228>)
 80012b8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80012bc:	6093      	str	r3, [r2, #8]
    GPIOB->AFRL &= ~(0xF << 20);
 80012be:	4b4b      	ldr	r3, [pc, #300]	@ (80013ec <Main_vSetupGPIOs+0x228>)
 80012c0:	6a1b      	ldr	r3, [r3, #32]
 80012c2:	4a4a      	ldr	r2, [pc, #296]	@ (80013ec <Main_vSetupGPIOs+0x228>)
 80012c4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80012c8:	6213      	str	r3, [r2, #32]
    GPIOB->AFRL |=  (0x6 << 20);  // AF6 = SPI3
 80012ca:	4b48      	ldr	r3, [pc, #288]	@ (80013ec <Main_vSetupGPIOs+0x228>)
 80012cc:	6a1b      	ldr	r3, [r3, #32]
 80012ce:	4a47      	ldr	r2, [pc, #284]	@ (80013ec <Main_vSetupGPIOs+0x228>)
 80012d0:	f443 03c0 	orr.w	r3, r3, #6291456	@ 0x600000
 80012d4:	6213      	str	r3, [r2, #32]

	GPIOB->MODER &= ~(3U << 8);
 80012d6:	4b45      	ldr	r3, [pc, #276]	@ (80013ec <Main_vSetupGPIOs+0x228>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a44      	ldr	r2, [pc, #272]	@ (80013ec <Main_vSetupGPIOs+0x228>)
 80012dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80012e0:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1U << 9);
 80012e2:	4b42      	ldr	r3, [pc, #264]	@ (80013ec <Main_vSetupGPIOs+0x228>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80012ea:	4b40      	ldr	r3, [pc, #256]	@ (80013ec <Main_vSetupGPIOs+0x228>)
 80012ec:	601a      	str	r2, [r3, #0]
	GPIOB->OTYPER &= ~(1U << 4);
 80012ee:	4b3f      	ldr	r3, [pc, #252]	@ (80013ec <Main_vSetupGPIOs+0x228>)
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	4a3e      	ldr	r2, [pc, #248]	@ (80013ec <Main_vSetupGPIOs+0x228>)
 80012f4:	f023 0310 	bic.w	r3, r3, #16
 80012f8:	6053      	str	r3, [r2, #4]
	GPIOB->PUPDR &= ~(3U << 8);
 80012fa:	4b3c      	ldr	r3, [pc, #240]	@ (80013ec <Main_vSetupGPIOs+0x228>)
 80012fc:	68db      	ldr	r3, [r3, #12]
 80012fe:	4a3b      	ldr	r2, [pc, #236]	@ (80013ec <Main_vSetupGPIOs+0x228>)
 8001300:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001304:	60d3      	str	r3, [r2, #12]
	GPIOB->OSPEEDR &= ~(3U << 8);
 8001306:	4b39      	ldr	r3, [pc, #228]	@ (80013ec <Main_vSetupGPIOs+0x228>)
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	4a38      	ldr	r2, [pc, #224]	@ (80013ec <Main_vSetupGPIOs+0x228>)
 800130c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001310:	6093      	str	r3, [r2, #8]
    GPIOB->AFRL &= ~(0xF << 16);
 8001312:	4b36      	ldr	r3, [pc, #216]	@ (80013ec <Main_vSetupGPIOs+0x228>)
 8001314:	6a1b      	ldr	r3, [r3, #32]
 8001316:	4a35      	ldr	r2, [pc, #212]	@ (80013ec <Main_vSetupGPIOs+0x228>)
 8001318:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 800131c:	6213      	str	r3, [r2, #32]
    GPIOB->AFRL |=  (0x6 << 16);  // AF6 = SPI3
 800131e:	4b33      	ldr	r3, [pc, #204]	@ (80013ec <Main_vSetupGPIOs+0x228>)
 8001320:	6a1b      	ldr	r3, [r3, #32]
 8001322:	4a32      	ldr	r2, [pc, #200]	@ (80013ec <Main_vSetupGPIOs+0x228>)
 8001324:	f443 23c0 	orr.w	r3, r3, #393216	@ 0x60000
 8001328:	6213      	str	r3, [r2, #32]

    /* PB3 - SCLK */
	GPIOB->MODER &= ~(3U << 6);
 800132a:	4b30      	ldr	r3, [pc, #192]	@ (80013ec <Main_vSetupGPIOs+0x228>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a2f      	ldr	r2, [pc, #188]	@ (80013ec <Main_vSetupGPIOs+0x228>)
 8001330:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8001334:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1U << 7);
 8001336:	4b2d      	ldr	r3, [pc, #180]	@ (80013ec <Main_vSetupGPIOs+0x228>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800133e:	4b2b      	ldr	r3, [pc, #172]	@ (80013ec <Main_vSetupGPIOs+0x228>)
 8001340:	601a      	str	r2, [r3, #0]
	GPIOB->OTYPER &= ~(1U << 3);
 8001342:	4b2a      	ldr	r3, [pc, #168]	@ (80013ec <Main_vSetupGPIOs+0x228>)
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	4a29      	ldr	r2, [pc, #164]	@ (80013ec <Main_vSetupGPIOs+0x228>)
 8001348:	f023 0308 	bic.w	r3, r3, #8
 800134c:	6053      	str	r3, [r2, #4]
	GPIOB->PUPDR &= ~(3U << 6);
 800134e:	4b27      	ldr	r3, [pc, #156]	@ (80013ec <Main_vSetupGPIOs+0x228>)
 8001350:	68db      	ldr	r3, [r3, #12]
 8001352:	4a26      	ldr	r2, [pc, #152]	@ (80013ec <Main_vSetupGPIOs+0x228>)
 8001354:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8001358:	60d3      	str	r3, [r2, #12]
	GPIOB->OSPEEDR &= ~(3U << 6);
 800135a:	4b24      	ldr	r3, [pc, #144]	@ (80013ec <Main_vSetupGPIOs+0x228>)
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	4a23      	ldr	r2, [pc, #140]	@ (80013ec <Main_vSetupGPIOs+0x228>)
 8001360:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8001364:	6093      	str	r3, [r2, #8]
    GPIOB->AFRL &= ~(0xF << 12);
 8001366:	4b21      	ldr	r3, [pc, #132]	@ (80013ec <Main_vSetupGPIOs+0x228>)
 8001368:	6a1b      	ldr	r3, [r3, #32]
 800136a:	4a20      	ldr	r2, [pc, #128]	@ (80013ec <Main_vSetupGPIOs+0x228>)
 800136c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8001370:	6213      	str	r3, [r2, #32]
    GPIOB->AFRL |=  (0x6 << 12);  // AF6 = SPI3
 8001372:	4b1e      	ldr	r3, [pc, #120]	@ (80013ec <Main_vSetupGPIOs+0x228>)
 8001374:	6a1b      	ldr	r3, [r3, #32]
 8001376:	4a1d      	ldr	r2, [pc, #116]	@ (80013ec <Main_vSetupGPIOs+0x228>)
 8001378:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 800137c:	6213      	str	r3, [r2, #32]

    /*
     * For SPI receiving using SPI2: CLK = PB13, MISO = PB14, MOSI = PB15, SSEL/CS = PB12
     */
	Config_vSetupGPIO(12, GPIO_AF, GPIO_PUSHPULL, GPIO_PULLUP, GPIO_B);
 800137e:	2301      	movs	r3, #1
 8001380:	9300      	str	r3, [sp, #0]
 8001382:	2301      	movs	r3, #1
 8001384:	2200      	movs	r2, #0
 8001386:	2102      	movs	r1, #2
 8001388:	200c      	movs	r0, #12
 800138a:	f7ff fa45 	bl	8000818 <Config_vSetupGPIO>
	Hal_GPIO_vSetupAlternateFunction(12, 5, GPIO_B);
 800138e:	2201      	movs	r2, #1
 8001390:	2105      	movs	r1, #5
 8001392:	200c      	movs	r0, #12
 8001394:	f7ff fa6a 	bl	800086c <Hal_GPIO_vSetupAlternateFunction>
	Config_vSetupGPIO(13, GPIO_AF, GPIO_PUSHPULL, GPIO_PULLUP, GPIO_B);
 8001398:	2301      	movs	r3, #1
 800139a:	9300      	str	r3, [sp, #0]
 800139c:	2301      	movs	r3, #1
 800139e:	2200      	movs	r2, #0
 80013a0:	2102      	movs	r1, #2
 80013a2:	200d      	movs	r0, #13
 80013a4:	f7ff fa38 	bl	8000818 <Config_vSetupGPIO>
	Hal_GPIO_vSetupAlternateFunction(13, 5, GPIO_B);
 80013a8:	2201      	movs	r2, #1
 80013aa:	2105      	movs	r1, #5
 80013ac:	200d      	movs	r0, #13
 80013ae:	f7ff fa5d 	bl	800086c <Hal_GPIO_vSetupAlternateFunction>
	Config_vSetupGPIO(14, GPIO_AF, GPIO_PUSHPULL, GPIO_PULLUP, GPIO_B);
 80013b2:	2301      	movs	r3, #1
 80013b4:	9300      	str	r3, [sp, #0]
 80013b6:	2301      	movs	r3, #1
 80013b8:	2200      	movs	r2, #0
 80013ba:	2102      	movs	r1, #2
 80013bc:	200e      	movs	r0, #14
 80013be:	f7ff fa2b 	bl	8000818 <Config_vSetupGPIO>
	Hal_GPIO_vSetupAlternateFunction(14, 5, GPIO_B);
 80013c2:	2201      	movs	r2, #1
 80013c4:	2105      	movs	r1, #5
 80013c6:	200e      	movs	r0, #14
 80013c8:	f7ff fa50 	bl	800086c <Hal_GPIO_vSetupAlternateFunction>
	Config_vSetupGPIO(15, GPIO_AF, GPIO_PUSHPULL, GPIO_PULLUP, GPIO_B);
 80013cc:	2301      	movs	r3, #1
 80013ce:	9300      	str	r3, [sp, #0]
 80013d0:	2301      	movs	r3, #1
 80013d2:	2200      	movs	r2, #0
 80013d4:	2102      	movs	r1, #2
 80013d6:	200f      	movs	r0, #15
 80013d8:	f7ff fa1e 	bl	8000818 <Config_vSetupGPIO>
	Hal_GPIO_vSetupAlternateFunction(15, 5, GPIO_B);
 80013dc:	2201      	movs	r2, #1
 80013de:	2105      	movs	r1, #5
 80013e0:	200f      	movs	r0, #15
 80013e2:	f7ff fa43 	bl	800086c <Hal_GPIO_vSetupAlternateFunction>
}
 80013e6:	bf00      	nop
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	48000400 	.word	0x48000400

080013f0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80013f0:	480d      	ldr	r0, [pc, #52]	@ (8001428 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80013f2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80013f4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013f8:	480c      	ldr	r0, [pc, #48]	@ (800142c <LoopForever+0x6>)
  ldr r1, =_edata
 80013fa:	490d      	ldr	r1, [pc, #52]	@ (8001430 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001434 <LoopForever+0xe>)
  movs r3, #0
 80013fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001400:	e002      	b.n	8001408 <LoopCopyDataInit>

08001402 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001402:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001404:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001406:	3304      	adds	r3, #4

08001408 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001408:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800140a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800140c:	d3f9      	bcc.n	8001402 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800140e:	4a0a      	ldr	r2, [pc, #40]	@ (8001438 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001410:	4c0a      	ldr	r4, [pc, #40]	@ (800143c <LoopForever+0x16>)
  movs r3, #0
 8001412:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001414:	e001      	b.n	800141a <LoopFillZerobss>

08001416 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001416:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001418:	3204      	adds	r2, #4

0800141a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800141a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800141c:	d3fb      	bcc.n	8001416 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800141e:	f000 f811 	bl	8001444 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001422:	f7ff feb1 	bl	8001188 <main>

08001426 <LoopForever>:

LoopForever:
  b LoopForever
 8001426:	e7fe      	b.n	8001426 <LoopForever>
  ldr   r0, =_estack
 8001428:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800142c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001430:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8001434:	080014ac 	.word	0x080014ac
  ldr r2, =_sbss
 8001438:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800143c:	2000001c 	.word	0x2000001c

08001440 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001440:	e7fe      	b.n	8001440 <ADC1_2_IRQHandler>
	...

08001444 <__libc_init_array>:
 8001444:	b570      	push	{r4, r5, r6, lr}
 8001446:	4d0d      	ldr	r5, [pc, #52]	@ (800147c <__libc_init_array+0x38>)
 8001448:	4c0d      	ldr	r4, [pc, #52]	@ (8001480 <__libc_init_array+0x3c>)
 800144a:	1b64      	subs	r4, r4, r5
 800144c:	10a4      	asrs	r4, r4, #2
 800144e:	2600      	movs	r6, #0
 8001450:	42a6      	cmp	r6, r4
 8001452:	d109      	bne.n	8001468 <__libc_init_array+0x24>
 8001454:	4d0b      	ldr	r5, [pc, #44]	@ (8001484 <__libc_init_array+0x40>)
 8001456:	4c0c      	ldr	r4, [pc, #48]	@ (8001488 <__libc_init_array+0x44>)
 8001458:	f000 f818 	bl	800148c <_init>
 800145c:	1b64      	subs	r4, r4, r5
 800145e:	10a4      	asrs	r4, r4, #2
 8001460:	2600      	movs	r6, #0
 8001462:	42a6      	cmp	r6, r4
 8001464:	d105      	bne.n	8001472 <__libc_init_array+0x2e>
 8001466:	bd70      	pop	{r4, r5, r6, pc}
 8001468:	f855 3b04 	ldr.w	r3, [r5], #4
 800146c:	4798      	blx	r3
 800146e:	3601      	adds	r6, #1
 8001470:	e7ee      	b.n	8001450 <__libc_init_array+0xc>
 8001472:	f855 3b04 	ldr.w	r3, [r5], #4
 8001476:	4798      	blx	r3
 8001478:	3601      	adds	r6, #1
 800147a:	e7f2      	b.n	8001462 <__libc_init_array+0x1e>
 800147c:	080014a4 	.word	0x080014a4
 8001480:	080014a4 	.word	0x080014a4
 8001484:	080014a4 	.word	0x080014a4
 8001488:	080014a8 	.word	0x080014a8

0800148c <_init>:
 800148c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800148e:	bf00      	nop
 8001490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001492:	bc08      	pop	{r3}
 8001494:	469e      	mov	lr, r3
 8001496:	4770      	bx	lr

08001498 <_fini>:
 8001498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800149a:	bf00      	nop
 800149c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800149e:	bc08      	pop	{r3}
 80014a0:	469e      	mov	lr, r3
 80014a2:	4770      	bx	lr
