
00_Full_Project_M4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001338  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080014cc  080014cc  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080014cc  080014cc  0000300c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080014cc  080014cc  0000300c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080014cc  080014cc  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080014cc  080014cc  000024cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080014d0  080014d0  000024d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080014d4  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000300c  2**0
                  CONTENTS
 10 .bss          00000020  2000000c  2000000c  0000300c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000002c  2000002c  0000300c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001c7f  00000000  00000000  0000303c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000090a  00000000  00000000  00004cbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000240  00000000  00000000  000055c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000018c  00000000  00000000  00005808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002459  00000000  00000000  00005994  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000035d2  00000000  00000000  00007ded  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00008c74  00000000  00000000  0000b3bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00014033  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000644  00000000  00000000  00014078  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005b  00000000  00000000  000146bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080014b4 	.word	0x080014b4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	080014b4 	.word	0x080014b4

080001d4 <ClockDriver_vEnable_Peripheral_Clocks>:
 *      Author: chris
 */
#include "clock_driver.h"

void ClockDriver_vEnable_Peripheral_Clocks(TypeDef_Peripheral_Bus* periph)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b089      	sub	sp, #36	@ 0x24
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
	uint8_t size = 0;
 80001dc:	2300      	movs	r3, #0
 80001de:	72fb      	strb	r3, [r7, #11]

	/* System clock */
	RCC->CR |= (1U << 0); 			// HSI clock, 8 MHz
 80001e0:	4b4c      	ldr	r3, [pc, #304]	@ (8000314 <ClockDriver_vEnable_Peripheral_Clocks+0x140>)
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	4a4b      	ldr	r2, [pc, #300]	@ (8000314 <ClockDriver_vEnable_Peripheral_Clocks+0x140>)
 80001e6:	f043 0301 	orr.w	r3, r3, #1
 80001ea:	6013      	str	r3, [r2, #0]
	RCC->CFGR &= ~(0xF << 4);		// HSI clock not divided
 80001ec:	4b49      	ldr	r3, [pc, #292]	@ (8000314 <ClockDriver_vEnable_Peripheral_Clocks+0x140>)
 80001ee:	685b      	ldr	r3, [r3, #4]
 80001f0:	4a48      	ldr	r2, [pc, #288]	@ (8000314 <ClockDriver_vEnable_Peripheral_Clocks+0x140>)
 80001f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80001f6:	6053      	str	r3, [r2, #4]

	/* AHB1 bus clocks */
	size = periph->SizeAHB1;
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	781b      	ldrb	r3, [r3, #0]
 80001fc:	72fb      	strb	r3, [r7, #11]

	for (int i = 0; i < size; i++)
 80001fe:	2300      	movs	r3, #0
 8000200:	61fb      	str	r3, [r7, #28]
 8000202:	e00f      	b.n	8000224 <ClockDriver_vEnable_Peripheral_Clocks+0x50>
	{
		RCC->AHBENR |= (1U << periph->AHB1Bus[i]);
 8000204:	4b43      	ldr	r3, [pc, #268]	@ (8000314 <ClockDriver_vEnable_Peripheral_Clocks+0x140>)
 8000206:	695a      	ldr	r2, [r3, #20]
 8000208:	6879      	ldr	r1, [r7, #4]
 800020a:	69fb      	ldr	r3, [r7, #28]
 800020c:	005b      	lsls	r3, r3, #1
 800020e:	440b      	add	r3, r1
 8000210:	88db      	ldrh	r3, [r3, #6]
 8000212:	4619      	mov	r1, r3
 8000214:	2301      	movs	r3, #1
 8000216:	408b      	lsls	r3, r1
 8000218:	493e      	ldr	r1, [pc, #248]	@ (8000314 <ClockDriver_vEnable_Peripheral_Clocks+0x140>)
 800021a:	4313      	orrs	r3, r2
 800021c:	614b      	str	r3, [r1, #20]
	for (int i = 0; i < size; i++)
 800021e:	69fb      	ldr	r3, [r7, #28]
 8000220:	3301      	adds	r3, #1
 8000222:	61fb      	str	r3, [r7, #28]
 8000224:	7afb      	ldrb	r3, [r7, #11]
 8000226:	69fa      	ldr	r2, [r7, #28]
 8000228:	429a      	cmp	r2, r3
 800022a:	dbeb      	blt.n	8000204 <ClockDriver_vEnable_Peripheral_Clocks+0x30>
	}

	/* AHB2 bus clocks */
	size = periph->SizeAHB2;
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	785b      	ldrb	r3, [r3, #1]
 8000230:	72fb      	strb	r3, [r7, #11]
	for (int i = 0; i < size; i++)
 8000232:	2300      	movs	r3, #0
 8000234:	61bb      	str	r3, [r7, #24]
 8000236:	e010      	b.n	800025a <ClockDriver_vEnable_Peripheral_Clocks+0x86>
	{
		RCC->AHBENR |= (1U << periph->AHB2Bus[i]);
 8000238:	4b36      	ldr	r3, [pc, #216]	@ (8000314 <ClockDriver_vEnable_Peripheral_Clocks+0x140>)
 800023a:	695a      	ldr	r2, [r3, #20]
 800023c:	6879      	ldr	r1, [r7, #4]
 800023e:	69bb      	ldr	r3, [r7, #24]
 8000240:	3308      	adds	r3, #8
 8000242:	005b      	lsls	r3, r3, #1
 8000244:	440b      	add	r3, r1
 8000246:	885b      	ldrh	r3, [r3, #2]
 8000248:	4619      	mov	r1, r3
 800024a:	2301      	movs	r3, #1
 800024c:	408b      	lsls	r3, r1
 800024e:	4931      	ldr	r1, [pc, #196]	@ (8000314 <ClockDriver_vEnable_Peripheral_Clocks+0x140>)
 8000250:	4313      	orrs	r3, r2
 8000252:	614b      	str	r3, [r1, #20]
	for (int i = 0; i < size; i++)
 8000254:	69bb      	ldr	r3, [r7, #24]
 8000256:	3301      	adds	r3, #1
 8000258:	61bb      	str	r3, [r7, #24]
 800025a:	7afb      	ldrb	r3, [r7, #11]
 800025c:	69ba      	ldr	r2, [r7, #24]
 800025e:	429a      	cmp	r2, r3
 8000260:	dbea      	blt.n	8000238 <ClockDriver_vEnable_Peripheral_Clocks+0x64>
	}

	/* AHB3 bus clocks */
	size = periph->SizeAHB3;
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	789b      	ldrb	r3, [r3, #2]
 8000266:	72fb      	strb	r3, [r7, #11]
	for (int i = 0; i < size; i++)
 8000268:	2300      	movs	r3, #0
 800026a:	617b      	str	r3, [r7, #20]
 800026c:	e010      	b.n	8000290 <ClockDriver_vEnable_Peripheral_Clocks+0xbc>
	{
		RCC->AHBENR |= (1U << periph->AHB3Bus[i]);
 800026e:	4b29      	ldr	r3, [pc, #164]	@ (8000314 <ClockDriver_vEnable_Peripheral_Clocks+0x140>)
 8000270:	695a      	ldr	r2, [r3, #20]
 8000272:	6879      	ldr	r1, [r7, #4]
 8000274:	697b      	ldr	r3, [r7, #20]
 8000276:	330c      	adds	r3, #12
 8000278:	005b      	lsls	r3, r3, #1
 800027a:	440b      	add	r3, r1
 800027c:	88db      	ldrh	r3, [r3, #6]
 800027e:	4619      	mov	r1, r3
 8000280:	2301      	movs	r3, #1
 8000282:	408b      	lsls	r3, r1
 8000284:	4923      	ldr	r1, [pc, #140]	@ (8000314 <ClockDriver_vEnable_Peripheral_Clocks+0x140>)
 8000286:	4313      	orrs	r3, r2
 8000288:	614b      	str	r3, [r1, #20]
	for (int i = 0; i < size; i++)
 800028a:	697b      	ldr	r3, [r7, #20]
 800028c:	3301      	adds	r3, #1
 800028e:	617b      	str	r3, [r7, #20]
 8000290:	7afb      	ldrb	r3, [r7, #11]
 8000292:	697a      	ldr	r2, [r7, #20]
 8000294:	429a      	cmp	r2, r3
 8000296:	dbea      	blt.n	800026e <ClockDriver_vEnable_Peripheral_Clocks+0x9a>
	}

	/* APB1 bus clocks */
	size = periph->SizeAPB1;
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	78db      	ldrb	r3, [r3, #3]
 800029c:	72fb      	strb	r3, [r7, #11]
	for (int i = 0; i < size; i++)
 800029e:	2300      	movs	r3, #0
 80002a0:	613b      	str	r3, [r7, #16]
 80002a2:	e011      	b.n	80002c8 <ClockDriver_vEnable_Peripheral_Clocks+0xf4>
	{
		RCC->APB1ENR |= (1U << (uint8_t)((periph->APB1Bus[i]) & 0x00FF));
 80002a4:	4b1b      	ldr	r3, [pc, #108]	@ (8000314 <ClockDriver_vEnable_Peripheral_Clocks+0x140>)
 80002a6:	69da      	ldr	r2, [r3, #28]
 80002a8:	6879      	ldr	r1, [r7, #4]
 80002aa:	693b      	ldr	r3, [r7, #16]
 80002ac:	3310      	adds	r3, #16
 80002ae:	005b      	lsls	r3, r3, #1
 80002b0:	440b      	add	r3, r1
 80002b2:	885b      	ldrh	r3, [r3, #2]
 80002b4:	b2db      	uxtb	r3, r3
 80002b6:	4619      	mov	r1, r3
 80002b8:	2301      	movs	r3, #1
 80002ba:	408b      	lsls	r3, r1
 80002bc:	4915      	ldr	r1, [pc, #84]	@ (8000314 <ClockDriver_vEnable_Peripheral_Clocks+0x140>)
 80002be:	4313      	orrs	r3, r2
 80002c0:	61cb      	str	r3, [r1, #28]
	for (int i = 0; i < size; i++)
 80002c2:	693b      	ldr	r3, [r7, #16]
 80002c4:	3301      	adds	r3, #1
 80002c6:	613b      	str	r3, [r7, #16]
 80002c8:	7afb      	ldrb	r3, [r7, #11]
 80002ca:	693a      	ldr	r2, [r7, #16]
 80002cc:	429a      	cmp	r2, r3
 80002ce:	dbe9      	blt.n	80002a4 <ClockDriver_vEnable_Peripheral_Clocks+0xd0>
	}

	/* APB2 bus clocks */
	size = periph->SizeAPB2;
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	791b      	ldrb	r3, [r3, #4]
 80002d4:	72fb      	strb	r3, [r7, #11]
	for (int i = 0; i < size; i++)
 80002d6:	2300      	movs	r3, #0
 80002d8:	60fb      	str	r3, [r7, #12]
 80002da:	e010      	b.n	80002fe <ClockDriver_vEnable_Peripheral_Clocks+0x12a>
	{
		RCC->APB2ENR |= (1U << (uint8_t)((periph->APB2Bus[i]) & 0x00FF));
 80002dc:	4b0d      	ldr	r3, [pc, #52]	@ (8000314 <ClockDriver_vEnable_Peripheral_Clocks+0x140>)
 80002de:	699a      	ldr	r2, [r3, #24]
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	68f9      	ldr	r1, [r7, #12]
 80002e4:	3128      	adds	r1, #40	@ 0x28
 80002e6:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80002ea:	b2db      	uxtb	r3, r3
 80002ec:	4619      	mov	r1, r3
 80002ee:	2301      	movs	r3, #1
 80002f0:	408b      	lsls	r3, r1
 80002f2:	4908      	ldr	r1, [pc, #32]	@ (8000314 <ClockDriver_vEnable_Peripheral_Clocks+0x140>)
 80002f4:	4313      	orrs	r3, r2
 80002f6:	618b      	str	r3, [r1, #24]
	for (int i = 0; i < size; i++)
 80002f8:	68fb      	ldr	r3, [r7, #12]
 80002fa:	3301      	adds	r3, #1
 80002fc:	60fb      	str	r3, [r7, #12]
 80002fe:	7afb      	ldrb	r3, [r7, #11]
 8000300:	68fa      	ldr	r2, [r7, #12]
 8000302:	429a      	cmp	r2, r3
 8000304:	dbea      	blt.n	80002dc <ClockDriver_vEnable_Peripheral_Clocks+0x108>
	}
}
 8000306:	bf00      	nop
 8000308:	bf00      	nop
 800030a:	3724      	adds	r7, #36	@ 0x24
 800030c:	46bd      	mov	sp, r7
 800030e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000312:	4770      	bx	lr
 8000314:	40021000 	.word	0x40021000

08000318 <ClockDriver_vClockSelect>:

void ClockDriver_vClockSelect(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b09a      	sub	sp, #104	@ 0x68
 800031c:	af00      	add	r7, sp, #0
	TypeDef_Peripheral_Bus peripherals;
	peripherals.SizeAHB1 = 1;
 800031e:	2301      	movs	r3, #1
 8000320:	713b      	strb	r3, [r7, #4]
	peripherals.AHB1Bus[0] = DMA1_Clock;
 8000322:	2300      	movs	r3, #0
 8000324:	817b      	strh	r3, [r7, #10]

	peripherals.SizeAHB2 = 3;
 8000326:	2303      	movs	r3, #3
 8000328:	717b      	strb	r3, [r7, #5]
	peripherals.AHB2Bus[0] = GPIOA_Clock;
 800032a:	2311      	movs	r3, #17
 800032c:	82fb      	strh	r3, [r7, #22]
	peripherals.AHB2Bus[1] = GPIOB_Clock;
 800032e:	2312      	movs	r3, #18
 8000330:	833b      	strh	r3, [r7, #24]
	peripherals.AHB2Bus[2] = GPIOC_Clock;
 8000332:	2313      	movs	r3, #19
 8000334:	837b      	strh	r3, [r7, #26]

	peripherals.SizeAHB3 = 1;
 8000336:	2301      	movs	r3, #1
 8000338:	71bb      	strb	r3, [r7, #6]
	peripherals.AHB3Bus[0] = ADC12_Clock;
 800033a:	231c      	movs	r3, #28
 800033c:	847b      	strh	r3, [r7, #34]	@ 0x22

	peripherals.SizeAPB1 = 3;
 800033e:	2303      	movs	r3, #3
 8000340:	71fb      	strb	r3, [r7, #7]
	peripherals.APB1Bus[0] = SPI3_Clock;
 8000342:	f240 130f 	movw	r3, #271	@ 0x10f
 8000346:	84fb      	strh	r3, [r7, #38]	@ 0x26
	peripherals.APB1Bus[1] = USART3_Clock;
 8000348:	f44f 7389 	mov.w	r3, #274	@ 0x112
 800034c:	853b      	strh	r3, [r7, #40]	@ 0x28
	peripherals.APB1Bus[2] = I2C1_Clock;
 800034e:	f241 0315 	movw	r3, #4117	@ 0x1015
 8000352:	857b      	strh	r3, [r7, #42]	@ 0x2a

	peripherals.SizeAPB2 = 2;
 8000354:	2302      	movs	r3, #2
 8000356:	723b      	strb	r3, [r7, #8]
	peripherals.APB2Bus[0] = SYSCFG_Clock;
 8000358:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800035c:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
	peripherals.APB2Bus[1] = EXTI_Clock;
 8000360:	f241 0302 	movw	r3, #4098	@ 0x1002
 8000364:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56

	ClockDriver_vEnable_Peripheral_Clocks(&peripherals);
 8000368:	1d3b      	adds	r3, r7, #4
 800036a:	4618      	mov	r0, r3
 800036c:	f7ff ff32 	bl	80001d4 <ClockDriver_vEnable_Peripheral_Clocks>
}
 8000370:	bf00      	nop
 8000372:	3768      	adds	r7, #104	@ 0x68
 8000374:	46bd      	mov	sp, r7
 8000376:	bd80      	pop	{r7, pc}

08000378 <Hal_ADC_vInit>:
 * 	- Configure sample rate
 * 	- Configure resolution
 * 	- Enable ADC and wait till its ready
 */
void Hal_ADC_vInit(void)
{
 8000378:	b480      	push	{r7}
 800037a:	b083      	sub	sp, #12
 800037c:	af00      	add	r7, sp, #0
	ADC_MASTER->CCR &= ~(0x3 << 16);
 800037e:	4b55      	ldr	r3, [pc, #340]	@ (80004d4 <Hal_ADC_vInit+0x15c>)
 8000380:	689b      	ldr	r3, [r3, #8]
 8000382:	4a54      	ldr	r2, [pc, #336]	@ (80004d4 <Hal_ADC_vInit+0x15c>)
 8000384:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8000388:	6093      	str	r3, [r2, #8]
	ADC_MASTER->CCR |= (0x1 << 16);		// HCLK/1
 800038a:	4b52      	ldr	r3, [pc, #328]	@ (80004d4 <Hal_ADC_vInit+0x15c>)
 800038c:	689b      	ldr	r3, [r3, #8]
 800038e:	4a51      	ldr	r2, [pc, #324]	@ (80004d4 <Hal_ADC_vInit+0x15c>)
 8000390:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000394:	6093      	str	r3, [r2, #8]
    if (ADC1->CR & (1U << 0))  // Check ADEN
 8000396:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800039a:	689b      	ldr	r3, [r3, #8]
 800039c:	f003 0301 	and.w	r3, r3, #1
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d00f      	beq.n	80003c4 <Hal_ADC_vInit+0x4c>
    {
        ADC1->CR |= (1U << 1); // Set ADDIS to disable ADC
 80003a4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80003a8:	689b      	ldr	r3, [r3, #8]
 80003aa:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80003ae:	f043 0302 	orr.w	r3, r3, #2
 80003b2:	6093      	str	r3, [r2, #8]
        while (ADC1->CR & (1U << 0));  // Wait until ADEN == 0
 80003b4:	bf00      	nop
 80003b6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80003ba:	689b      	ldr	r3, [r3, #8]
 80003bc:	f003 0301 	and.w	r3, r3, #1
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d1f8      	bne.n	80003b6 <Hal_ADC_vInit+0x3e>
    }

    // 2. Enable voltage regulator
    ADC1->CR &= ~(0b11 << 28);      // Clear bits 28 and 29
 80003c4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80003c8:	689b      	ldr	r3, [r3, #8]
 80003ca:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80003ce:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 80003d2:	6093      	str	r3, [r2, #8]
    ADC1->CR |=  (0b01 << 28);      // Set ADVREGEN = 01
 80003d4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80003d8:	689b      	ldr	r3, [r3, #8]
 80003da:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80003de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80003e2:	6093      	str	r3, [r2, #8]
    for (volatile int i = 0; i < 10000; ++i);  // Short delay (10+ µs needed)
 80003e4:	2300      	movs	r3, #0
 80003e6:	607b      	str	r3, [r7, #4]
 80003e8:	e002      	b.n	80003f0 <Hal_ADC_vInit+0x78>
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	3301      	adds	r3, #1
 80003ee:	607b      	str	r3, [r7, #4]
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	f242 720f 	movw	r2, #9999	@ 0x270f
 80003f6:	4293      	cmp	r3, r2
 80003f8:	ddf7      	ble.n	80003ea <Hal_ADC_vInit+0x72>

    // 3. Calibrate ADC
    ADC1->CR &= ~(1U << 30);   // Single-ended calibration
 80003fa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80003fe:	689b      	ldr	r3, [r3, #8]
 8000400:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000404:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8000408:	6093      	str	r3, [r2, #8]
    ADC1->CR |= (1U << 31);    // Start calibration
 800040a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800040e:	689b      	ldr	r3, [r3, #8]
 8000410:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000414:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000418:	6093      	str	r3, [r2, #8]

    while (ADC1->CR & (1U << 31));  // Wait for calibration to finish
 800041a:	bf00      	nop
 800041c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000420:	689b      	ldr	r3, [r3, #8]
 8000422:	2b00      	cmp	r3, #0
 8000424:	dbfa      	blt.n	800041c <Hal_ADC_vInit+0xa4>

    // 4. Enable ADC
    ADC1->CR |= (1U << 0);  // ADEN
 8000426:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800042a:	689b      	ldr	r3, [r3, #8]
 800042c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000430:	f043 0301 	orr.w	r3, r3, #1
 8000434:	6093      	str	r3, [r2, #8]
    while (!(ADC1->ISR & (1U << 0)));  // Wait for ADRDY
 8000436:	bf00      	nop
 8000438:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	f003 0301 	and.w	r3, r3, #1
 8000442:	2b00      	cmp	r3, #0
 8000444:	d0f8      	beq.n	8000438 <Hal_ADC_vInit+0xc0>

    // 5. Configure channel, resolution, sample time (same as before)
    ADC1->SQR1 &= ~(0xF << 0);		// 1 conversion
 8000446:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800044a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800044c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000450:	f023 030f 	bic.w	r3, r3, #15
 8000454:	6313      	str	r3, [r2, #48]	@ 0x30
    ADC1->SQR1 |= (1U << 6);  		// Rank 1 = channel 1
 8000456:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800045a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800045c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000460:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000464:	6313      	str	r3, [r2, #48]	@ 0x30

    ADC1->SMPR1 &= ~(0x7 << 3);
 8000466:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800046a:	695b      	ldr	r3, [r3, #20]
 800046c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000470:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8000474:	6153      	str	r3, [r2, #20]
    ADC1->SMPR1 |= (0b111 << 3);	// Long sample time
 8000476:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800047a:	695b      	ldr	r3, [r3, #20]
 800047c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000480:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 8000484:	6153      	str	r3, [r2, #20]

    ADC1->CFGR &= ~(0x3 << 3);		// 12-bit resolution
 8000486:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800048a:	68db      	ldr	r3, [r3, #12]
 800048c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000490:	f023 0318 	bic.w	r3, r3, #24
 8000494:	60d3      	str	r3, [r2, #12]
    ADC1->CFGR |= (1U << 0);		// Enable DMA
 8000496:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800049a:	68db      	ldr	r3, [r3, #12]
 800049c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80004a0:	f043 0301 	orr.w	r3, r3, #1
 80004a4:	60d3      	str	r3, [r2, #12]
    ADC1->CFGR &= ~(1U << 1);		// DMA one shot
 80004a6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80004aa:	68db      	ldr	r3, [r3, #12]
 80004ac:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80004b0:	f023 0302 	bic.w	r3, r3, #2
 80004b4:	60d3      	str	r3, [r2, #12]

    ADC1->CFGR |= (1U << 13);  // CONT = 1 => Continuous conversion mode
 80004b6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80004ba:	68db      	ldr	r3, [r3, #12]
 80004bc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80004c0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80004c4:	60d3      	str	r3, [r2, #12]
}
 80004c6:	bf00      	nop
 80004c8:	370c      	adds	r7, #12
 80004ca:	46bd      	mov	sp, r7
 80004cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop
 80004d4:	50000300 	.word	0x50000300

080004d8 <Hal_ADC_vStart>:

void Hal_ADC_vStart(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
	ADC1->CR |= (1U << 2);  // ADSTART = 1
 80004dc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80004e0:	689b      	ldr	r3, [r3, #8]
 80004e2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80004e6:	f043 0304 	orr.w	r3, r3, #4
 80004ea:	6093      	str	r3, [r2, #8]
}
 80004ec:	bf00      	nop
 80004ee:	46bd      	mov	sp, r7
 80004f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f4:	4770      	bx	lr
	...

080004f8 <Hal_DMA_1_vInitChannel2>:
		{0xBB, 0xB1, 0xB2, 0xBC, 0xFB, 0xEF, 0xCC, 0xDD, 0xBB, 0x22};

uint16_t dataADC = 0;

void Hal_DMA_1_vInitChannel2(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0
	// Disable DMA1
	DMA1->CCR2 &= ~(1U << 0);						// EN = 0
 80004fc:	4b16      	ldr	r3, [pc, #88]	@ (8000558 <Hal_DMA_1_vInitChannel2+0x60>)
 80004fe:	69db      	ldr	r3, [r3, #28]
 8000500:	4a15      	ldr	r2, [pc, #84]	@ (8000558 <Hal_DMA_1_vInitChannel2+0x60>)
 8000502:	f023 0301 	bic.w	r3, r3, #1
 8000506:	61d3      	str	r3, [r2, #28]

	// Set peripheral register address (USART3->TDR)
	DMA1->CPAR2 = (USART3_BASE_ADDR + 0x28);		// 0x28 is the offset to TDR
 8000508:	4b13      	ldr	r3, [pc, #76]	@ (8000558 <Hal_DMA_1_vInitChannel2+0x60>)
 800050a:	4a14      	ldr	r2, [pc, #80]	@ (800055c <Hal_DMA_1_vInitChannel2+0x64>)
 800050c:	625a      	str	r2, [r3, #36]	@ 0x24

	// Set memory address (array address)
	DMA1->CMAR2 = (uint32_t)&TransmitData;
 800050e:	4b12      	ldr	r3, [pc, #72]	@ (8000558 <Hal_DMA_1_vInitChannel2+0x60>)
 8000510:	4a13      	ldr	r2, [pc, #76]	@ (8000560 <Hal_DMA_1_vInitChannel2+0x68>)
 8000512:	629a      	str	r2, [r3, #40]	@ 0x28

	// Configure the total numbers of data to transfer
	DMA1->CNDTR2 = 10U;								// One byte to send
 8000514:	4b10      	ldr	r3, [pc, #64]	@ (8000558 <Hal_DMA_1_vInitChannel2+0x60>)
 8000516:	220a      	movs	r2, #10
 8000518:	621a      	str	r2, [r3, #32]

	// Configure the CCR1 register
	DMA1->CCR2 |= (1U<<1) 							// Transfer complete interrupt
 800051a:	4b0f      	ldr	r3, [pc, #60]	@ (8000558 <Hal_DMA_1_vInitChannel2+0x60>)
 800051c:	69db      	ldr	r3, [r3, #28]
 800051e:	4a0e      	ldr	r2, [pc, #56]	@ (8000558 <Hal_DMA_1_vInitChannel2+0x60>)
 8000520:	f443 5384 	orr.w	r3, r3, #4224	@ 0x1080
 8000524:	f043 0312 	orr.w	r3, r3, #18
 8000528:	61d3      	str	r3, [r2, #28]
			| (1U << 4)								// Read from memory
			| (0U << 5)								// Non-Circular mode
			| (1U << 7)								// Memory increment mode
			| (1U << 12);							// Priority mode medium

	DMA1->CCR2 &= ~(0x3 << 8);						// Peripheral size 8 bit
 800052a:	4b0b      	ldr	r3, [pc, #44]	@ (8000558 <Hal_DMA_1_vInitChannel2+0x60>)
 800052c:	69db      	ldr	r3, [r3, #28]
 800052e:	4a0a      	ldr	r2, [pc, #40]	@ (8000558 <Hal_DMA_1_vInitChannel2+0x60>)
 8000530:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000534:	61d3      	str	r3, [r2, #28]
	DMA1->CCR2 &= ~(0x3 << 10);						// Memory size 8 bit
 8000536:	4b08      	ldr	r3, [pc, #32]	@ (8000558 <Hal_DMA_1_vInitChannel2+0x60>)
 8000538:	69db      	ldr	r3, [r3, #28]
 800053a:	4a07      	ldr	r2, [pc, #28]	@ (8000558 <Hal_DMA_1_vInitChannel2+0x60>)
 800053c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000540:	61d3      	str	r3, [r2, #28]

//	DMA1->CCR2 |= (1U << 0);						// Enable DMA

    USART3->CR3 |= (1U << 7);
 8000542:	4b08      	ldr	r3, [pc, #32]	@ (8000564 <Hal_DMA_1_vInitChannel2+0x6c>)
 8000544:	689b      	ldr	r3, [r3, #8]
 8000546:	4a07      	ldr	r2, [pc, #28]	@ (8000564 <Hal_DMA_1_vInitChannel2+0x6c>)
 8000548:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800054c:	6093      	str	r3, [r2, #8]
}
 800054e:	bf00      	nop
 8000550:	46bd      	mov	sp, r7
 8000552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000556:	4770      	bx	lr
 8000558:	40020000 	.word	0x40020000
 800055c:	40004828 	.word	0x40004828
 8000560:	20000000 	.word	0x20000000
 8000564:	40004800 	.word	0x40004800

08000568 <Hal_DMA_1_vInitChannel3>:

void Hal_DMA_1_vInitChannel3(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
	// Disable DMA1
	DMA1->CCR3 &= ~(1U << 0);						// EN = 0
 800056c:	4b1f      	ldr	r3, [pc, #124]	@ (80005ec <Hal_DMA_1_vInitChannel3+0x84>)
 800056e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000570:	4a1e      	ldr	r2, [pc, #120]	@ (80005ec <Hal_DMA_1_vInitChannel3+0x84>)
 8000572:	f023 0301 	bic.w	r3, r3, #1
 8000576:	6313      	str	r3, [r2, #48]	@ 0x30

	// Set peripheral register address (ADC1->DR)
	DMA1->CPAR3 = (uint32_t)&ADC1->DR;		// 0x40 is the offset to DR
 8000578:	4b1c      	ldr	r3, [pc, #112]	@ (80005ec <Hal_DMA_1_vInitChannel3+0x84>)
 800057a:	4a1d      	ldr	r2, [pc, #116]	@ (80005f0 <Hal_DMA_1_vInitChannel3+0x88>)
 800057c:	639a      	str	r2, [r3, #56]	@ 0x38

	// Set memory address (array address)
	DMA1->CMAR3 = (uint32_t)&dataADC;
 800057e:	4b1b      	ldr	r3, [pc, #108]	@ (80005ec <Hal_DMA_1_vInitChannel3+0x84>)
 8000580:	4a1c      	ldr	r2, [pc, #112]	@ (80005f4 <Hal_DMA_1_vInitChannel3+0x8c>)
 8000582:	63da      	str	r2, [r3, #60]	@ 0x3c

	// Configure the total numbers of data to transfer
	DMA1->CNDTR3 = 1U;								// One data transfer
 8000584:	4b19      	ldr	r3, [pc, #100]	@ (80005ec <Hal_DMA_1_vInitChannel3+0x84>)
 8000586:	2201      	movs	r2, #1
 8000588:	635a      	str	r2, [r3, #52]	@ 0x34

	// Configure the CCR1 register
	DMA1->CCR3 |= (1U<<1) 							// Transfer complete interrupt
 800058a:	4b18      	ldr	r3, [pc, #96]	@ (80005ec <Hal_DMA_1_vInitChannel3+0x84>)
 800058c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800058e:	4a17      	ldr	r2, [pc, #92]	@ (80005ec <Hal_DMA_1_vInitChannel3+0x84>)
 8000590:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000594:	f043 0302 	orr.w	r3, r3, #2
 8000598:	6313      	str	r3, [r2, #48]	@ 0x30
			| (0U << 5)								// Non-Circular mode
			| (1U << 12);							// Priority mode medium

	DMA1->CCR3 &= ~ (1U << 4);						// Read from peripheral
 800059a:	4b14      	ldr	r3, [pc, #80]	@ (80005ec <Hal_DMA_1_vInitChannel3+0x84>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800059e:	4a13      	ldr	r2, [pc, #76]	@ (80005ec <Hal_DMA_1_vInitChannel3+0x84>)
 80005a0:	f023 0310 	bic.w	r3, r3, #16
 80005a4:	6313      	str	r3, [r2, #48]	@ 0x30
	DMA1->CCR3 &= ~ (1U << 6);						// Disable increment
 80005a6:	4b11      	ldr	r3, [pc, #68]	@ (80005ec <Hal_DMA_1_vInitChannel3+0x84>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005aa:	4a10      	ldr	r2, [pc, #64]	@ (80005ec <Hal_DMA_1_vInitChannel3+0x84>)
 80005ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80005b0:	6313      	str	r3, [r2, #48]	@ 0x30

	DMA1->CCR3 &= ~(0x3 << 8);						// Reset Peripheral size
 80005b2:	4b0e      	ldr	r3, [pc, #56]	@ (80005ec <Hal_DMA_1_vInitChannel3+0x84>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005b6:	4a0d      	ldr	r2, [pc, #52]	@ (80005ec <Hal_DMA_1_vInitChannel3+0x84>)
 80005b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80005bc:	6313      	str	r3, [r2, #48]	@ 0x30
	DMA1->CCR3 |= (1U << 8);						// Peripheral size 16 bit
 80005be:	4b0b      	ldr	r3, [pc, #44]	@ (80005ec <Hal_DMA_1_vInitChannel3+0x84>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005c2:	4a0a      	ldr	r2, [pc, #40]	@ (80005ec <Hal_DMA_1_vInitChannel3+0x84>)
 80005c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80005c8:	6313      	str	r3, [r2, #48]	@ 0x30

	DMA1->CCR3 &= ~(0x3 << 10);						// Reset memory size
 80005ca:	4b08      	ldr	r3, [pc, #32]	@ (80005ec <Hal_DMA_1_vInitChannel3+0x84>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ce:	4a07      	ldr	r2, [pc, #28]	@ (80005ec <Hal_DMA_1_vInitChannel3+0x84>)
 80005d0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80005d4:	6313      	str	r3, [r2, #48]	@ 0x30
	DMA1->CCR3 |= (1U << 10);						// Memory size 16 bit
 80005d6:	4b05      	ldr	r3, [pc, #20]	@ (80005ec <Hal_DMA_1_vInitChannel3+0x84>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005da:	4a04      	ldr	r2, [pc, #16]	@ (80005ec <Hal_DMA_1_vInitChannel3+0x84>)
 80005dc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80005e0:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80005e2:	bf00      	nop
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr
 80005ec:	40020000 	.word	0x40020000
 80005f0:	50000040 	.word	0x50000040
 80005f4:	20000028 	.word	0x20000028

080005f8 <Hal_vEnableDMAChannel2>:

void Hal_vEnableDMAChannel2(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
    // Disable DMA before reconfiguring
    DMA1->CCR2 &= ~(1U << 0);        // Clear EN
 80005fc:	4b09      	ldr	r3, [pc, #36]	@ (8000624 <Hal_vEnableDMAChannel2+0x2c>)
 80005fe:	69db      	ldr	r3, [r3, #28]
 8000600:	4a08      	ldr	r2, [pc, #32]	@ (8000624 <Hal_vEnableDMAChannel2+0x2c>)
 8000602:	f023 0301 	bic.w	r3, r3, #1
 8000606:	61d3      	str	r3, [r2, #28]

	// Reset the transfer count
	DMA1->CNDTR2 = 10;
 8000608:	4b06      	ldr	r3, [pc, #24]	@ (8000624 <Hal_vEnableDMAChannel2+0x2c>)
 800060a:	220a      	movs	r2, #10
 800060c:	621a      	str	r2, [r3, #32]

	// Activate DMA again
	DMA1->CCR2 |= (1U << 0);
 800060e:	4b05      	ldr	r3, [pc, #20]	@ (8000624 <Hal_vEnableDMAChannel2+0x2c>)
 8000610:	69db      	ldr	r3, [r3, #28]
 8000612:	4a04      	ldr	r2, [pc, #16]	@ (8000624 <Hal_vEnableDMAChannel2+0x2c>)
 8000614:	f043 0301 	orr.w	r3, r3, #1
 8000618:	61d3      	str	r3, [r2, #28]
}
 800061a:	bf00      	nop
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr
 8000624:	40020000 	.word	0x40020000

08000628 <Hal_vEnableDMAChannel3>:

void Hal_vEnableDMAChannel3(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
    // Disable DMA before reconfiguring
    DMA1->CCR3 &= ~(1U << 0);        // Clear EN
 800062c:	4b09      	ldr	r3, [pc, #36]	@ (8000654 <Hal_vEnableDMAChannel3+0x2c>)
 800062e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000630:	4a08      	ldr	r2, [pc, #32]	@ (8000654 <Hal_vEnableDMAChannel3+0x2c>)
 8000632:	f023 0301 	bic.w	r3, r3, #1
 8000636:	6313      	str	r3, [r2, #48]	@ 0x30

	// Reset the transfer count
	DMA1->CNDTR3 = 1;
 8000638:	4b06      	ldr	r3, [pc, #24]	@ (8000654 <Hal_vEnableDMAChannel3+0x2c>)
 800063a:	2201      	movs	r2, #1
 800063c:	635a      	str	r2, [r3, #52]	@ 0x34

	// Activate DMA again
	DMA1->CCR3 |= (1U << 0);
 800063e:	4b05      	ldr	r3, [pc, #20]	@ (8000654 <Hal_vEnableDMAChannel3+0x2c>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000642:	4a04      	ldr	r2, [pc, #16]	@ (8000654 <Hal_vEnableDMAChannel3+0x2c>)
 8000644:	f043 0301 	orr.w	r3, r3, #1
 8000648:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800064a:	bf00      	nop
 800064c:	46bd      	mov	sp, r7
 800064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000652:	4770      	bx	lr
 8000654:	40020000 	.word	0x40020000

08000658 <Hal_DMA1_vCorruptData>:

void Hal_DMA1_vCorruptData(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
	TransmitData[0] = ~TransmitData[0];
 800065c:	4b05      	ldr	r3, [pc, #20]	@ (8000674 <Hal_DMA1_vCorruptData+0x1c>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	43db      	mvns	r3, r3
 8000662:	b2da      	uxtb	r2, r3
 8000664:	4b03      	ldr	r3, [pc, #12]	@ (8000674 <Hal_DMA1_vCorruptData+0x1c>)
 8000666:	701a      	strb	r2, [r3, #0]
}
 8000668:	bf00      	nop
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	20000000 	.word	0x20000000

08000678 <Hal_GPIO_vEnable>:
 */

#include "hal_gpio.h"

void Hal_GPIO_vEnable(short u8PinNumber, char u8Type, GPIO_X gpio)
{
 8000678:	b480      	push	{r7}
 800067a:	b083      	sub	sp, #12
 800067c:	af00      	add	r7, sp, #0
 800067e:	4603      	mov	r3, r0
 8000680:	80fb      	strh	r3, [r7, #6]
 8000682:	460b      	mov	r3, r1
 8000684:	717b      	strb	r3, [r7, #5]
 8000686:	4613      	mov	r3, r2
 8000688:	713b      	strb	r3, [r7, #4]
	switch(gpio)
 800068a:	793b      	ldrb	r3, [r7, #4]
 800068c:	2b02      	cmp	r3, #2
 800068e:	d046      	beq.n	800071e <Hal_GPIO_vEnable+0xa6>
 8000690:	2b02      	cmp	r3, #2
 8000692:	dc62      	bgt.n	800075a <Hal_GPIO_vEnable+0xe2>
 8000694:	2b00      	cmp	r3, #0
 8000696:	d002      	beq.n	800069e <Hal_GPIO_vEnable+0x26>
 8000698:	2b01      	cmp	r3, #1
 800069a:	d022      	beq.n	80006e2 <Hal_GPIO_vEnable+0x6a>

	case GPIO_D:
	case GPIO_E:
	case GPIO_H:
	default:
		break;
 800069c:	e05d      	b.n	800075a <Hal_GPIO_vEnable+0xe2>
		GPIOA->MODER &= GPIO_MODER_RESET(u8PinNumber);
 800069e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4619      	mov	r1, r3
 80006a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006aa:	005b      	lsls	r3, r3, #1
 80006ac:	2203      	movs	r2, #3
 80006ae:	fa02 f303 	lsl.w	r3, r2, r3
 80006b2:	43db      	mvns	r3, r3
 80006b4:	ea01 0203 	and.w	r2, r1, r3
 80006b8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80006bc:	601a      	str	r2, [r3, #0]
		GPIOA->MODER |= GPIO_MODER_SET(u8PinNumber, u8Type);
 80006be:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4619      	mov	r1, r3
 80006c6:	797b      	ldrb	r3, [r7, #5]
 80006c8:	f003 0203 	and.w	r2, r3, #3
 80006cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006d0:	005b      	lsls	r3, r3, #1
 80006d2:	fa02 f303 	lsl.w	r3, r2, r3
 80006d6:	ea41 0203 	orr.w	r2, r1, r3
 80006da:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80006de:	601a      	str	r2, [r3, #0]
		break;
 80006e0:	e03c      	b.n	800075c <Hal_GPIO_vEnable+0xe4>
		GPIOB->MODER &= GPIO_MODER_RESET(u8PinNumber);
 80006e2:	4b21      	ldr	r3, [pc, #132]	@ (8000768 <Hal_GPIO_vEnable+0xf0>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	4619      	mov	r1, r3
 80006e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006ec:	005b      	lsls	r3, r3, #1
 80006ee:	2203      	movs	r2, #3
 80006f0:	fa02 f303 	lsl.w	r3, r2, r3
 80006f4:	43db      	mvns	r3, r3
 80006f6:	ea01 0203 	and.w	r2, r1, r3
 80006fa:	4b1b      	ldr	r3, [pc, #108]	@ (8000768 <Hal_GPIO_vEnable+0xf0>)
 80006fc:	601a      	str	r2, [r3, #0]
		GPIOB->MODER |= GPIO_MODER_SET(u8PinNumber, u8Type);
 80006fe:	4b1a      	ldr	r3, [pc, #104]	@ (8000768 <Hal_GPIO_vEnable+0xf0>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	4619      	mov	r1, r3
 8000704:	797b      	ldrb	r3, [r7, #5]
 8000706:	f003 0203 	and.w	r2, r3, #3
 800070a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800070e:	005b      	lsls	r3, r3, #1
 8000710:	fa02 f303 	lsl.w	r3, r2, r3
 8000714:	ea41 0203 	orr.w	r2, r1, r3
 8000718:	4b13      	ldr	r3, [pc, #76]	@ (8000768 <Hal_GPIO_vEnable+0xf0>)
 800071a:	601a      	str	r2, [r3, #0]
		break;
 800071c:	e01e      	b.n	800075c <Hal_GPIO_vEnable+0xe4>
		GPIOC->MODER &= GPIO_MODER_RESET(u8PinNumber);
 800071e:	4b13      	ldr	r3, [pc, #76]	@ (800076c <Hal_GPIO_vEnable+0xf4>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	4619      	mov	r1, r3
 8000724:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000728:	005b      	lsls	r3, r3, #1
 800072a:	2203      	movs	r2, #3
 800072c:	fa02 f303 	lsl.w	r3, r2, r3
 8000730:	43db      	mvns	r3, r3
 8000732:	ea01 0203 	and.w	r2, r1, r3
 8000736:	4b0d      	ldr	r3, [pc, #52]	@ (800076c <Hal_GPIO_vEnable+0xf4>)
 8000738:	601a      	str	r2, [r3, #0]
		GPIOC->MODER |= GPIO_MODER_SET(u8PinNumber, u8Type);
 800073a:	4b0c      	ldr	r3, [pc, #48]	@ (800076c <Hal_GPIO_vEnable+0xf4>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	4619      	mov	r1, r3
 8000740:	797b      	ldrb	r3, [r7, #5]
 8000742:	f003 0203 	and.w	r2, r3, #3
 8000746:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800074a:	005b      	lsls	r3, r3, #1
 800074c:	fa02 f303 	lsl.w	r3, r2, r3
 8000750:	ea41 0203 	orr.w	r2, r1, r3
 8000754:	4b05      	ldr	r3, [pc, #20]	@ (800076c <Hal_GPIO_vEnable+0xf4>)
 8000756:	601a      	str	r2, [r3, #0]
		break;
 8000758:	e000      	b.n	800075c <Hal_GPIO_vEnable+0xe4>
		break;
 800075a:	bf00      	nop
	}
}
 800075c:	bf00      	nop
 800075e:	370c      	adds	r7, #12
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr
 8000768:	48000400 	.word	0x48000400
 800076c:	48000800 	.word	0x48000800

08000770 <Hal_GPIO_vTyp>:

void Hal_GPIO_vTyp(short u8PinNumber, short u8Typ, GPIO_X gpio)
{
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
 8000776:	4603      	mov	r3, r0
 8000778:	80fb      	strh	r3, [r7, #6]
 800077a:	460b      	mov	r3, r1
 800077c:	80bb      	strh	r3, [r7, #4]
 800077e:	4613      	mov	r3, r2
 8000780:	70fb      	strb	r3, [r7, #3]
	switch(gpio)
 8000782:	78fb      	ldrb	r3, [r7, #3]
 8000784:	2b02      	cmp	r3, #2
 8000786:	d03e      	beq.n	8000806 <Hal_GPIO_vTyp+0x96>
 8000788:	2b02      	cmp	r3, #2
 800078a:	dc56      	bgt.n	800083a <Hal_GPIO_vTyp+0xca>
 800078c:	2b00      	cmp	r3, #0
 800078e:	d002      	beq.n	8000796 <Hal_GPIO_vTyp+0x26>
 8000790:	2b01      	cmp	r3, #1
 8000792:	d01e      	beq.n	80007d2 <Hal_GPIO_vTyp+0x62>

	case GPIO_D:
	case GPIO_E:
	case GPIO_H:
	default:
		break;
 8000794:	e051      	b.n	800083a <Hal_GPIO_vTyp+0xca>
		GPIOA->OTYPER &= GPIO_OTYPER_RESET(u8PinNumber);
 8000796:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800079a:	685b      	ldr	r3, [r3, #4]
 800079c:	4619      	mov	r1, r3
 800079e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007a2:	2201      	movs	r2, #1
 80007a4:	fa02 f303 	lsl.w	r3, r2, r3
 80007a8:	43db      	mvns	r3, r3
 80007aa:	ea01 0203 	and.w	r2, r1, r3
 80007ae:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80007b2:	605a      	str	r2, [r3, #4]
		GPIOA->OTYPER |= GPIO_OTYPER_SET(u8PinNumber, u8Typ);
 80007b4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80007b8:	685a      	ldr	r2, [r3, #4]
 80007ba:	88bb      	ldrh	r3, [r7, #4]
 80007bc:	f003 0101 	and.w	r1, r3, #1
 80007c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007c4:	fa01 f303 	lsl.w	r3, r1, r3
 80007c8:	f04f 4190 	mov.w	r1, #1207959552	@ 0x48000000
 80007cc:	4313      	orrs	r3, r2
 80007ce:	604b      	str	r3, [r1, #4]
		break;
 80007d0:	e034      	b.n	800083c <Hal_GPIO_vTyp+0xcc>
		GPIOB->OTYPER &= GPIO_OTYPER_RESET(u8PinNumber);
 80007d2:	4b1d      	ldr	r3, [pc, #116]	@ (8000848 <Hal_GPIO_vTyp+0xd8>)
 80007d4:	685b      	ldr	r3, [r3, #4]
 80007d6:	4619      	mov	r1, r3
 80007d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007dc:	2201      	movs	r2, #1
 80007de:	fa02 f303 	lsl.w	r3, r2, r3
 80007e2:	43db      	mvns	r3, r3
 80007e4:	ea01 0203 	and.w	r2, r1, r3
 80007e8:	4b17      	ldr	r3, [pc, #92]	@ (8000848 <Hal_GPIO_vTyp+0xd8>)
 80007ea:	605a      	str	r2, [r3, #4]
		GPIOB->OTYPER |= GPIO_OTYPER_SET(u8PinNumber, u8Typ);
 80007ec:	4b16      	ldr	r3, [pc, #88]	@ (8000848 <Hal_GPIO_vTyp+0xd8>)
 80007ee:	685a      	ldr	r2, [r3, #4]
 80007f0:	88bb      	ldrh	r3, [r7, #4]
 80007f2:	f003 0101 	and.w	r1, r3, #1
 80007f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007fa:	fa01 f303 	lsl.w	r3, r1, r3
 80007fe:	4912      	ldr	r1, [pc, #72]	@ (8000848 <Hal_GPIO_vTyp+0xd8>)
 8000800:	4313      	orrs	r3, r2
 8000802:	604b      	str	r3, [r1, #4]
		break;
 8000804:	e01a      	b.n	800083c <Hal_GPIO_vTyp+0xcc>
		GPIOC->OTYPER &= GPIO_OTYPER_RESET(u8PinNumber);
 8000806:	4b11      	ldr	r3, [pc, #68]	@ (800084c <Hal_GPIO_vTyp+0xdc>)
 8000808:	685b      	ldr	r3, [r3, #4]
 800080a:	4619      	mov	r1, r3
 800080c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000810:	2201      	movs	r2, #1
 8000812:	fa02 f303 	lsl.w	r3, r2, r3
 8000816:	43db      	mvns	r3, r3
 8000818:	ea01 0203 	and.w	r2, r1, r3
 800081c:	4b0b      	ldr	r3, [pc, #44]	@ (800084c <Hal_GPIO_vTyp+0xdc>)
 800081e:	605a      	str	r2, [r3, #4]
		GPIOC->OTYPER |= GPIO_OTYPER_SET(u8PinNumber, u8Typ);
 8000820:	4b0a      	ldr	r3, [pc, #40]	@ (800084c <Hal_GPIO_vTyp+0xdc>)
 8000822:	685a      	ldr	r2, [r3, #4]
 8000824:	88bb      	ldrh	r3, [r7, #4]
 8000826:	f003 0101 	and.w	r1, r3, #1
 800082a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800082e:	fa01 f303 	lsl.w	r3, r1, r3
 8000832:	4906      	ldr	r1, [pc, #24]	@ (800084c <Hal_GPIO_vTyp+0xdc>)
 8000834:	4313      	orrs	r3, r2
 8000836:	604b      	str	r3, [r1, #4]
		break;
 8000838:	e000      	b.n	800083c <Hal_GPIO_vTyp+0xcc>
		break;
 800083a:	bf00      	nop
	}
}
 800083c:	bf00      	nop
 800083e:	370c      	adds	r7, #12
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr
 8000848:	48000400 	.word	0x48000400
 800084c:	48000800 	.word	0x48000800

08000850 <Hal_GPIO_vPullUpPullDown>:
	GPIOA->OSPEEDR |= GPIO_OPSPEED_RESET(u8PinNumber);
	GPIOA->OSPEEDR |= GPIO_OPSPEED_SET(u8OutputSpeed, u8PinNumber);
}

void Hal_GPIO_vPullUpPullDown(short u8PinNumber, short u8PullUpPullDown, GPIO_X gpio)
{
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
 8000856:	4603      	mov	r3, r0
 8000858:	80fb      	strh	r3, [r7, #6]
 800085a:	460b      	mov	r3, r1
 800085c:	80bb      	strh	r3, [r7, #4]
 800085e:	4613      	mov	r3, r2
 8000860:	70fb      	strb	r3, [r7, #3]
	switch(gpio)
 8000862:	78fb      	ldrb	r3, [r7, #3]
 8000864:	2b02      	cmp	r3, #2
 8000866:	d03c      	beq.n	80008e2 <Hal_GPIO_vPullUpPullDown+0x92>
 8000868:	2b02      	cmp	r3, #2
 800086a:	dc53      	bgt.n	8000914 <Hal_GPIO_vPullUpPullDown+0xc4>
 800086c:	2b00      	cmp	r3, #0
 800086e:	d002      	beq.n	8000876 <Hal_GPIO_vPullUpPullDown+0x26>
 8000870:	2b01      	cmp	r3, #1
 8000872:	d01d      	beq.n	80008b0 <Hal_GPIO_vPullUpPullDown+0x60>

	case GPIO_D:
	case GPIO_E:
	case GPIO_H:
	default:
		break;
 8000874:	e04e      	b.n	8000914 <Hal_GPIO_vPullUpPullDown+0xc4>
		GPIOA->PUPDR &= GPIO_PUPD_RESET(u8PinNumber);
 8000876:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800087a:	68db      	ldr	r3, [r3, #12]
 800087c:	4619      	mov	r1, r3
 800087e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000882:	2201      	movs	r2, #1
 8000884:	fa02 f303 	lsl.w	r3, r2, r3
 8000888:	43db      	mvns	r3, r3
 800088a:	ea01 0203 	and.w	r2, r1, r3
 800088e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000892:	60da      	str	r2, [r3, #12]
		GPIOA->PUPDR |= GPIO_PUPD_SET(u8PullUpPullDown, u8PinNumber);
 8000894:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000898:	68da      	ldr	r2, [r3, #12]
 800089a:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800089e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80008a2:	fa01 f303 	lsl.w	r3, r1, r3
 80008a6:	f04f 4190 	mov.w	r1, #1207959552	@ 0x48000000
 80008aa:	4313      	orrs	r3, r2
 80008ac:	60cb      	str	r3, [r1, #12]
		break;
 80008ae:	e032      	b.n	8000916 <Hal_GPIO_vPullUpPullDown+0xc6>
		GPIOB->PUPDR &= GPIO_PUPD_RESET(u8PinNumber);
 80008b0:	4b1c      	ldr	r3, [pc, #112]	@ (8000924 <Hal_GPIO_vPullUpPullDown+0xd4>)
 80008b2:	68db      	ldr	r3, [r3, #12]
 80008b4:	4619      	mov	r1, r3
 80008b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80008ba:	2201      	movs	r2, #1
 80008bc:	fa02 f303 	lsl.w	r3, r2, r3
 80008c0:	43db      	mvns	r3, r3
 80008c2:	ea01 0203 	and.w	r2, r1, r3
 80008c6:	4b17      	ldr	r3, [pc, #92]	@ (8000924 <Hal_GPIO_vPullUpPullDown+0xd4>)
 80008c8:	60da      	str	r2, [r3, #12]
		GPIOB->PUPDR |= GPIO_PUPD_SET(u8PullUpPullDown, u8PinNumber);
 80008ca:	4b16      	ldr	r3, [pc, #88]	@ (8000924 <Hal_GPIO_vPullUpPullDown+0xd4>)
 80008cc:	68da      	ldr	r2, [r3, #12]
 80008ce:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80008d2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80008d6:	fa01 f303 	lsl.w	r3, r1, r3
 80008da:	4912      	ldr	r1, [pc, #72]	@ (8000924 <Hal_GPIO_vPullUpPullDown+0xd4>)
 80008dc:	4313      	orrs	r3, r2
 80008de:	60cb      	str	r3, [r1, #12]
		break;
 80008e0:	e019      	b.n	8000916 <Hal_GPIO_vPullUpPullDown+0xc6>
		GPIOC->PUPDR &= GPIO_PUPD_RESET(u8PinNumber);
 80008e2:	4b11      	ldr	r3, [pc, #68]	@ (8000928 <Hal_GPIO_vPullUpPullDown+0xd8>)
 80008e4:	68db      	ldr	r3, [r3, #12]
 80008e6:	4619      	mov	r1, r3
 80008e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80008ec:	2201      	movs	r2, #1
 80008ee:	fa02 f303 	lsl.w	r3, r2, r3
 80008f2:	43db      	mvns	r3, r3
 80008f4:	ea01 0203 	and.w	r2, r1, r3
 80008f8:	4b0b      	ldr	r3, [pc, #44]	@ (8000928 <Hal_GPIO_vPullUpPullDown+0xd8>)
 80008fa:	60da      	str	r2, [r3, #12]
		GPIOC->PUPDR |= GPIO_PUPD_SET(u8PullUpPullDown, u8PinNumber);
 80008fc:	4b0a      	ldr	r3, [pc, #40]	@ (8000928 <Hal_GPIO_vPullUpPullDown+0xd8>)
 80008fe:	68da      	ldr	r2, [r3, #12]
 8000900:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000904:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000908:	fa01 f303 	lsl.w	r3, r1, r3
 800090c:	4906      	ldr	r1, [pc, #24]	@ (8000928 <Hal_GPIO_vPullUpPullDown+0xd8>)
 800090e:	4313      	orrs	r3, r2
 8000910:	60cb      	str	r3, [r1, #12]
		break;
 8000912:	e000      	b.n	8000916 <Hal_GPIO_vPullUpPullDown+0xc6>
		break;
 8000914:	bf00      	nop
	}
}
 8000916:	bf00      	nop
 8000918:	370c      	adds	r7, #12
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	48000400 	.word	0x48000400
 8000928:	48000800 	.word	0x48000800

0800092c <Hal_GPIO_vOutputEnable>:

void Hal_GPIO_vOutputEnable(short u8PinNumber, GPIO_X gpio)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	4603      	mov	r3, r0
 8000934:	460a      	mov	r2, r1
 8000936:	80fb      	strh	r3, [r7, #6]
 8000938:	4613      	mov	r3, r2
 800093a:	717b      	strb	r3, [r7, #5]
	switch(gpio)
 800093c:	797b      	ldrb	r3, [r7, #5]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d002      	beq.n	8000948 <Hal_GPIO_vOutputEnable+0x1c>
 8000942:	2b01      	cmp	r3, #1
 8000944:	d009      	beq.n	800095a <Hal_GPIO_vOutputEnable+0x2e>

	case GPIO_D:
	case GPIO_E:
	case GPIO_H:
	default:
		break;
 8000946:	e010      	b.n	800096a <Hal_GPIO_vOutputEnable+0x3e>
		GPIOA->BSRR = GPIO_BSSR_SET(u8PinNumber, GPIO_PIN_EN);
 8000948:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800094c:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000950:	2101      	movs	r1, #1
 8000952:	fa01 f303 	lsl.w	r3, r1, r3
 8000956:	6193      	str	r3, [r2, #24]
		break;
 8000958:	e007      	b.n	800096a <Hal_GPIO_vOutputEnable+0x3e>
		GPIOB->BSRR = GPIO_BSSR_SET(u8PinNumber, GPIO_PIN_EN);
 800095a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800095e:	4a06      	ldr	r2, [pc, #24]	@ (8000978 <Hal_GPIO_vOutputEnable+0x4c>)
 8000960:	2101      	movs	r1, #1
 8000962:	fa01 f303 	lsl.w	r3, r1, r3
 8000966:	6193      	str	r3, [r2, #24]
		break;
 8000968:	bf00      	nop
	}
}
 800096a:	bf00      	nop
 800096c:	370c      	adds	r7, #12
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	48000400 	.word	0x48000400

0800097c <Hal_GPIO_vOutputToggle>:

void Hal_GPIO_vOutputToggle(short u8PinNumber, GPIO_X gpio)
{
 800097c:	b480      	push	{r7}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
 8000982:	4603      	mov	r3, r0
 8000984:	460a      	mov	r2, r1
 8000986:	80fb      	strh	r3, [r7, #6]
 8000988:	4613      	mov	r3, r2
 800098a:	717b      	strb	r3, [r7, #5]
	switch(gpio)
 800098c:	797b      	ldrb	r3, [r7, #5]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d002      	beq.n	8000998 <Hal_GPIO_vOutputToggle+0x1c>
 8000992:	2b01      	cmp	r3, #1
 8000994:	d008      	beq.n	80009a8 <Hal_GPIO_vOutputToggle+0x2c>

	case GPIO_D:
	case GPIO_E:
	case GPIO_H:
	default:
		break;
 8000996:	e00d      	b.n	80009b4 <Hal_GPIO_vOutputToggle+0x38>
		GPIOA->BSRR = ~(GPIOA->ODR);
 8000998:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800099c:	695b      	ldr	r3, [r3, #20]
 800099e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80009a2:	43db      	mvns	r3, r3
 80009a4:	6193      	str	r3, [r2, #24]
		break;
 80009a6:	e005      	b.n	80009b4 <Hal_GPIO_vOutputToggle+0x38>
		GPIOB->BSRR = ~(GPIOB->ODR);
 80009a8:	4b05      	ldr	r3, [pc, #20]	@ (80009c0 <Hal_GPIO_vOutputToggle+0x44>)
 80009aa:	695b      	ldr	r3, [r3, #20]
 80009ac:	4a04      	ldr	r2, [pc, #16]	@ (80009c0 <Hal_GPIO_vOutputToggle+0x44>)
 80009ae:	43db      	mvns	r3, r3
 80009b0:	6193      	str	r3, [r2, #24]
		break;
 80009b2:	bf00      	nop
	}
}
 80009b4:	bf00      	nop
 80009b6:	370c      	adds	r7, #12
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr
 80009c0:	48000400 	.word	0x48000400

080009c4 <Config_vSetupGPIO>:

void Config_vSetupGPIO(uint8_t u8Pin, uint8_t u8PinType, uint8_t u8Typ, uint8_t u8PuPd, GPIO_X gpio)
{
 80009c4:	b590      	push	{r4, r7, lr}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	4604      	mov	r4, r0
 80009cc:	4608      	mov	r0, r1
 80009ce:	4611      	mov	r1, r2
 80009d0:	461a      	mov	r2, r3
 80009d2:	4623      	mov	r3, r4
 80009d4:	71fb      	strb	r3, [r7, #7]
 80009d6:	4603      	mov	r3, r0
 80009d8:	71bb      	strb	r3, [r7, #6]
 80009da:	460b      	mov	r3, r1
 80009dc:	717b      	strb	r3, [r7, #5]
 80009de:	4613      	mov	r3, r2
 80009e0:	713b      	strb	r3, [r7, #4]
	Hal_GPIO_vEnable(u8Pin, u8PinType, gpio);
 80009e2:	79fb      	ldrb	r3, [r7, #7]
 80009e4:	b21b      	sxth	r3, r3
 80009e6:	7e3a      	ldrb	r2, [r7, #24]
 80009e8:	79b9      	ldrb	r1, [r7, #6]
 80009ea:	4618      	mov	r0, r3
 80009ec:	f7ff fe44 	bl	8000678 <Hal_GPIO_vEnable>
	Hal_GPIO_vTyp(u8Pin, u8Typ, gpio);
 80009f0:	79fb      	ldrb	r3, [r7, #7]
 80009f2:	b21b      	sxth	r3, r3
 80009f4:	797a      	ldrb	r2, [r7, #5]
 80009f6:	b211      	sxth	r1, r2
 80009f8:	7e3a      	ldrb	r2, [r7, #24]
 80009fa:	4618      	mov	r0, r3
 80009fc:	f7ff feb8 	bl	8000770 <Hal_GPIO_vTyp>
	Hal_GPIO_vPullUpPullDown(u8Pin, u8PuPd, gpio);
 8000a00:	79fb      	ldrb	r3, [r7, #7]
 8000a02:	b21b      	sxth	r3, r3
 8000a04:	793a      	ldrb	r2, [r7, #4]
 8000a06:	b211      	sxth	r1, r2
 8000a08:	7e3a      	ldrb	r2, [r7, #24]
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f7ff ff20 	bl	8000850 <Hal_GPIO_vPullUpPullDown>
}
 8000a10:	bf00      	nop
 8000a12:	370c      	adds	r7, #12
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd90      	pop	{r4, r7, pc}

08000a18 <Hal_GPIO_vSetupAlternateFunction>:

void Hal_GPIO_vSetupAlternateFunction(uint8_t u8Pin, uint8_t u8AltFunc, GPIO_X gpio)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	4603      	mov	r3, r0
 8000a20:	71fb      	strb	r3, [r7, #7]
 8000a22:	460b      	mov	r3, r1
 8000a24:	71bb      	strb	r3, [r7, #6]
 8000a26:	4613      	mov	r3, r2
 8000a28:	717b      	strb	r3, [r7, #5]
	switch (gpio){
 8000a2a:	797b      	ldrb	r3, [r7, #5]
 8000a2c:	2b05      	cmp	r3, #5
 8000a2e:	f200 8131 	bhi.w	8000c94 <Hal_GPIO_vSetupAlternateFunction+0x27c>
 8000a32:	a201      	add	r2, pc, #4	@ (adr r2, 8000a38 <Hal_GPIO_vSetupAlternateFunction+0x20>)
 8000a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a38:	08000a51 	.word	0x08000a51
 8000a3c:	08000abf 	.word	0x08000abf
 8000a40:	08000b1d 	.word	0x08000b1d
 8000a44:	08000b7b 	.word	0x08000b7b
 8000a48:	08000bd9 	.word	0x08000bd9
 8000a4c:	08000c37 	.word	0x08000c37
		case GPIO_A:
			if (u8Pin <= 7)
 8000a50:	79fb      	ldrb	r3, [r7, #7]
 8000a52:	2b07      	cmp	r3, #7
 8000a54:	d819      	bhi.n	8000a8a <Hal_GPIO_vSetupAlternateFunction+0x72>
			{
			    GPIOA->AFRL &= ~(0xF << (u8Pin*4));
 8000a56:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000a5a:	6a1a      	ldr	r2, [r3, #32]
 8000a5c:	79fb      	ldrb	r3, [r7, #7]
 8000a5e:	009b      	lsls	r3, r3, #2
 8000a60:	210f      	movs	r1, #15
 8000a62:	fa01 f303 	lsl.w	r3, r1, r3
 8000a66:	43db      	mvns	r3, r3
 8000a68:	f04f 4190 	mov.w	r1, #1207959552	@ 0x48000000
 8000a6c:	4013      	ands	r3, r2
 8000a6e:	620b      	str	r3, [r1, #32]
			    GPIOA->AFRL |=  (u8AltFunc << (u8Pin*4));
 8000a70:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000a74:	6a1a      	ldr	r2, [r3, #32]
 8000a76:	79b9      	ldrb	r1, [r7, #6]
 8000a78:	79fb      	ldrb	r3, [r7, #7]
 8000a7a:	009b      	lsls	r3, r3, #2
 8000a7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a80:	f04f 4190 	mov.w	r1, #1207959552	@ 0x48000000
 8000a84:	4313      	orrs	r3, r2
 8000a86:	620b      	str	r3, [r1, #32]
			else
			{
			    GPIOA->AFRH &= ~(0xF << (u8Pin*4));
			    GPIOA->AFRL |=  (u8AltFunc << (u8Pin*4));
			}
			break;
 8000a88:	e105      	b.n	8000c96 <Hal_GPIO_vSetupAlternateFunction+0x27e>
			    GPIOA->AFRH &= ~(0xF << (u8Pin*4));
 8000a8a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000a8e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000a90:	79fb      	ldrb	r3, [r7, #7]
 8000a92:	009b      	lsls	r3, r3, #2
 8000a94:	210f      	movs	r1, #15
 8000a96:	fa01 f303 	lsl.w	r3, r1, r3
 8000a9a:	43db      	mvns	r3, r3
 8000a9c:	f04f 4190 	mov.w	r1, #1207959552	@ 0x48000000
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	624b      	str	r3, [r1, #36]	@ 0x24
			    GPIOA->AFRL |=  (u8AltFunc << (u8Pin*4));
 8000aa4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000aa8:	6a1a      	ldr	r2, [r3, #32]
 8000aaa:	79b9      	ldrb	r1, [r7, #6]
 8000aac:	79fb      	ldrb	r3, [r7, #7]
 8000aae:	009b      	lsls	r3, r3, #2
 8000ab0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ab4:	f04f 4190 	mov.w	r1, #1207959552	@ 0x48000000
 8000ab8:	4313      	orrs	r3, r2
 8000aba:	620b      	str	r3, [r1, #32]
			break;
 8000abc:	e0eb      	b.n	8000c96 <Hal_GPIO_vSetupAlternateFunction+0x27e>

		case GPIO_B:
			if (u8Pin <= 7)
 8000abe:	79fb      	ldrb	r3, [r7, #7]
 8000ac0:	2b07      	cmp	r3, #7
 8000ac2:	d815      	bhi.n	8000af0 <Hal_GPIO_vSetupAlternateFunction+0xd8>
			{
			    GPIOB->AFRL &= ~(0xF << (u8Pin*4));
 8000ac4:	4b77      	ldr	r3, [pc, #476]	@ (8000ca4 <Hal_GPIO_vSetupAlternateFunction+0x28c>)
 8000ac6:	6a1a      	ldr	r2, [r3, #32]
 8000ac8:	79fb      	ldrb	r3, [r7, #7]
 8000aca:	009b      	lsls	r3, r3, #2
 8000acc:	210f      	movs	r1, #15
 8000ace:	fa01 f303 	lsl.w	r3, r1, r3
 8000ad2:	43db      	mvns	r3, r3
 8000ad4:	4973      	ldr	r1, [pc, #460]	@ (8000ca4 <Hal_GPIO_vSetupAlternateFunction+0x28c>)
 8000ad6:	4013      	ands	r3, r2
 8000ad8:	620b      	str	r3, [r1, #32]
			    GPIOB->AFRL |=  (u8AltFunc << (u8Pin*4));
 8000ada:	4b72      	ldr	r3, [pc, #456]	@ (8000ca4 <Hal_GPIO_vSetupAlternateFunction+0x28c>)
 8000adc:	6a1a      	ldr	r2, [r3, #32]
 8000ade:	79b9      	ldrb	r1, [r7, #6]
 8000ae0:	79fb      	ldrb	r3, [r7, #7]
 8000ae2:	009b      	lsls	r3, r3, #2
 8000ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae8:	496e      	ldr	r1, [pc, #440]	@ (8000ca4 <Hal_GPIO_vSetupAlternateFunction+0x28c>)
 8000aea:	4313      	orrs	r3, r2
 8000aec:	620b      	str	r3, [r1, #32]
			else
			{
			    GPIOB->AFRH &= ~(0xF << (u8Pin*4));
			    GPIOB->AFRL |=  (u8AltFunc << (u8Pin*4));
			}
			break;
 8000aee:	e0d2      	b.n	8000c96 <Hal_GPIO_vSetupAlternateFunction+0x27e>
			    GPIOB->AFRH &= ~(0xF << (u8Pin*4));
 8000af0:	4b6c      	ldr	r3, [pc, #432]	@ (8000ca4 <Hal_GPIO_vSetupAlternateFunction+0x28c>)
 8000af2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000af4:	79fb      	ldrb	r3, [r7, #7]
 8000af6:	009b      	lsls	r3, r3, #2
 8000af8:	210f      	movs	r1, #15
 8000afa:	fa01 f303 	lsl.w	r3, r1, r3
 8000afe:	43db      	mvns	r3, r3
 8000b00:	4968      	ldr	r1, [pc, #416]	@ (8000ca4 <Hal_GPIO_vSetupAlternateFunction+0x28c>)
 8000b02:	4013      	ands	r3, r2
 8000b04:	624b      	str	r3, [r1, #36]	@ 0x24
			    GPIOB->AFRL |=  (u8AltFunc << (u8Pin*4));
 8000b06:	4b67      	ldr	r3, [pc, #412]	@ (8000ca4 <Hal_GPIO_vSetupAlternateFunction+0x28c>)
 8000b08:	6a1a      	ldr	r2, [r3, #32]
 8000b0a:	79b9      	ldrb	r1, [r7, #6]
 8000b0c:	79fb      	ldrb	r3, [r7, #7]
 8000b0e:	009b      	lsls	r3, r3, #2
 8000b10:	fa01 f303 	lsl.w	r3, r1, r3
 8000b14:	4963      	ldr	r1, [pc, #396]	@ (8000ca4 <Hal_GPIO_vSetupAlternateFunction+0x28c>)
 8000b16:	4313      	orrs	r3, r2
 8000b18:	620b      	str	r3, [r1, #32]
			break;
 8000b1a:	e0bc      	b.n	8000c96 <Hal_GPIO_vSetupAlternateFunction+0x27e>

		case GPIO_C:
			if (u8Pin <= 7)
 8000b1c:	79fb      	ldrb	r3, [r7, #7]
 8000b1e:	2b07      	cmp	r3, #7
 8000b20:	d815      	bhi.n	8000b4e <Hal_GPIO_vSetupAlternateFunction+0x136>
			{
			    GPIOC->AFRL &= ~(0xF << (u8Pin*4));  // Clear AFR for PB9
 8000b22:	4b61      	ldr	r3, [pc, #388]	@ (8000ca8 <Hal_GPIO_vSetupAlternateFunction+0x290>)
 8000b24:	6a1a      	ldr	r2, [r3, #32]
 8000b26:	79fb      	ldrb	r3, [r7, #7]
 8000b28:	009b      	lsls	r3, r3, #2
 8000b2a:	210f      	movs	r1, #15
 8000b2c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b30:	43db      	mvns	r3, r3
 8000b32:	495d      	ldr	r1, [pc, #372]	@ (8000ca8 <Hal_GPIO_vSetupAlternateFunction+0x290>)
 8000b34:	4013      	ands	r3, r2
 8000b36:	620b      	str	r3, [r1, #32]
			    GPIOC->AFRL |=  (u8AltFunc << (u8Pin*4));  // AF7 = USART3
 8000b38:	4b5b      	ldr	r3, [pc, #364]	@ (8000ca8 <Hal_GPIO_vSetupAlternateFunction+0x290>)
 8000b3a:	6a1a      	ldr	r2, [r3, #32]
 8000b3c:	79b9      	ldrb	r1, [r7, #6]
 8000b3e:	79fb      	ldrb	r3, [r7, #7]
 8000b40:	009b      	lsls	r3, r3, #2
 8000b42:	fa01 f303 	lsl.w	r3, r1, r3
 8000b46:	4958      	ldr	r1, [pc, #352]	@ (8000ca8 <Hal_GPIO_vSetupAlternateFunction+0x290>)
 8000b48:	4313      	orrs	r3, r2
 8000b4a:	620b      	str	r3, [r1, #32]
			else
			{
			    GPIOC->AFRH &= ~(0xF << (u8Pin*4));  // Clear AFR for PB9
			    GPIOC->AFRL |=  (u8AltFunc << (u8Pin*4));
			}
			break;
 8000b4c:	e0a3      	b.n	8000c96 <Hal_GPIO_vSetupAlternateFunction+0x27e>
			    GPIOC->AFRH &= ~(0xF << (u8Pin*4));  // Clear AFR for PB9
 8000b4e:	4b56      	ldr	r3, [pc, #344]	@ (8000ca8 <Hal_GPIO_vSetupAlternateFunction+0x290>)
 8000b50:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000b52:	79fb      	ldrb	r3, [r7, #7]
 8000b54:	009b      	lsls	r3, r3, #2
 8000b56:	210f      	movs	r1, #15
 8000b58:	fa01 f303 	lsl.w	r3, r1, r3
 8000b5c:	43db      	mvns	r3, r3
 8000b5e:	4952      	ldr	r1, [pc, #328]	@ (8000ca8 <Hal_GPIO_vSetupAlternateFunction+0x290>)
 8000b60:	4013      	ands	r3, r2
 8000b62:	624b      	str	r3, [r1, #36]	@ 0x24
			    GPIOC->AFRL |=  (u8AltFunc << (u8Pin*4));
 8000b64:	4b50      	ldr	r3, [pc, #320]	@ (8000ca8 <Hal_GPIO_vSetupAlternateFunction+0x290>)
 8000b66:	6a1a      	ldr	r2, [r3, #32]
 8000b68:	79b9      	ldrb	r1, [r7, #6]
 8000b6a:	79fb      	ldrb	r3, [r7, #7]
 8000b6c:	009b      	lsls	r3, r3, #2
 8000b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b72:	494d      	ldr	r1, [pc, #308]	@ (8000ca8 <Hal_GPIO_vSetupAlternateFunction+0x290>)
 8000b74:	4313      	orrs	r3, r2
 8000b76:	620b      	str	r3, [r1, #32]
			break;
 8000b78:	e08d      	b.n	8000c96 <Hal_GPIO_vSetupAlternateFunction+0x27e>

		case GPIO_D:
			if (u8Pin <= 7)
 8000b7a:	79fb      	ldrb	r3, [r7, #7]
 8000b7c:	2b07      	cmp	r3, #7
 8000b7e:	d815      	bhi.n	8000bac <Hal_GPIO_vSetupAlternateFunction+0x194>
			{
			    GPIOD->AFRL &= ~(0xF << (u8Pin*4));  // Clear AFR for PB9
 8000b80:	4b4a      	ldr	r3, [pc, #296]	@ (8000cac <Hal_GPIO_vSetupAlternateFunction+0x294>)
 8000b82:	6a1a      	ldr	r2, [r3, #32]
 8000b84:	79fb      	ldrb	r3, [r7, #7]
 8000b86:	009b      	lsls	r3, r3, #2
 8000b88:	210f      	movs	r1, #15
 8000b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b8e:	43db      	mvns	r3, r3
 8000b90:	4946      	ldr	r1, [pc, #280]	@ (8000cac <Hal_GPIO_vSetupAlternateFunction+0x294>)
 8000b92:	4013      	ands	r3, r2
 8000b94:	620b      	str	r3, [r1, #32]
			    GPIOD->AFRL |=  (u8AltFunc << (u8Pin*4));  // AF7 = USART3
 8000b96:	4b45      	ldr	r3, [pc, #276]	@ (8000cac <Hal_GPIO_vSetupAlternateFunction+0x294>)
 8000b98:	6a1a      	ldr	r2, [r3, #32]
 8000b9a:	79b9      	ldrb	r1, [r7, #6]
 8000b9c:	79fb      	ldrb	r3, [r7, #7]
 8000b9e:	009b      	lsls	r3, r3, #2
 8000ba0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba4:	4941      	ldr	r1, [pc, #260]	@ (8000cac <Hal_GPIO_vSetupAlternateFunction+0x294>)
 8000ba6:	4313      	orrs	r3, r2
 8000ba8:	620b      	str	r3, [r1, #32]
			else
			{
			    GPIOD->AFRH &= ~(0xF << (u8Pin*4));  // Clear AFR for PB9
			    GPIOD->AFRL |=  (u8AltFunc << (u8Pin*4));
			}
			break;
 8000baa:	e074      	b.n	8000c96 <Hal_GPIO_vSetupAlternateFunction+0x27e>
			    GPIOD->AFRH &= ~(0xF << (u8Pin*4));  // Clear AFR for PB9
 8000bac:	4b3f      	ldr	r3, [pc, #252]	@ (8000cac <Hal_GPIO_vSetupAlternateFunction+0x294>)
 8000bae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000bb0:	79fb      	ldrb	r3, [r7, #7]
 8000bb2:	009b      	lsls	r3, r3, #2
 8000bb4:	210f      	movs	r1, #15
 8000bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bba:	43db      	mvns	r3, r3
 8000bbc:	493b      	ldr	r1, [pc, #236]	@ (8000cac <Hal_GPIO_vSetupAlternateFunction+0x294>)
 8000bbe:	4013      	ands	r3, r2
 8000bc0:	624b      	str	r3, [r1, #36]	@ 0x24
			    GPIOD->AFRL |=  (u8AltFunc << (u8Pin*4));
 8000bc2:	4b3a      	ldr	r3, [pc, #232]	@ (8000cac <Hal_GPIO_vSetupAlternateFunction+0x294>)
 8000bc4:	6a1a      	ldr	r2, [r3, #32]
 8000bc6:	79b9      	ldrb	r1, [r7, #6]
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
 8000bca:	009b      	lsls	r3, r3, #2
 8000bcc:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd0:	4936      	ldr	r1, [pc, #216]	@ (8000cac <Hal_GPIO_vSetupAlternateFunction+0x294>)
 8000bd2:	4313      	orrs	r3, r2
 8000bd4:	620b      	str	r3, [r1, #32]
			break;
 8000bd6:	e05e      	b.n	8000c96 <Hal_GPIO_vSetupAlternateFunction+0x27e>

		case GPIO_E:
			if (u8Pin <= 7)
 8000bd8:	79fb      	ldrb	r3, [r7, #7]
 8000bda:	2b07      	cmp	r3, #7
 8000bdc:	d815      	bhi.n	8000c0a <Hal_GPIO_vSetupAlternateFunction+0x1f2>
			{
			    GPIOE->AFRL &= ~(0xF << (u8Pin*4));  // Clear AFR for PB9
 8000bde:	4b34      	ldr	r3, [pc, #208]	@ (8000cb0 <Hal_GPIO_vSetupAlternateFunction+0x298>)
 8000be0:	6a1a      	ldr	r2, [r3, #32]
 8000be2:	79fb      	ldrb	r3, [r7, #7]
 8000be4:	009b      	lsls	r3, r3, #2
 8000be6:	210f      	movs	r1, #15
 8000be8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bec:	43db      	mvns	r3, r3
 8000bee:	4930      	ldr	r1, [pc, #192]	@ (8000cb0 <Hal_GPIO_vSetupAlternateFunction+0x298>)
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	620b      	str	r3, [r1, #32]
			    GPIOE->AFRL |=  (u8AltFunc << (u8Pin*4));  // AF7 = USART3
 8000bf4:	4b2e      	ldr	r3, [pc, #184]	@ (8000cb0 <Hal_GPIO_vSetupAlternateFunction+0x298>)
 8000bf6:	6a1a      	ldr	r2, [r3, #32]
 8000bf8:	79b9      	ldrb	r1, [r7, #6]
 8000bfa:	79fb      	ldrb	r3, [r7, #7]
 8000bfc:	009b      	lsls	r3, r3, #2
 8000bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8000c02:	492b      	ldr	r1, [pc, #172]	@ (8000cb0 <Hal_GPIO_vSetupAlternateFunction+0x298>)
 8000c04:	4313      	orrs	r3, r2
 8000c06:	620b      	str	r3, [r1, #32]
			else
			{
			    GPIOE->AFRH &= ~(0xF << (u8Pin*4));  // Clear AFR for PB9
			    GPIOE->AFRL |=  (u8AltFunc << (u8Pin*4));
			}
			break;
 8000c08:	e045      	b.n	8000c96 <Hal_GPIO_vSetupAlternateFunction+0x27e>
			    GPIOE->AFRH &= ~(0xF << (u8Pin*4));  // Clear AFR for PB9
 8000c0a:	4b29      	ldr	r3, [pc, #164]	@ (8000cb0 <Hal_GPIO_vSetupAlternateFunction+0x298>)
 8000c0c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000c0e:	79fb      	ldrb	r3, [r7, #7]
 8000c10:	009b      	lsls	r3, r3, #2
 8000c12:	210f      	movs	r1, #15
 8000c14:	fa01 f303 	lsl.w	r3, r1, r3
 8000c18:	43db      	mvns	r3, r3
 8000c1a:	4925      	ldr	r1, [pc, #148]	@ (8000cb0 <Hal_GPIO_vSetupAlternateFunction+0x298>)
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	624b      	str	r3, [r1, #36]	@ 0x24
			    GPIOE->AFRL |=  (u8AltFunc << (u8Pin*4));
 8000c20:	4b23      	ldr	r3, [pc, #140]	@ (8000cb0 <Hal_GPIO_vSetupAlternateFunction+0x298>)
 8000c22:	6a1a      	ldr	r2, [r3, #32]
 8000c24:	79b9      	ldrb	r1, [r7, #6]
 8000c26:	79fb      	ldrb	r3, [r7, #7]
 8000c28:	009b      	lsls	r3, r3, #2
 8000c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c2e:	4920      	ldr	r1, [pc, #128]	@ (8000cb0 <Hal_GPIO_vSetupAlternateFunction+0x298>)
 8000c30:	4313      	orrs	r3, r2
 8000c32:	620b      	str	r3, [r1, #32]
			break;
 8000c34:	e02f      	b.n	8000c96 <Hal_GPIO_vSetupAlternateFunction+0x27e>

		case GPIO_H:
			if (u8Pin <= 7)
 8000c36:	79fb      	ldrb	r3, [r7, #7]
 8000c38:	2b07      	cmp	r3, #7
 8000c3a:	d815      	bhi.n	8000c68 <Hal_GPIO_vSetupAlternateFunction+0x250>
			{
			    GPIOH->AFRL &= ~(0xF << (u8Pin*4));  // Clear AFR for PB9
 8000c3c:	4b1d      	ldr	r3, [pc, #116]	@ (8000cb4 <Hal_GPIO_vSetupAlternateFunction+0x29c>)
 8000c3e:	6a1a      	ldr	r2, [r3, #32]
 8000c40:	79fb      	ldrb	r3, [r7, #7]
 8000c42:	009b      	lsls	r3, r3, #2
 8000c44:	210f      	movs	r1, #15
 8000c46:	fa01 f303 	lsl.w	r3, r1, r3
 8000c4a:	43db      	mvns	r3, r3
 8000c4c:	4919      	ldr	r1, [pc, #100]	@ (8000cb4 <Hal_GPIO_vSetupAlternateFunction+0x29c>)
 8000c4e:	4013      	ands	r3, r2
 8000c50:	620b      	str	r3, [r1, #32]
			    GPIOH->AFRL |=  (u8AltFunc << (u8Pin*4));  // AF7 = USART3
 8000c52:	4b18      	ldr	r3, [pc, #96]	@ (8000cb4 <Hal_GPIO_vSetupAlternateFunction+0x29c>)
 8000c54:	6a1a      	ldr	r2, [r3, #32]
 8000c56:	79b9      	ldrb	r1, [r7, #6]
 8000c58:	79fb      	ldrb	r3, [r7, #7]
 8000c5a:	009b      	lsls	r3, r3, #2
 8000c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c60:	4914      	ldr	r1, [pc, #80]	@ (8000cb4 <Hal_GPIO_vSetupAlternateFunction+0x29c>)
 8000c62:	4313      	orrs	r3, r2
 8000c64:	620b      	str	r3, [r1, #32]
			else
			{
			    GPIOH->AFRH &= ~(0xF << (u8Pin*4));  // Clear AFR for PB9
			    GPIOH->AFRL |=  (u8AltFunc << (u8Pin*4));
			}
			break;
 8000c66:	e016      	b.n	8000c96 <Hal_GPIO_vSetupAlternateFunction+0x27e>
			    GPIOH->AFRH &= ~(0xF << (u8Pin*4));  // Clear AFR for PB9
 8000c68:	4b12      	ldr	r3, [pc, #72]	@ (8000cb4 <Hal_GPIO_vSetupAlternateFunction+0x29c>)
 8000c6a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000c6c:	79fb      	ldrb	r3, [r7, #7]
 8000c6e:	009b      	lsls	r3, r3, #2
 8000c70:	210f      	movs	r1, #15
 8000c72:	fa01 f303 	lsl.w	r3, r1, r3
 8000c76:	43db      	mvns	r3, r3
 8000c78:	490e      	ldr	r1, [pc, #56]	@ (8000cb4 <Hal_GPIO_vSetupAlternateFunction+0x29c>)
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	624b      	str	r3, [r1, #36]	@ 0x24
			    GPIOH->AFRL |=  (u8AltFunc << (u8Pin*4));
 8000c7e:	4b0d      	ldr	r3, [pc, #52]	@ (8000cb4 <Hal_GPIO_vSetupAlternateFunction+0x29c>)
 8000c80:	6a1a      	ldr	r2, [r3, #32]
 8000c82:	79b9      	ldrb	r1, [r7, #6]
 8000c84:	79fb      	ldrb	r3, [r7, #7]
 8000c86:	009b      	lsls	r3, r3, #2
 8000c88:	fa01 f303 	lsl.w	r3, r1, r3
 8000c8c:	4909      	ldr	r1, [pc, #36]	@ (8000cb4 <Hal_GPIO_vSetupAlternateFunction+0x29c>)
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	620b      	str	r3, [r1, #32]
			break;
 8000c92:	e000      	b.n	8000c96 <Hal_GPIO_vSetupAlternateFunction+0x27e>

		default:

			break;
 8000c94:	bf00      	nop
	}
}
 8000c96:	bf00      	nop
 8000c98:	370c      	adds	r7, #12
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	48000400 	.word	0x48000400
 8000ca8:	48000800 	.word	0x48000800
 8000cac:	48000c00 	.word	0x48000c00
 8000cb0:	48001000 	.word	0x48001000
 8000cb4:	48001400 	.word	0x48001400

08000cb8 <Hal_I2C_vInitMaster>:
		{0xF8, 0x14, 0x12, 0x11, 0x11, 0x12, 0x14, 0xF8}
};

/* Configure the CR2 register for master transmission */
void Hal_I2C_vInitMaster(uint8_t address)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	71fb      	strb	r3, [r7, #7]
	I2C1->TIMINGR |= (0x1 < 28);		// PRESC
 8000cc2:	4b1f      	ldr	r3, [pc, #124]	@ (8000d40 <Hal_I2C_vInitMaster+0x88>)
 8000cc4:	691b      	ldr	r3, [r3, #16]
 8000cc6:	4a1e      	ldr	r2, [pc, #120]	@ (8000d40 <Hal_I2C_vInitMaster+0x88>)
 8000cc8:	f043 0301 	orr.w	r3, r3, #1
 8000ccc:	6113      	str	r3, [r2, #16]
	I2C1->TIMINGR |= (0x4 < 20);		// SCLDEL
 8000cce:	4b1c      	ldr	r3, [pc, #112]	@ (8000d40 <Hal_I2C_vInitMaster+0x88>)
 8000cd0:	691b      	ldr	r3, [r3, #16]
 8000cd2:	4a1b      	ldr	r2, [pc, #108]	@ (8000d40 <Hal_I2C_vInitMaster+0x88>)
 8000cd4:	f043 0301 	orr.w	r3, r3, #1
 8000cd8:	6113      	str	r3, [r2, #16]
	I2C1->TIMINGR |= (0x2 < 26);		// SDADEL
 8000cda:	4b19      	ldr	r3, [pc, #100]	@ (8000d40 <Hal_I2C_vInitMaster+0x88>)
 8000cdc:	691b      	ldr	r3, [r3, #16]
 8000cde:	4a18      	ldr	r2, [pc, #96]	@ (8000d40 <Hal_I2C_vInitMaster+0x88>)
 8000ce0:	f043 0301 	orr.w	r3, r3, #1
 8000ce4:	6113      	str	r3, [r2, #16]
	I2C1->TIMINGR |= (0xF < 8);			// SCLH
 8000ce6:	4b16      	ldr	r3, [pc, #88]	@ (8000d40 <Hal_I2C_vInitMaster+0x88>)
 8000ce8:	4a15      	ldr	r2, [pc, #84]	@ (8000d40 <Hal_I2C_vInitMaster+0x88>)
 8000cea:	691b      	ldr	r3, [r3, #16]
 8000cec:	6113      	str	r3, [r2, #16]
	I2C1->TIMINGR |= (0x13 < 0);		// SCLL
 8000cee:	4b14      	ldr	r3, [pc, #80]	@ (8000d40 <Hal_I2C_vInitMaster+0x88>)
 8000cf0:	4a13      	ldr	r2, [pc, #76]	@ (8000d40 <Hal_I2C_vInitMaster+0x88>)
 8000cf2:	691b      	ldr	r3, [r3, #16]
 8000cf4:	6113      	str	r3, [r2, #16]

	I2C1->CR2 |= (address << 1); // Set the slave address
 8000cf6:	4b12      	ldr	r3, [pc, #72]	@ (8000d40 <Hal_I2C_vInitMaster+0x88>)
 8000cf8:	685a      	ldr	r2, [r3, #4]
 8000cfa:	79fb      	ldrb	r3, [r7, #7]
 8000cfc:	005b      	lsls	r3, r3, #1
 8000cfe:	4910      	ldr	r1, [pc, #64]	@ (8000d40 <Hal_I2C_vInitMaster+0x88>)
 8000d00:	4313      	orrs	r3, r2
 8000d02:	604b      	str	r3, [r1, #4]
	I2C1->CR2 &= ~(1U << 10);	// Master request write transfer
 8000d04:	4b0e      	ldr	r3, [pc, #56]	@ (8000d40 <Hal_I2C_vInitMaster+0x88>)
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	4a0d      	ldr	r2, [pc, #52]	@ (8000d40 <Hal_I2C_vInitMaster+0x88>)
 8000d0a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000d0e:	6053      	str	r3, [r2, #4]
	I2C1->CR2 &= ~(1U << 11);	// 7bit addressing
 8000d10:	4b0b      	ldr	r3, [pc, #44]	@ (8000d40 <Hal_I2C_vInitMaster+0x88>)
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	4a0a      	ldr	r2, [pc, #40]	@ (8000d40 <Hal_I2C_vInitMaster+0x88>)
 8000d16:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000d1a:	6053      	str	r3, [r2, #4]
	I2C1->CR2 |= (8 << 16); 	// 8 bytes to send
 8000d1c:	4b08      	ldr	r3, [pc, #32]	@ (8000d40 <Hal_I2C_vInitMaster+0x88>)
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	4a07      	ldr	r2, [pc, #28]	@ (8000d40 <Hal_I2C_vInitMaster+0x88>)
 8000d22:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000d26:	6053      	str	r3, [r2, #4]

	I2C1->CR1 |= (1U << 0);  // Enable peripheral
 8000d28:	4b05      	ldr	r3, [pc, #20]	@ (8000d40 <Hal_I2C_vInitMaster+0x88>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a04      	ldr	r2, [pc, #16]	@ (8000d40 <Hal_I2C_vInitMaster+0x88>)
 8000d2e:	f043 0301 	orr.w	r3, r3, #1
 8000d32:	6013      	str	r3, [r2, #0]
}
 8000d34:	bf00      	nop
 8000d36:	370c      	adds	r7, #12
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr
 8000d40:	40005400 	.word	0x40005400

08000d44 <Hal_I2C_vWriteCommand>:

void Hal_I2C_vWriteCommand(uint8_t addr, uint8_t cmd)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	460a      	mov	r2, r1
 8000d4e:	71fb      	strb	r3, [r7, #7]
 8000d50:	4613      	mov	r3, r2
 8000d52:	71bb      	strb	r3, [r7, #6]
    // Clear previous settings
    I2C1->CR2 = 0;
 8000d54:	4b1b      	ldr	r3, [pc, #108]	@ (8000dc4 <Hal_I2C_vWriteCommand+0x80>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	605a      	str	r2, [r3, #4]

    // Set slave address (bits [7:1]) and number of bytes (bits [23:16])
    I2C1->CR2 = ((addr << 1) & 0xFE) | (2 << 16); // 2 bytes (control + data)
 8000d5a:	79fb      	ldrb	r3, [r7, #7]
 8000d5c:	005b      	lsls	r3, r3, #1
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000d64:	4b17      	ldr	r3, [pc, #92]	@ (8000dc4 <Hal_I2C_vWriteCommand+0x80>)
 8000d66:	605a      	str	r2, [r3, #4]

    // Set START bit (bit 13)
    I2C1->CR2 |= (1U << 13);
 8000d68:	4b16      	ldr	r3, [pc, #88]	@ (8000dc4 <Hal_I2C_vWriteCommand+0x80>)
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	4a15      	ldr	r2, [pc, #84]	@ (8000dc4 <Hal_I2C_vWriteCommand+0x80>)
 8000d6e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000d72:	6053      	str	r3, [r2, #4]

    // Wait until TXIS (bit 1 of ISR) is set — ready to transmit
    while (!(I2C1->ISR & (1U << 1)));
 8000d74:	bf00      	nop
 8000d76:	4b13      	ldr	r3, [pc, #76]	@ (8000dc4 <Hal_I2C_vWriteCommand+0x80>)
 8000d78:	699b      	ldr	r3, [r3, #24]
 8000d7a:	f003 0302 	and.w	r3, r3, #2
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d0f9      	beq.n	8000d76 <Hal_I2C_vWriteCommand+0x32>

    // Send control byte (0x00 = command)
    I2C1->TXDR = 0x00;
 8000d82:	4b10      	ldr	r3, [pc, #64]	@ (8000dc4 <Hal_I2C_vWriteCommand+0x80>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	629a      	str	r2, [r3, #40]	@ 0x28

    // Wait for next TXIS
    while (!(I2C1->ISR & (1U << 1)));
 8000d88:	bf00      	nop
 8000d8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000dc4 <Hal_I2C_vWriteCommand+0x80>)
 8000d8c:	699b      	ldr	r3, [r3, #24]
 8000d8e:	f003 0302 	and.w	r3, r3, #2
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d0f9      	beq.n	8000d8a <Hal_I2C_vWriteCommand+0x46>

    // Send actual command byte
    I2C1->TXDR = cmd;
 8000d96:	4a0b      	ldr	r2, [pc, #44]	@ (8000dc4 <Hal_I2C_vWriteCommand+0x80>)
 8000d98:	79bb      	ldrb	r3, [r7, #6]
 8000d9a:	6293      	str	r3, [r2, #40]	@ 0x28

    // Wait until TC (bit 6 of ISR) = Transfer Complete
    while (!(I2C1->ISR & (1U << 6)));
 8000d9c:	bf00      	nop
 8000d9e:	4b09      	ldr	r3, [pc, #36]	@ (8000dc4 <Hal_I2C_vWriteCommand+0x80>)
 8000da0:	699b      	ldr	r3, [r3, #24]
 8000da2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d0f9      	beq.n	8000d9e <Hal_I2C_vWriteCommand+0x5a>

    // Set STOP (bit 14 of CR2)
    I2C1->CR2 |= (1U << 14);
 8000daa:	4b06      	ldr	r3, [pc, #24]	@ (8000dc4 <Hal_I2C_vWriteCommand+0x80>)
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	4a05      	ldr	r2, [pc, #20]	@ (8000dc4 <Hal_I2C_vWriteCommand+0x80>)
 8000db0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000db4:	6053      	str	r3, [r2, #4]
}
 8000db6:	bf00      	nop
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	40005400 	.word	0x40005400

08000dc8 <SSD1306_vInit>:

void SSD1306_vInit(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
    Hal_I2C_vWriteCommand(OLED, 0xAE); // Display off
 8000dcc:	21ae      	movs	r1, #174	@ 0xae
 8000dce:	203c      	movs	r0, #60	@ 0x3c
 8000dd0:	f7ff ffb8 	bl	8000d44 <Hal_I2C_vWriteCommand>
    Hal_I2C_vWriteCommand(OLED, 0xD5); Hal_I2C_vWriteCommand(OLED, 0x80); // Clock divide
 8000dd4:	21d5      	movs	r1, #213	@ 0xd5
 8000dd6:	203c      	movs	r0, #60	@ 0x3c
 8000dd8:	f7ff ffb4 	bl	8000d44 <Hal_I2C_vWriteCommand>
 8000ddc:	2180      	movs	r1, #128	@ 0x80
 8000dde:	203c      	movs	r0, #60	@ 0x3c
 8000de0:	f7ff ffb0 	bl	8000d44 <Hal_I2C_vWriteCommand>
    Hal_I2C_vWriteCommand(OLED, 0xA8); Hal_I2C_vWriteCommand(OLED, 0x1F); // Multiplex = 32
 8000de4:	21a8      	movs	r1, #168	@ 0xa8
 8000de6:	203c      	movs	r0, #60	@ 0x3c
 8000de8:	f7ff ffac 	bl	8000d44 <Hal_I2C_vWriteCommand>
 8000dec:	211f      	movs	r1, #31
 8000dee:	203c      	movs	r0, #60	@ 0x3c
 8000df0:	f7ff ffa8 	bl	8000d44 <Hal_I2C_vWriteCommand>
    Hal_I2C_vWriteCommand(OLED, 0xD3); Hal_I2C_vWriteCommand(OLED, 0x00); // Offset
 8000df4:	21d3      	movs	r1, #211	@ 0xd3
 8000df6:	203c      	movs	r0, #60	@ 0x3c
 8000df8:	f7ff ffa4 	bl	8000d44 <Hal_I2C_vWriteCommand>
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	203c      	movs	r0, #60	@ 0x3c
 8000e00:	f7ff ffa0 	bl	8000d44 <Hal_I2C_vWriteCommand>
    Hal_I2C_vWriteCommand(OLED, 0x40); // Start line
 8000e04:	2140      	movs	r1, #64	@ 0x40
 8000e06:	203c      	movs	r0, #60	@ 0x3c
 8000e08:	f7ff ff9c 	bl	8000d44 <Hal_I2C_vWriteCommand>
    Hal_I2C_vWriteCommand(OLED, 0x8D); Hal_I2C_vWriteCommand(OLED, 0x14); // Charge pump on
 8000e0c:	218d      	movs	r1, #141	@ 0x8d
 8000e0e:	203c      	movs	r0, #60	@ 0x3c
 8000e10:	f7ff ff98 	bl	8000d44 <Hal_I2C_vWriteCommand>
 8000e14:	2114      	movs	r1, #20
 8000e16:	203c      	movs	r0, #60	@ 0x3c
 8000e18:	f7ff ff94 	bl	8000d44 <Hal_I2C_vWriteCommand>
    Hal_I2C_vWriteCommand(OLED, 0x20); Hal_I2C_vWriteCommand(OLED, 0x00); // Horizontal addressing
 8000e1c:	2120      	movs	r1, #32
 8000e1e:	203c      	movs	r0, #60	@ 0x3c
 8000e20:	f7ff ff90 	bl	8000d44 <Hal_I2C_vWriteCommand>
 8000e24:	2100      	movs	r1, #0
 8000e26:	203c      	movs	r0, #60	@ 0x3c
 8000e28:	f7ff ff8c 	bl	8000d44 <Hal_I2C_vWriteCommand>
    Hal_I2C_vWriteCommand(OLED, 0xA1); // Segment remap
 8000e2c:	21a1      	movs	r1, #161	@ 0xa1
 8000e2e:	203c      	movs	r0, #60	@ 0x3c
 8000e30:	f7ff ff88 	bl	8000d44 <Hal_I2C_vWriteCommand>
    Hal_I2C_vWriteCommand(OLED, 0xC8); // COM scan direction
 8000e34:	21c8      	movs	r1, #200	@ 0xc8
 8000e36:	203c      	movs	r0, #60	@ 0x3c
 8000e38:	f7ff ff84 	bl	8000d44 <Hal_I2C_vWriteCommand>
    Hal_I2C_vWriteCommand(OLED, 0xDA); Hal_I2C_vWriteCommand(OLED, 0x02); // COM config
 8000e3c:	21da      	movs	r1, #218	@ 0xda
 8000e3e:	203c      	movs	r0, #60	@ 0x3c
 8000e40:	f7ff ff80 	bl	8000d44 <Hal_I2C_vWriteCommand>
 8000e44:	2102      	movs	r1, #2
 8000e46:	203c      	movs	r0, #60	@ 0x3c
 8000e48:	f7ff ff7c 	bl	8000d44 <Hal_I2C_vWriteCommand>
    Hal_I2C_vWriteCommand(OLED, 0x81); Hal_I2C_vWriteCommand(OLED, 0x8F); // Contrast
 8000e4c:	2181      	movs	r1, #129	@ 0x81
 8000e4e:	203c      	movs	r0, #60	@ 0x3c
 8000e50:	f7ff ff78 	bl	8000d44 <Hal_I2C_vWriteCommand>
 8000e54:	218f      	movs	r1, #143	@ 0x8f
 8000e56:	203c      	movs	r0, #60	@ 0x3c
 8000e58:	f7ff ff74 	bl	8000d44 <Hal_I2C_vWriteCommand>
    Hal_I2C_vWriteCommand(OLED, 0xD9); Hal_I2C_vWriteCommand(OLED, 0xF1); // Precharge
 8000e5c:	21d9      	movs	r1, #217	@ 0xd9
 8000e5e:	203c      	movs	r0, #60	@ 0x3c
 8000e60:	f7ff ff70 	bl	8000d44 <Hal_I2C_vWriteCommand>
 8000e64:	21f1      	movs	r1, #241	@ 0xf1
 8000e66:	203c      	movs	r0, #60	@ 0x3c
 8000e68:	f7ff ff6c 	bl	8000d44 <Hal_I2C_vWriteCommand>
    Hal_I2C_vWriteCommand(OLED, 0xDB); Hal_I2C_vWriteCommand(OLED, 0x40); // VCOM detect
 8000e6c:	21db      	movs	r1, #219	@ 0xdb
 8000e6e:	203c      	movs	r0, #60	@ 0x3c
 8000e70:	f7ff ff68 	bl	8000d44 <Hal_I2C_vWriteCommand>
 8000e74:	2140      	movs	r1, #64	@ 0x40
 8000e76:	203c      	movs	r0, #60	@ 0x3c
 8000e78:	f7ff ff64 	bl	8000d44 <Hal_I2C_vWriteCommand>
    Hal_I2C_vWriteCommand(OLED, 0xA4); // Resume RAM content
 8000e7c:	21a4      	movs	r1, #164	@ 0xa4
 8000e7e:	203c      	movs	r0, #60	@ 0x3c
 8000e80:	f7ff ff60 	bl	8000d44 <Hal_I2C_vWriteCommand>
    Hal_I2C_vWriteCommand(OLED, 0xA6); // Normal display
 8000e84:	21a6      	movs	r1, #166	@ 0xa6
 8000e86:	203c      	movs	r0, #60	@ 0x3c
 8000e88:	f7ff ff5c 	bl	8000d44 <Hal_I2C_vWriteCommand>
    Hal_I2C_vWriteCommand(OLED, 0xAF); // Display ON
 8000e8c:	21af      	movs	r1, #175	@ 0xaf
 8000e8e:	203c      	movs	r0, #60	@ 0x3c
 8000e90:	f7ff ff58 	bl	8000d44 <Hal_I2C_vWriteCommand>
}
 8000e94:	bf00      	nop
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <SSD1306_vWriteData>:

void SSD1306_vWriteData(uint8_t addr, uint8_t data)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	460a      	mov	r2, r1
 8000ea2:	71fb      	strb	r3, [r7, #7]
 8000ea4:	4613      	mov	r3, r2
 8000ea6:	71bb      	strb	r3, [r7, #6]
    // Clear previous transfer settings
    I2C1->CR2 = 0;
 8000ea8:	4b1b      	ldr	r3, [pc, #108]	@ (8000f18 <SSD1306_vWriteData+0x80>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	605a      	str	r2, [r3, #4]

    // Set slave address and number of bytes to send (2 bytes: control + data)
    I2C1->CR2 = ((addr << 1) & 0xFE) | (2 << 16); // 7-bit address, write mode
 8000eae:	79fb      	ldrb	r3, [r7, #7]
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000eb8:	4b17      	ldr	r3, [pc, #92]	@ (8000f18 <SSD1306_vWriteData+0x80>)
 8000eba:	605a      	str	r2, [r3, #4]

    // Start the transmission
    I2C1->CR2 |= (1U << 13); // START
 8000ebc:	4b16      	ldr	r3, [pc, #88]	@ (8000f18 <SSD1306_vWriteData+0x80>)
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	4a15      	ldr	r2, [pc, #84]	@ (8000f18 <SSD1306_vWriteData+0x80>)
 8000ec2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000ec6:	6053      	str	r3, [r2, #4]

    // Wait for TXIS (ready to transmit)
    while (!(I2C1->ISR & (1U << 1)));
 8000ec8:	bf00      	nop
 8000eca:	4b13      	ldr	r3, [pc, #76]	@ (8000f18 <SSD1306_vWriteData+0x80>)
 8000ecc:	699b      	ldr	r3, [r3, #24]
 8000ece:	f003 0302 	and.w	r3, r3, #2
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d0f9      	beq.n	8000eca <SSD1306_vWriteData+0x32>

    // Send control byte: 0x40 indicates "data" follows
    I2C1->TXDR = 0x40;
 8000ed6:	4b10      	ldr	r3, [pc, #64]	@ (8000f18 <SSD1306_vWriteData+0x80>)
 8000ed8:	2240      	movs	r2, #64	@ 0x40
 8000eda:	629a      	str	r2, [r3, #40]	@ 0x28

    // Wait for TXIS again
    while (!(I2C1->ISR & (1U << 1)));
 8000edc:	bf00      	nop
 8000ede:	4b0e      	ldr	r3, [pc, #56]	@ (8000f18 <SSD1306_vWriteData+0x80>)
 8000ee0:	699b      	ldr	r3, [r3, #24]
 8000ee2:	f003 0302 	and.w	r3, r3, #2
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d0f9      	beq.n	8000ede <SSD1306_vWriteData+0x46>

    // Send actual data byte
    I2C1->TXDR = data;
 8000eea:	4a0b      	ldr	r2, [pc, #44]	@ (8000f18 <SSD1306_vWriteData+0x80>)
 8000eec:	79bb      	ldrb	r3, [r7, #6]
 8000eee:	6293      	str	r3, [r2, #40]	@ 0x28

    // Wait until transfer is complete
    while (!(I2C1->ISR & (1U << 6))); // TC
 8000ef0:	bf00      	nop
 8000ef2:	4b09      	ldr	r3, [pc, #36]	@ (8000f18 <SSD1306_vWriteData+0x80>)
 8000ef4:	699b      	ldr	r3, [r3, #24]
 8000ef6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d0f9      	beq.n	8000ef2 <SSD1306_vWriteData+0x5a>

    // Send STOP condition
    I2C1->CR2 |= (1U << 14);
 8000efe:	4b06      	ldr	r3, [pc, #24]	@ (8000f18 <SSD1306_vWriteData+0x80>)
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	4a05      	ldr	r2, [pc, #20]	@ (8000f18 <SSD1306_vWriteData+0x80>)
 8000f04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f08:	6053      	str	r3, [r2, #4]
}
 8000f0a:	bf00      	nop
 8000f0c:	370c      	adds	r7, #12
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	40005400 	.word	0x40005400

08000f1c <SSD1306_vSendCommandBlock>:

void SSD1306_vSendCommandBlock(uint8_t page, uint8_t columnLow, uint8_t columnHigh)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	71fb      	strb	r3, [r7, #7]
 8000f26:	460b      	mov	r3, r1
 8000f28:	71bb      	strb	r3, [r7, #6]
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	717b      	strb	r3, [r7, #5]
    Hal_I2C_vWriteCommand(OLED, 0xB0 | (page & 0x03));     // Page address
 8000f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f32:	f003 0303 	and.w	r3, r3, #3
 8000f36:	b25b      	sxtb	r3, r3
 8000f38:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 8000f3c:	b25b      	sxtb	r3, r3
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	4619      	mov	r1, r3
 8000f42:	203c      	movs	r0, #60	@ 0x3c
 8000f44:	f7ff fefe 	bl	8000d44 <Hal_I2C_vWriteCommand>
    Hal_I2C_vWriteCommand(OLED, 0x00 | (columnLow & 0x0F)); // Lower column
 8000f48:	79bb      	ldrb	r3, [r7, #6]
 8000f4a:	f003 030f 	and.w	r3, r3, #15
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	4619      	mov	r1, r3
 8000f52:	203c      	movs	r0, #60	@ 0x3c
 8000f54:	f7ff fef6 	bl	8000d44 <Hal_I2C_vWriteCommand>
    Hal_I2C_vWriteCommand(OLED, 0x10 | (columnHigh & 0x0F)); // Upper column
 8000f58:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000f5c:	f003 030f 	and.w	r3, r3, #15
 8000f60:	b25b      	sxtb	r3, r3
 8000f62:	f043 0310 	orr.w	r3, r3, #16
 8000f66:	b25b      	sxtb	r3, r3
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	203c      	movs	r0, #60	@ 0x3c
 8000f6e:	f7ff fee9 	bl	8000d44 <Hal_I2C_vWriteCommand>
}
 8000f72:	bf00      	nop
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <SSD1306_vSendData>:

void SSD1306_vSendData(uint8_t data)
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b082      	sub	sp, #8
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	4603      	mov	r3, r0
 8000f82:	71fb      	strb	r3, [r7, #7]
	// Send the data
	SSD1306_vWriteData(OLED, data);
 8000f84:	79fb      	ldrb	r3, [r7, #7]
 8000f86:	4619      	mov	r1, r3
 8000f88:	203c      	movs	r0, #60	@ 0x3c
 8000f8a:	f7ff ff85 	bl	8000e98 <SSD1306_vWriteData>
}
 8000f8e:	bf00      	nop
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <SSD1306_vResetDisplay>:

void SSD1306_vResetDisplay(void)
{
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b084      	sub	sp, #16
 8000f9a:	af00      	add	r7, sp, #0
    for (int k = 0; k < 4; k++)
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	60fb      	str	r3, [r7, #12]
 8000fa0:	e020      	b.n	8000fe4 <SSD1306_vResetDisplay+0x4e>
    {
        for (int i = 0; i<128; i++)
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60bb      	str	r3, [r7, #8]
 8000fa6:	e017      	b.n	8000fd8 <SSD1306_vResetDisplay+0x42>
        {
        	uint8_t lower = (i & 0x0F);
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	f003 030f 	and.w	r3, r3, #15
 8000fb0:	71fb      	strb	r3, [r7, #7]
        	uint8_t upper = ((i >> 4) & 0x0F);
 8000fb2:	68bb      	ldr	r3, [r7, #8]
 8000fb4:	111b      	asrs	r3, r3, #4
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	f003 030f 	and.w	r3, r3, #15
 8000fbc:	71bb      	strb	r3, [r7, #6]
            SSD1306_vSendCommandBlock(k, lower, upper);
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	79ba      	ldrb	r2, [r7, #6]
 8000fc4:	79f9      	ldrb	r1, [r7, #7]
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f7ff ffa8 	bl	8000f1c <SSD1306_vSendCommandBlock>
            SSD1306_vSendData(0x00);
 8000fcc:	2000      	movs	r0, #0
 8000fce:	f7ff ffd4 	bl	8000f7a <SSD1306_vSendData>
        for (int i = 0; i<128; i++)
 8000fd2:	68bb      	ldr	r3, [r7, #8]
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	60bb      	str	r3, [r7, #8]
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	2b7f      	cmp	r3, #127	@ 0x7f
 8000fdc:	dde4      	ble.n	8000fa8 <SSD1306_vResetDisplay+0x12>
    for (int k = 0; k < 4; k++)
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	2b03      	cmp	r3, #3
 8000fe8:	dddb      	ble.n	8000fa2 <SSD1306_vResetDisplay+0xc>
        }
    }
}
 8000fea:	bf00      	nop
 8000fec:	bf00      	nop
 8000fee:	3710      	adds	r7, #16
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <Hal_SPI_vInitReceiver>:


#include "hal_spi.h"

void Hal_SPI_vInitReceiver(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
	SPI3->CR1 &= ~(0x7 << 3); // Baudrate: clock/2
 8000ff8:	4b1a      	ldr	r3, [pc, #104]	@ (8001064 <Hal_SPI_vInitReceiver+0x70>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a19      	ldr	r2, [pc, #100]	@ (8001064 <Hal_SPI_vInitReceiver+0x70>)
 8000ffe:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8001002:	6013      	str	r3, [r2, #0]
	SPI3->CR1 |= (1U << 0)	  // Second clock is first data capture and clock to 1 when idle
 8001004:	4b17      	ldr	r3, [pc, #92]	@ (8001064 <Hal_SPI_vInitReceiver+0x70>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a16      	ldr	r2, [pc, #88]	@ (8001064 <Hal_SPI_vInitReceiver+0x70>)
 800100a:	f043 0303 	orr.w	r3, r3, #3
 800100e:	6013      	str	r3, [r2, #0]
			| (1U << 1);
	SPI3->CR1 &= ~(1U << 2);  // Clear MSTR bit → Set slave mode
 8001010:	4b14      	ldr	r3, [pc, #80]	@ (8001064 <Hal_SPI_vInitReceiver+0x70>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a13      	ldr	r2, [pc, #76]	@ (8001064 <Hal_SPI_vInitReceiver+0x70>)
 8001016:	f023 0304 	bic.w	r3, r3, #4
 800101a:	6013      	str	r3, [r2, #0]
	SPI3->CR1 &= ~(1U << 7);  // Use MSB first (standard)
 800101c:	4b11      	ldr	r3, [pc, #68]	@ (8001064 <Hal_SPI_vInitReceiver+0x70>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a10      	ldr	r2, [pc, #64]	@ (8001064 <Hal_SPI_vInitReceiver+0x70>)
 8001022:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001026:	6013      	str	r3, [r2, #0]
	SPI3->CR1 &= ~(1U << 11);  // 8-bit data
 8001028:	4b0e      	ldr	r3, [pc, #56]	@ (8001064 <Hal_SPI_vInitReceiver+0x70>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a0d      	ldr	r2, [pc, #52]	@ (8001064 <Hal_SPI_vInitReceiver+0x70>)
 800102e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001032:	6013      	str	r3, [r2, #0]

	SPI3->CR1 &= ~(1U << 8);  // SSM = 0
 8001034:	4b0b      	ldr	r3, [pc, #44]	@ (8001064 <Hal_SPI_vInitReceiver+0x70>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a0a      	ldr	r2, [pc, #40]	@ (8001064 <Hal_SPI_vInitReceiver+0x70>)
 800103a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800103e:	6013      	str	r3, [r2, #0]
	SPI3->CR1 |= (1U << 9);   // SSI = 1 (drive NSS high internally)
 8001040:	4b08      	ldr	r3, [pc, #32]	@ (8001064 <Hal_SPI_vInitReceiver+0x70>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a07      	ldr	r2, [pc, #28]	@ (8001064 <Hal_SPI_vInitReceiver+0x70>)
 8001046:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800104a:	6013      	str	r3, [r2, #0]

    // Enable SPI
	SPI3->CR1 |= (1U << 6);  // SPE
 800104c:	4b05      	ldr	r3, [pc, #20]	@ (8001064 <Hal_SPI_vInitReceiver+0x70>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a04      	ldr	r2, [pc, #16]	@ (8001064 <Hal_SPI_vInitReceiver+0x70>)
 8001052:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001056:	6013      	str	r3, [r2, #0]
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	40003c00 	.word	0x40003c00

08001068 <Hal_vSPIStartReceive>:


uint16_t Hal_vSPIStartReceive(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
//    while (!(SPI3->SR & (1U << 0)));  // Wait for RXNE
    return (uint8_t)SPI3->DR;
 800106c:	4b03      	ldr	r3, [pc, #12]	@ (800107c <Hal_vSPIStartReceive+0x14>)
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	b2db      	uxtb	r3, r3
}
 8001072:	4618      	mov	r0, r3
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	40003c00 	.word	0x40003c00

08001080 <Hal_SysTick_vInit>:

#include "hal_systick.h"


void Hal_SysTick_vInit(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
	STK_LOAD = RELOAD_VAL;
 8001084:	4b07      	ldr	r3, [pc, #28]	@ (80010a4 <Hal_SysTick_vInit+0x24>)
 8001086:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 800108a:	601a      	str	r2, [r3, #0]
	STK_VAL = 0;
 800108c:	4b06      	ldr	r3, [pc, #24]	@ (80010a8 <Hal_SysTick_vInit+0x28>)
 800108e:	2200      	movs	r2, #0
 8001090:	601a      	str	r2, [r3, #0]
	STK_CTRL = CTRL_ENABLE | CTRL_TICKINT | CTRL_CLKSRC;
 8001092:	4b06      	ldr	r3, [pc, #24]	@ (80010ac <Hal_SysTick_vInit+0x2c>)
 8001094:	2207      	movs	r2, #7
 8001096:	601a      	str	r2, [r3, #0]
}
 8001098:	bf00      	nop
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	e000e014 	.word	0xe000e014
 80010a8:	e000e018 	.word	0xe000e018
 80010ac:	e000e010 	.word	0xe000e010

080010b0 <Hal_ButtonInterrupt_vInit>:

void Hal_ButtonInterrupt_vInit(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
	// Configure SYSCFG
	SYSCFG->EXTICR4 &= ~(0xF << 4);
 80010b4:	4b13      	ldr	r3, [pc, #76]	@ (8001104 <Hal_ButtonInterrupt_vInit+0x54>)
 80010b6:	695b      	ldr	r3, [r3, #20]
 80010b8:	4a12      	ldr	r2, [pc, #72]	@ (8001104 <Hal_ButtonInterrupt_vInit+0x54>)
 80010ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80010be:	6153      	str	r3, [r2, #20]
	SYSCFG->EXTICR4 |= (0x2 << 4);
 80010c0:	4b10      	ldr	r3, [pc, #64]	@ (8001104 <Hal_ButtonInterrupt_vInit+0x54>)
 80010c2:	695b      	ldr	r3, [r3, #20]
 80010c4:	4a0f      	ldr	r2, [pc, #60]	@ (8001104 <Hal_ButtonInterrupt_vInit+0x54>)
 80010c6:	f043 0320 	orr.w	r3, r3, #32
 80010ca:	6153      	str	r3, [r2, #20]
	// Configure EXTI13 line
    EXTI->IMR  |=  (1U << 13);         // Unmask interrupt
 80010cc:	4b0e      	ldr	r3, [pc, #56]	@ (8001108 <Hal_ButtonInterrupt_vInit+0x58>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001108 <Hal_ButtonInterrupt_vInit+0x58>)
 80010d2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80010d6:	6013      	str	r3, [r2, #0]
    EXTI->FTSR1 |=  (0U << 13);         // Falling edge trigger
 80010d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001108 <Hal_ButtonInterrupt_vInit+0x58>)
 80010da:	4a0b      	ldr	r2, [pc, #44]	@ (8001108 <Hal_ButtonInterrupt_vInit+0x58>)
 80010dc:	68db      	ldr	r3, [r3, #12]
 80010de:	60d3      	str	r3, [r2, #12]
    EXTI->RTSR1 |= (1U << 13);         // (optional) Disable rising edge
 80010e0:	4b09      	ldr	r3, [pc, #36]	@ (8001108 <Hal_ButtonInterrupt_vInit+0x58>)
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	4a08      	ldr	r2, [pc, #32]	@ (8001108 <Hal_ButtonInterrupt_vInit+0x58>)
 80010e6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80010ea:	6093      	str	r3, [r2, #8]

	// Configure NVIC
    NVIC_ISER1 |= (1U << (8));  // Enable IRQ 40 (EXTI15_10)
 80010ec:	4b07      	ldr	r3, [pc, #28]	@ (800110c <Hal_ButtonInterrupt_vInit+0x5c>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a06      	ldr	r2, [pc, #24]	@ (800110c <Hal_ButtonInterrupt_vInit+0x5c>)
 80010f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010f6:	6013      	str	r3, [r2, #0]
}
 80010f8:	bf00      	nop
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	40010000 	.word	0x40010000
 8001108:	40010400 	.word	0x40010400
 800110c:	e000e104 	.word	0xe000e104

08001110 <Hal_USART3_vInit>:
/*
 * USART 3 Tx Init
 */

void Hal_USART3_vInit(void)
{
 8001110:	b480      	push	{r7}
 8001112:	b085      	sub	sp, #20
 8001114:	af00      	add	r7, sp, #0
	/* USART2 configuration */
	USART3->CR1 &= ~(1U << 0);      // UE = 0 (disable)
 8001116:	4b20      	ldr	r3, [pc, #128]	@ (8001198 <Hal_USART3_vInit+0x88>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a1f      	ldr	r2, [pc, #124]	@ (8001198 <Hal_USART3_vInit+0x88>)
 800111c:	f023 0301 	bic.w	r3, r3, #1
 8001120:	6013      	str	r3, [r2, #0]
    USART3->CR1 &= ~(1U << 12);     // M = 0 (8-bit)
 8001122:	4b1d      	ldr	r3, [pc, #116]	@ (8001198 <Hal_USART3_vInit+0x88>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a1c      	ldr	r2, [pc, #112]	@ (8001198 <Hal_USART3_vInit+0x88>)
 8001128:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800112c:	6013      	str	r3, [r2, #0]
    USART3->CR1 &= ~(1U << 10);     // PCE = 0 (no parity)
 800112e:	4b1a      	ldr	r3, [pc, #104]	@ (8001198 <Hal_USART3_vInit+0x88>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a19      	ldr	r2, [pc, #100]	@ (8001198 <Hal_USART3_vInit+0x88>)
 8001134:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001138:	6013      	str	r3, [r2, #0]
    USART3->CR2 &= ~(3U << 12);     // STOP[1:0] = 00 (1 stop bit)
 800113a:	4b17      	ldr	r3, [pc, #92]	@ (8001198 <Hal_USART3_vInit+0x88>)
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	4a16      	ldr	r2, [pc, #88]	@ (8001198 <Hal_USART3_vInit+0x88>)
 8001140:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001144:	6053      	str	r3, [r2, #4]
    // Baud = 115200 @ PCLK2 = 16 MHz
    uint32_t u32PeriphClock = 8000000;
 8001146:	4b15      	ldr	r3, [pc, #84]	@ (800119c <Hal_USART3_vInit+0x8c>)
 8001148:	60fb      	str	r3, [r7, #12]
    uint32_t u32BaudRate = 115200;
 800114a:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800114e:	60bb      	str	r3, [r7, #8]
    uint16_t brr = (u32PeriphClock + (u32BaudRate/2))/u32BaudRate;
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	085a      	lsrs	r2, r3, #1
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	441a      	add	r2, r3
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	fbb2 f3f3 	udiv	r3, r2, r3
 800115e:	80fb      	strh	r3, [r7, #6]
    USART3->BRR = brr;
 8001160:	4a0d      	ldr	r2, [pc, #52]	@ (8001198 <Hal_USART3_vInit+0x88>)
 8001162:	88fb      	ldrh	r3, [r7, #6]
 8001164:	60d3      	str	r3, [r2, #12]

    // Enable DMA for transmit (DMAT)
    USART3->CR3 |= (1U << 7);
 8001166:	4b0c      	ldr	r3, [pc, #48]	@ (8001198 <Hal_USART3_vInit+0x88>)
 8001168:	689b      	ldr	r3, [r3, #8]
 800116a:	4a0b      	ldr	r2, [pc, #44]	@ (8001198 <Hal_USART3_vInit+0x88>)
 800116c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001170:	6093      	str	r3, [r2, #8]

    /* Transfer direction */
	USART3->CR1 |= (1U<<3);
 8001172:	4b09      	ldr	r3, [pc, #36]	@ (8001198 <Hal_USART3_vInit+0x88>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a08      	ldr	r2, [pc, #32]	@ (8001198 <Hal_USART3_vInit+0x88>)
 8001178:	f043 0308 	orr.w	r3, r3, #8
 800117c:	6013      	str	r3, [r2, #0]

    /* Enable the module */
    USART3->CR1 |= (1U << 0);   // UE = 1
 800117e:	4b06      	ldr	r3, [pc, #24]	@ (8001198 <Hal_USART3_vInit+0x88>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a05      	ldr	r2, [pc, #20]	@ (8001198 <Hal_USART3_vInit+0x88>)
 8001184:	f043 0301 	orr.w	r3, r3, #1
 8001188:	6013      	str	r3, [r2, #0]
}
 800118a:	bf00      	nop
 800118c:	3714      	adds	r7, #20
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	40004800 	.word	0x40004800
 800119c:	007a1200 	.word	0x007a1200

080011a0 <SysTick_Handler>:
 * Interrupt Handlers
 *********************************************************************************************************************************/

// SysTick interrupt
void SysTick_Handler(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
	volatile uint16_t dataSPI = Hal_vSPIStartReceive();
 80011a6:	f7ff ff5f 	bl	8001068 <Hal_vSPIStartReceive>
 80011aa:	4603      	mov	r3, r0
 80011ac:	80fb      	strh	r3, [r7, #6]
	if (dataSPI != 0)
 80011ae:	88fb      	ldrh	r3, [r7, #6]
 80011b0:	b29b      	uxth	r3, r3
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d003      	beq.n	80011be <SysTick_Handler+0x1e>
	{
        Hal_GPIO_vOutputToggle(5, GPIO_A);  // Your action
 80011b6:	2100      	movs	r1, #0
 80011b8:	2005      	movs	r0, #5
 80011ba:	f7ff fbdf 	bl	800097c <Hal_GPIO_vOutputToggle>
	}
	Hal_vEnableDMAChannel2();
 80011be:	f7ff fa1b 	bl	80005f8 <Hal_vEnableDMAChannel2>
	Hal_vEnableDMAChannel3();
 80011c2:	f7ff fa31 	bl	8000628 <Hal_vEnableDMAChannel3>
}
 80011c6:	bf00      	nop
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <PendSV_Handler>:

void PendSV_Handler()
{
 80011ce:	b480      	push	{r7}
 80011d0:	af00      	add	r7, sp, #0

}
 80011d2:	bf00      	nop
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr

080011dc <EXTI15_10_IRQHandler>:

// Button interrupt
void EXTI15_10_IRQHandler(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
    if (EXTI->PR1 & (1U << 13))  // Check if EXTI13 triggered
 80011e0:	4b09      	ldr	r3, [pc, #36]	@ (8001208 <EXTI15_10_IRQHandler+0x2c>)
 80011e2:	695b      	ldr	r3, [r3, #20]
 80011e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d00b      	beq.n	8001204 <EXTI15_10_IRQHandler+0x28>
    {
        EXTI->PR1 |= (1U << 13);  // Clear pending bit by writing 1
 80011ec:	4b06      	ldr	r3, [pc, #24]	@ (8001208 <EXTI15_10_IRQHandler+0x2c>)
 80011ee:	695b      	ldr	r3, [r3, #20]
 80011f0:	4a05      	ldr	r2, [pc, #20]	@ (8001208 <EXTI15_10_IRQHandler+0x2c>)
 80011f2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80011f6:	6153      	str	r3, [r2, #20]
        Hal_DMA1_vCorruptData();
 80011f8:	f7ff fa2e 	bl	8000658 <Hal_DMA1_vCorruptData>
        Hal_GPIO_vOutputToggle(5, GPIO_A);  // Your action
 80011fc:	2100      	movs	r1, #0
 80011fe:	2005      	movs	r0, #5
 8001200:	f7ff fbbc 	bl	800097c <Hal_GPIO_vOutputToggle>
    }
}
 8001204:	bf00      	nop
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40010400 	.word	0x40010400

0800120c <main>:
/*********************************************************************************************************************************
 * Main Function
 *********************************************************************************************************************************/

int main(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
	/* Activate all clocks which are needed */
	ClockDriver_vClockSelect();
 8001210:	f7ff f882 	bl	8000318 <ClockDriver_vClockSelect>

	// Activate all GPIOs needed
	Main_vSetupGPIOs();
 8001214:	f000 f81e 	bl	8001254 <Main_vSetupGPIOs>
	 * 	- USART3
	 * 	- DMA1
	 * 	- I2C1
	 * 	- ADC1
	 ***************************************************/
	Hal_GPIO_vOutputEnable(5, GPIO_A);  // Your action
 8001218:	2100      	movs	r1, #0
 800121a:	2005      	movs	r0, #5
 800121c:	f7ff fb86 	bl	800092c <Hal_GPIO_vOutputEnable>
	// USART3 Init
	Hal_USART3_vInit();
 8001220:	f7ff ff76 	bl	8001110 <Hal_USART3_vInit>

    // ADC1 Init
    Hal_ADC_vInit();
 8001224:	f7ff f8a8 	bl	8000378 <Hal_ADC_vInit>

	// DMA1 Init
	Hal_DMA_1_vInitChannel2();
 8001228:	f7ff f966 	bl	80004f8 <Hal_DMA_1_vInitChannel2>
	Hal_DMA_1_vInitChannel3();
 800122c:	f7ff f99c 	bl	8000568 <Hal_DMA_1_vInitChannel3>

	// I2C Init
    Hal_I2C_vInitMaster(OLED);
 8001230:	203c      	movs	r0, #60	@ 0x3c
 8001232:	f7ff fd41 	bl	8000cb8 <Hal_I2C_vInitMaster>

    // SPI Receiver Init
    Hal_SPI_vInitReceiver();
 8001236:	f7ff fedd 	bl	8000ff4 <Hal_SPI_vInitReceiver>

    // OLED SSD Init
    SSD1306_vInit();
 800123a:	f7ff fdc5 	bl	8000dc8 <SSD1306_vInit>
	/***************************************************
	 * Initial functions
	 ***************************************************/

    // Reset Display
    SSD1306_vResetDisplay();
 800123e:	f7ff feaa 	bl	8000f96 <SSD1306_vResetDisplay>

    // Start ADC1
    Hal_ADC_vStart();
 8001242:	f7ff f949 	bl	80004d8 <Hal_ADC_vStart>
	/***************************************************
	 * Activate the interrupts (system and peripherals)
	 ***************************************************/

    // Enable Button interrupt
    Hal_ButtonInterrupt_vInit();
 8001246:	f7ff ff33 	bl	80010b0 <Hal_ButtonInterrupt_vInit>

    // Enable SysTick interrupt
	Hal_SysTick_vInit();
 800124a:	f7ff ff19 	bl	8001080 <Hal_SysTick_vInit>


    while(1)
 800124e:	bf00      	nop
 8001250:	e7fd      	b.n	800124e <main+0x42>
	...

08001254 <Main_vSetupGPIOs>:
/*********************************************************************************************************************************
 * Main Functions
 *********************************************************************************************************************************/

void Main_vSetupGPIOs(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af02      	add	r7, sp, #8
	// Activate button at PC13
	Config_vSetupGPIO(13, GPIO_INPUT, GPIO_PUSHPULL, GPIO_PULLUP, GPIO_C);
 800125a:	2302      	movs	r3, #2
 800125c:	9300      	str	r3, [sp, #0]
 800125e:	2301      	movs	r3, #1
 8001260:	2200      	movs	r2, #0
 8001262:	2100      	movs	r1, #0
 8001264:	200d      	movs	r0, #13
 8001266:	f7ff fbad 	bl	80009c4 <Config_vSetupGPIO>

	// Set LED at GPIOA on Pin5 to output
	Config_vSetupGPIO(5, GPIO_OUTPUT, GPIO_PUSHPULL, GPIO_PULLUP, GPIO_A);
 800126a:	2300      	movs	r3, #0
 800126c:	9300      	str	r3, [sp, #0]
 800126e:	2301      	movs	r3, #1
 8001270:	2200      	movs	r2, #0
 8001272:	2101      	movs	r1, #1
 8001274:	2005      	movs	r0, #5
 8001276:	f7ff fba5 	bl	80009c4 <Config_vSetupGPIO>

	// Activate PB9 for USART3 Tx
//	Config_vSetupGPIO(9, GPIO_AF, GPIO_PUSHPULL, GPIO_PULLUP, GPIO_B);
//	Hal_GPIO_vSetupAlternateFunction(9, 7, GPIO_B);
	GPIOB->MODER &= ~(3U << 18);
 800127a:	4b66      	ldr	r3, [pc, #408]	@ (8001414 <Main_vSetupGPIOs+0x1c0>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a65      	ldr	r2, [pc, #404]	@ (8001414 <Main_vSetupGPIOs+0x1c0>)
 8001280:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 8001284:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1U << 19);
 8001286:	4b63      	ldr	r3, [pc, #396]	@ (8001414 <Main_vSetupGPIOs+0x1c0>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800128e:	4b61      	ldr	r3, [pc, #388]	@ (8001414 <Main_vSetupGPIOs+0x1c0>)
 8001290:	601a      	str	r2, [r3, #0]
	GPIOB->OTYPER &= ~(1U << 9);
 8001292:	4b60      	ldr	r3, [pc, #384]	@ (8001414 <Main_vSetupGPIOs+0x1c0>)
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	4a5f      	ldr	r2, [pc, #380]	@ (8001414 <Main_vSetupGPIOs+0x1c0>)
 8001298:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800129c:	6053      	str	r3, [r2, #4]
	GPIOB->PUPDR &= ~(3U << 18);
 800129e:	4b5d      	ldr	r3, [pc, #372]	@ (8001414 <Main_vSetupGPIOs+0x1c0>)
 80012a0:	68db      	ldr	r3, [r3, #12]
 80012a2:	4a5c      	ldr	r2, [pc, #368]	@ (8001414 <Main_vSetupGPIOs+0x1c0>)
 80012a4:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 80012a8:	60d3      	str	r3, [r2, #12]
	GPIOB->OSPEEDR &= ~(3U << 18);
 80012aa:	4b5a      	ldr	r3, [pc, #360]	@ (8001414 <Main_vSetupGPIOs+0x1c0>)
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	4a59      	ldr	r2, [pc, #356]	@ (8001414 <Main_vSetupGPIOs+0x1c0>)
 80012b0:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 80012b4:	6093      	str	r3, [r2, #8]
    GPIOB->AFRH &= ~(0xF << 4);  // Clear AFR for PB9
 80012b6:	4b57      	ldr	r3, [pc, #348]	@ (8001414 <Main_vSetupGPIOs+0x1c0>)
 80012b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012ba:	4a56      	ldr	r2, [pc, #344]	@ (8001414 <Main_vSetupGPIOs+0x1c0>)
 80012bc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80012c0:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOB->AFRH |=  (0x7 << 4);  // AF7 = USART3
 80012c2:	4b54      	ldr	r3, [pc, #336]	@ (8001414 <Main_vSetupGPIOs+0x1c0>)
 80012c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012c6:	4a53      	ldr	r2, [pc, #332]	@ (8001414 <Main_vSetupGPIOs+0x1c0>)
 80012c8:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 80012cc:	6253      	str	r3, [r2, #36]	@ 0x24

	/* Using PB6 SCL and PB7 SDA, because the other ones interfere with debug */
	Config_vSetupGPIO(6, GPIO_AF, GPIO_PUSHPULL, GPIO_PULLUP, GPIO_B);
 80012ce:	2301      	movs	r3, #1
 80012d0:	9300      	str	r3, [sp, #0]
 80012d2:	2301      	movs	r3, #1
 80012d4:	2200      	movs	r2, #0
 80012d6:	2102      	movs	r1, #2
 80012d8:	2006      	movs	r0, #6
 80012da:	f7ff fb73 	bl	80009c4 <Config_vSetupGPIO>
	Hal_GPIO_vSetupAlternateFunction(6, 4, GPIO_B);
 80012de:	2201      	movs	r2, #1
 80012e0:	2104      	movs	r1, #4
 80012e2:	2006      	movs	r0, #6
 80012e4:	f7ff fb98 	bl	8000a18 <Hal_GPIO_vSetupAlternateFunction>

	Config_vSetupGPIO(7, GPIO_AF, GPIO_PUSHPULL, GPIO_PULLUP, GPIO_B);
 80012e8:	2301      	movs	r3, #1
 80012ea:	9300      	str	r3, [sp, #0]
 80012ec:	2301      	movs	r3, #1
 80012ee:	2200      	movs	r2, #0
 80012f0:	2102      	movs	r1, #2
 80012f2:	2007      	movs	r0, #7
 80012f4:	f7ff fb66 	bl	80009c4 <Config_vSetupGPIO>
	Hal_GPIO_vSetupAlternateFunction(7, 4, GPIO_B);
 80012f8:	2201      	movs	r2, #1
 80012fa:	2104      	movs	r1, #4
 80012fc:	2007      	movs	r0, #7
 80012fe:	f7ff fb8b 	bl	8000a18 <Hal_GPIO_vSetupAlternateFunction>

    // Activate PA0 for the ADC as Analog input
	Config_vSetupGPIO(0, GPIO_ANALOG, GPIO_PUSHPULL, GPIO_NON, GPIO_A);
 8001302:	2300      	movs	r3, #0
 8001304:	9300      	str	r3, [sp, #0]
 8001306:	2300      	movs	r3, #0
 8001308:	2200      	movs	r2, #0
 800130a:	2103      	movs	r1, #3
 800130c:	2000      	movs	r0, #0
 800130e:	f7ff fb59 	bl	80009c4 <Config_vSetupGPIO>

	// PB3 SPI1 SCLK, PB4 SPI1 MISO, PB5 SPI1 MOSI -> AF5
	GPIOB->MODER &= ~(3U << 10);
 8001312:	4b40      	ldr	r3, [pc, #256]	@ (8001414 <Main_vSetupGPIOs+0x1c0>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a3f      	ldr	r2, [pc, #252]	@ (8001414 <Main_vSetupGPIOs+0x1c0>)
 8001318:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800131c:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1U << 11);
 800131e:	4b3d      	ldr	r3, [pc, #244]	@ (8001414 <Main_vSetupGPIOs+0x1c0>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8001326:	4b3b      	ldr	r3, [pc, #236]	@ (8001414 <Main_vSetupGPIOs+0x1c0>)
 8001328:	601a      	str	r2, [r3, #0]
	GPIOB->OTYPER &= ~(1U << 5);
 800132a:	4b3a      	ldr	r3, [pc, #232]	@ (8001414 <Main_vSetupGPIOs+0x1c0>)
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	4a39      	ldr	r2, [pc, #228]	@ (8001414 <Main_vSetupGPIOs+0x1c0>)
 8001330:	f023 0320 	bic.w	r3, r3, #32
 8001334:	6053      	str	r3, [r2, #4]
	GPIOB->PUPDR &= ~(3U << 10);
 8001336:	4b37      	ldr	r3, [pc, #220]	@ (8001414 <Main_vSetupGPIOs+0x1c0>)
 8001338:	68db      	ldr	r3, [r3, #12]
 800133a:	4a36      	ldr	r2, [pc, #216]	@ (8001414 <Main_vSetupGPIOs+0x1c0>)
 800133c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8001340:	60d3      	str	r3, [r2, #12]
	GPIOB->OSPEEDR &= ~(3U << 10);
 8001342:	4b34      	ldr	r3, [pc, #208]	@ (8001414 <Main_vSetupGPIOs+0x1c0>)
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	4a33      	ldr	r2, [pc, #204]	@ (8001414 <Main_vSetupGPIOs+0x1c0>)
 8001348:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800134c:	6093      	str	r3, [r2, #8]
    GPIOB->AFRL &= ~(0xF << 12);
 800134e:	4b31      	ldr	r3, [pc, #196]	@ (8001414 <Main_vSetupGPIOs+0x1c0>)
 8001350:	6a1b      	ldr	r3, [r3, #32]
 8001352:	4a30      	ldr	r2, [pc, #192]	@ (8001414 <Main_vSetupGPIOs+0x1c0>)
 8001354:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8001358:	6213      	str	r3, [r2, #32]
    GPIOB->AFRL |=  (0x5 << 12);  // AF5 = SPI1
 800135a:	4b2e      	ldr	r3, [pc, #184]	@ (8001414 <Main_vSetupGPIOs+0x1c0>)
 800135c:	6a1b      	ldr	r3, [r3, #32]
 800135e:	4a2d      	ldr	r2, [pc, #180]	@ (8001414 <Main_vSetupGPIOs+0x1c0>)
 8001360:	f443 43a0 	orr.w	r3, r3, #20480	@ 0x5000
 8001364:	6213      	str	r3, [r2, #32]

	GPIOB->MODER &= ~(3U << 12);
 8001366:	4b2b      	ldr	r3, [pc, #172]	@ (8001414 <Main_vSetupGPIOs+0x1c0>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a2a      	ldr	r2, [pc, #168]	@ (8001414 <Main_vSetupGPIOs+0x1c0>)
 800136c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001370:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1U << 13);
 8001372:	4b28      	ldr	r3, [pc, #160]	@ (8001414 <Main_vSetupGPIOs+0x1c0>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800137a:	4b26      	ldr	r3, [pc, #152]	@ (8001414 <Main_vSetupGPIOs+0x1c0>)
 800137c:	601a      	str	r2, [r3, #0]
	GPIOB->OTYPER &= ~(1U << 6);
 800137e:	4b25      	ldr	r3, [pc, #148]	@ (8001414 <Main_vSetupGPIOs+0x1c0>)
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	4a24      	ldr	r2, [pc, #144]	@ (8001414 <Main_vSetupGPIOs+0x1c0>)
 8001384:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001388:	6053      	str	r3, [r2, #4]
	GPIOB->PUPDR &= ~(3U << 12);
 800138a:	4b22      	ldr	r3, [pc, #136]	@ (8001414 <Main_vSetupGPIOs+0x1c0>)
 800138c:	68db      	ldr	r3, [r3, #12]
 800138e:	4a21      	ldr	r2, [pc, #132]	@ (8001414 <Main_vSetupGPIOs+0x1c0>)
 8001390:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001394:	60d3      	str	r3, [r2, #12]
	GPIOB->OSPEEDR &= ~(3U << 12);
 8001396:	4b1f      	ldr	r3, [pc, #124]	@ (8001414 <Main_vSetupGPIOs+0x1c0>)
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	4a1e      	ldr	r2, [pc, #120]	@ (8001414 <Main_vSetupGPIOs+0x1c0>)
 800139c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80013a0:	6093      	str	r3, [r2, #8]
    GPIOB->AFRL &= ~(0xF << 16);
 80013a2:	4b1c      	ldr	r3, [pc, #112]	@ (8001414 <Main_vSetupGPIOs+0x1c0>)
 80013a4:	6a1b      	ldr	r3, [r3, #32]
 80013a6:	4a1b      	ldr	r2, [pc, #108]	@ (8001414 <Main_vSetupGPIOs+0x1c0>)
 80013a8:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 80013ac:	6213      	str	r3, [r2, #32]
    GPIOB->AFRL |=  (0x5 << 16);  // AF5 = SPI1
 80013ae:	4b19      	ldr	r3, [pc, #100]	@ (8001414 <Main_vSetupGPIOs+0x1c0>)
 80013b0:	6a1b      	ldr	r3, [r3, #32]
 80013b2:	4a18      	ldr	r2, [pc, #96]	@ (8001414 <Main_vSetupGPIOs+0x1c0>)
 80013b4:	f443 23a0 	orr.w	r3, r3, #327680	@ 0x50000
 80013b8:	6213      	str	r3, [r2, #32]

	GPIOB->MODER &= ~(3U << 14);
 80013ba:	4b16      	ldr	r3, [pc, #88]	@ (8001414 <Main_vSetupGPIOs+0x1c0>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a15      	ldr	r2, [pc, #84]	@ (8001414 <Main_vSetupGPIOs+0x1c0>)
 80013c0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80013c4:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1U << 15);
 80013c6:	4b13      	ldr	r3, [pc, #76]	@ (8001414 <Main_vSetupGPIOs+0x1c0>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 80013ce:	4b11      	ldr	r3, [pc, #68]	@ (8001414 <Main_vSetupGPIOs+0x1c0>)
 80013d0:	601a      	str	r2, [r3, #0]
	GPIOB->OTYPER &= ~(1U << 7);
 80013d2:	4b10      	ldr	r3, [pc, #64]	@ (8001414 <Main_vSetupGPIOs+0x1c0>)
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	4a0f      	ldr	r2, [pc, #60]	@ (8001414 <Main_vSetupGPIOs+0x1c0>)
 80013d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80013dc:	6053      	str	r3, [r2, #4]
	GPIOB->PUPDR &= ~(3U << 14);
 80013de:	4b0d      	ldr	r3, [pc, #52]	@ (8001414 <Main_vSetupGPIOs+0x1c0>)
 80013e0:	68db      	ldr	r3, [r3, #12]
 80013e2:	4a0c      	ldr	r2, [pc, #48]	@ (8001414 <Main_vSetupGPIOs+0x1c0>)
 80013e4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80013e8:	60d3      	str	r3, [r2, #12]
	GPIOB->OSPEEDR &= ~(3U << 14);
 80013ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001414 <Main_vSetupGPIOs+0x1c0>)
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	4a09      	ldr	r2, [pc, #36]	@ (8001414 <Main_vSetupGPIOs+0x1c0>)
 80013f0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80013f4:	6093      	str	r3, [r2, #8]
    GPIOB->AFRL &= ~(0xF << 20);
 80013f6:	4b07      	ldr	r3, [pc, #28]	@ (8001414 <Main_vSetupGPIOs+0x1c0>)
 80013f8:	6a1b      	ldr	r3, [r3, #32]
 80013fa:	4a06      	ldr	r2, [pc, #24]	@ (8001414 <Main_vSetupGPIOs+0x1c0>)
 80013fc:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8001400:	6213      	str	r3, [r2, #32]
    GPIOB->AFRL |=  (0x5 << 20);  // AF5 = SPI1
 8001402:	4b04      	ldr	r3, [pc, #16]	@ (8001414 <Main_vSetupGPIOs+0x1c0>)
 8001404:	6a1b      	ldr	r3, [r3, #32]
 8001406:	4a03      	ldr	r2, [pc, #12]	@ (8001414 <Main_vSetupGPIOs+0x1c0>)
 8001408:	f443 03a0 	orr.w	r3, r3, #5242880	@ 0x500000
 800140c:	6213      	str	r3, [r2, #32]
}
 800140e:	bf00      	nop
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	48000400 	.word	0x48000400

08001418 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001418:	480d      	ldr	r0, [pc, #52]	@ (8001450 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800141a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800141c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001420:	480c      	ldr	r0, [pc, #48]	@ (8001454 <LoopForever+0x6>)
  ldr r1, =_edata
 8001422:	490d      	ldr	r1, [pc, #52]	@ (8001458 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001424:	4a0d      	ldr	r2, [pc, #52]	@ (800145c <LoopForever+0xe>)
  movs r3, #0
 8001426:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001428:	e002      	b.n	8001430 <LoopCopyDataInit>

0800142a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800142a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800142c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800142e:	3304      	adds	r3, #4

08001430 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001430:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001432:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001434:	d3f9      	bcc.n	800142a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001436:	4a0a      	ldr	r2, [pc, #40]	@ (8001460 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001438:	4c0a      	ldr	r4, [pc, #40]	@ (8001464 <LoopForever+0x16>)
  movs r3, #0
 800143a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800143c:	e001      	b.n	8001442 <LoopFillZerobss>

0800143e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800143e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001440:	3204      	adds	r2, #4

08001442 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001442:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001444:	d3fb      	bcc.n	800143e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001446:	f000 f811 	bl	800146c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800144a:	f7ff fedf 	bl	800120c <main>

0800144e <LoopForever>:

LoopForever:
  b LoopForever
 800144e:	e7fe      	b.n	800144e <LoopForever>
  ldr   r0, =_estack
 8001450:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001454:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001458:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800145c:	080014d4 	.word	0x080014d4
  ldr r2, =_sbss
 8001460:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001464:	2000002c 	.word	0x2000002c

08001468 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001468:	e7fe      	b.n	8001468 <ADC1_2_IRQHandler>
	...

0800146c <__libc_init_array>:
 800146c:	b570      	push	{r4, r5, r6, lr}
 800146e:	4d0d      	ldr	r5, [pc, #52]	@ (80014a4 <__libc_init_array+0x38>)
 8001470:	4c0d      	ldr	r4, [pc, #52]	@ (80014a8 <__libc_init_array+0x3c>)
 8001472:	1b64      	subs	r4, r4, r5
 8001474:	10a4      	asrs	r4, r4, #2
 8001476:	2600      	movs	r6, #0
 8001478:	42a6      	cmp	r6, r4
 800147a:	d109      	bne.n	8001490 <__libc_init_array+0x24>
 800147c:	4d0b      	ldr	r5, [pc, #44]	@ (80014ac <__libc_init_array+0x40>)
 800147e:	4c0c      	ldr	r4, [pc, #48]	@ (80014b0 <__libc_init_array+0x44>)
 8001480:	f000 f818 	bl	80014b4 <_init>
 8001484:	1b64      	subs	r4, r4, r5
 8001486:	10a4      	asrs	r4, r4, #2
 8001488:	2600      	movs	r6, #0
 800148a:	42a6      	cmp	r6, r4
 800148c:	d105      	bne.n	800149a <__libc_init_array+0x2e>
 800148e:	bd70      	pop	{r4, r5, r6, pc}
 8001490:	f855 3b04 	ldr.w	r3, [r5], #4
 8001494:	4798      	blx	r3
 8001496:	3601      	adds	r6, #1
 8001498:	e7ee      	b.n	8001478 <__libc_init_array+0xc>
 800149a:	f855 3b04 	ldr.w	r3, [r5], #4
 800149e:	4798      	blx	r3
 80014a0:	3601      	adds	r6, #1
 80014a2:	e7f2      	b.n	800148a <__libc_init_array+0x1e>
 80014a4:	080014cc 	.word	0x080014cc
 80014a8:	080014cc 	.word	0x080014cc
 80014ac:	080014cc 	.word	0x080014cc
 80014b0:	080014d0 	.word	0x080014d0

080014b4 <_init>:
 80014b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014b6:	bf00      	nop
 80014b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014ba:	bc08      	pop	{r3}
 80014bc:	469e      	mov	lr, r3
 80014be:	4770      	bx	lr

080014c0 <_fini>:
 80014c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014c2:	bf00      	nop
 80014c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014c6:	bc08      	pop	{r3}
 80014c8:	469e      	mov	lr, r3
 80014ca:	4770      	bx	lr
