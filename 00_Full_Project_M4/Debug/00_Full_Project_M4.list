
00_Full_Project_M4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000112c  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080012c0  080012c0  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080012c0  080012c0  0000305c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080012c0  080012c0  0000305c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080012c0  080012c0  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080012c0  080012c0  000022c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080012c4  080012c4  000022c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080012c8  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000305c  2**0
                  CONTENTS
 10 .bss          00000020  2000005c  2000005c  0000305c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000007c  2000007c  0000305c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000164e  00000000  00000000  0000308c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000007ec  00000000  00000000  000046da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000200  00000000  00000000  00004ec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000161  00000000  00000000  000050c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000022a9  00000000  00000000  00005229  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002cea  00000000  00000000  000074d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000087e1  00000000  00000000  0000a1bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0001299d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000590  00000000  00000000  000129e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  00012f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000005c 	.word	0x2000005c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080012a8 	.word	0x080012a8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000060 	.word	0x20000060
 80001d0:	080012a8 	.word	0x080012a8

080001d4 <Hal_ADC_vInit>:
 * 	- Configure sample rate
 * 	- Configure resolution
 * 	- Enable ADC and wait till its ready
 */
void Hal_ADC_vInit(void)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
	ADC_MASTER->CCR &= ~(0x3 << 16);
 80001da:	4b49      	ldr	r3, [pc, #292]	@ (8000300 <Hal_ADC_vInit+0x12c>)
 80001dc:	689b      	ldr	r3, [r3, #8]
 80001de:	4a48      	ldr	r2, [pc, #288]	@ (8000300 <Hal_ADC_vInit+0x12c>)
 80001e0:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80001e4:	6093      	str	r3, [r2, #8]
	ADC_MASTER->CCR |= ~(0x1 << 16);		// HCLK/1
 80001e6:	4b46      	ldr	r3, [pc, #280]	@ (8000300 <Hal_ADC_vInit+0x12c>)
 80001e8:	689b      	ldr	r3, [r3, #8]
 80001ea:	4a45      	ldr	r2, [pc, #276]	@ (8000300 <Hal_ADC_vInit+0x12c>)
 80001ec:	f463 3380 	orn	r3, r3, #65536	@ 0x10000
 80001f0:	6093      	str	r3, [r2, #8]
    if (ADC1->CR & (1U << 0))  // Check ADEN
 80001f2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80001f6:	689b      	ldr	r3, [r3, #8]
 80001f8:	f003 0301 	and.w	r3, r3, #1
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d00f      	beq.n	8000220 <Hal_ADC_vInit+0x4c>
    {
        ADC1->CR |= (1U << 1); // Set ADDIS to disable ADC
 8000200:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000204:	689b      	ldr	r3, [r3, #8]
 8000206:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800020a:	f043 0302 	orr.w	r3, r3, #2
 800020e:	6093      	str	r3, [r2, #8]
        while (ADC1->CR & (1U << 0));  // Wait until ADEN == 0
 8000210:	bf00      	nop
 8000212:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000216:	689b      	ldr	r3, [r3, #8]
 8000218:	f003 0301 	and.w	r3, r3, #1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d1f8      	bne.n	8000212 <Hal_ADC_vInit+0x3e>
    }

    // 2. Enable voltage regulator
    ADC1->CR &= ~(0b11 << 28);      // Clear bits 28 and 29
 8000220:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000224:	689b      	ldr	r3, [r3, #8]
 8000226:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800022a:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 800022e:	6093      	str	r3, [r2, #8]
    ADC1->CR |=  (0b01 << 28);      // Set ADVREGEN = 01
 8000230:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000234:	689b      	ldr	r3, [r3, #8]
 8000236:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800023a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800023e:	6093      	str	r3, [r2, #8]
    for (volatile int i = 0; i < 10000; ++i);  // Short delay (10+ Âµs needed)
 8000240:	2300      	movs	r3, #0
 8000242:	607b      	str	r3, [r7, #4]
 8000244:	e002      	b.n	800024c <Hal_ADC_vInit+0x78>
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	3301      	adds	r3, #1
 800024a:	607b      	str	r3, [r7, #4]
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000252:	4293      	cmp	r3, r2
 8000254:	ddf7      	ble.n	8000246 <Hal_ADC_vInit+0x72>

    // 3. Calibrate ADC
    ADC1->CR &= ~(1U << 30);   // Single-ended calibration
 8000256:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800025a:	689b      	ldr	r3, [r3, #8]
 800025c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000260:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8000264:	6093      	str	r3, [r2, #8]
    ADC1->CR |= (1U << 31);    // Start calibration
 8000266:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800026a:	689b      	ldr	r3, [r3, #8]
 800026c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000270:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000274:	6093      	str	r3, [r2, #8]

    while (ADC1->CR & (1U << 31));  // Wait for calibration to finish
 8000276:	bf00      	nop
 8000278:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800027c:	689b      	ldr	r3, [r3, #8]
 800027e:	2b00      	cmp	r3, #0
 8000280:	dbfa      	blt.n	8000278 <Hal_ADC_vInit+0xa4>

    // 4. Enable ADC
    ADC1->CR |= (1U << 0);  // ADEN
 8000282:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000286:	689b      	ldr	r3, [r3, #8]
 8000288:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800028c:	f043 0301 	orr.w	r3, r3, #1
 8000290:	6093      	str	r3, [r2, #8]
    while (!(ADC1->ISR & (1U << 0)));  // Wait for ADRDY
 8000292:	bf00      	nop
 8000294:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	f003 0301 	and.w	r3, r3, #1
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d0f8      	beq.n	8000294 <Hal_ADC_vInit+0xc0>

    // 5. Configure channel, resolution, sample time (same as before)
    ADC1->SQR1 &= ~(0xF << 0);		// 1 conversion
 80002a2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80002a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002a8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80002ac:	f023 030f 	bic.w	r3, r3, #15
 80002b0:	6313      	str	r3, [r2, #48]	@ 0x30
    ADC1->SQR1 |= (1U << 6);  		// Rank 1 = channel 1
 80002b2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80002b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002b8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80002bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80002c0:	6313      	str	r3, [r2, #48]	@ 0x30

    ADC1->SMPR1 &= ~(0x7 << 3);
 80002c2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80002c6:	695b      	ldr	r3, [r3, #20]
 80002c8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80002cc:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 80002d0:	6153      	str	r3, [r2, #20]
    ADC1->SMPR1 |= (0b111 << 3);	// Long sample time
 80002d2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80002d6:	695b      	ldr	r3, [r3, #20]
 80002d8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80002dc:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 80002e0:	6153      	str	r3, [r2, #20]

    ADC1->CFGR &= ~(0x3 << 3);		// 12-bit resolution
 80002e2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80002e6:	68db      	ldr	r3, [r3, #12]
 80002e8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80002ec:	f023 0318 	bic.w	r3, r3, #24
 80002f0:	60d3      	str	r3, [r2, #12]
}
 80002f2:	bf00      	nop
 80002f4:	370c      	adds	r7, #12
 80002f6:	46bd      	mov	sp, r7
 80002f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop
 8000300:	50000300 	.word	0x50000300

08000304 <Hal_ADC_vStart>:

void Hal_ADC_vStart(void)
{
 8000304:	b480      	push	{r7}
 8000306:	af00      	add	r7, sp, #0
	ADC1->CR |= (1U << 2);  // ADSTART = 1
 8000308:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800030c:	689b      	ldr	r3, [r3, #8]
 800030e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000312:	f043 0304 	orr.w	r3, r3, #4
 8000316:	6093      	str	r3, [r2, #8]
}
 8000318:	bf00      	nop
 800031a:	46bd      	mov	sp, r7
 800031c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000320:	4770      	bx	lr

08000322 <Hal_ADC_u16ReadChannel>:

uint16_t Hal_ADC_u16ReadChannel(void)
{
 8000322:	b480      	push	{r7}
 8000324:	af00      	add	r7, sp, #0
    ADC1->CR |= (1U << 2);                // Start conversion
 8000326:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800032a:	689b      	ldr	r3, [r3, #8]
 800032c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000330:	f043 0304 	orr.w	r3, r3, #4
 8000334:	6093      	str	r3, [r2, #8]
    while (!(ADC1->ISR & (1U << 2)));     // Wait for EOC
 8000336:	bf00      	nop
 8000338:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	f003 0304 	and.w	r3, r3, #4
 8000342:	2b00      	cmp	r3, #0
 8000344:	d0f8      	beq.n	8000338 <Hal_ADC_u16ReadChannel+0x16>
    return (uint16_t)ADC1->DR;
 8000346:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800034a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800034c:	b29b      	uxth	r3, r3
}
 800034e:	4618      	mov	r0, r3
 8000350:	46bd      	mov	sp, r7
 8000352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000356:	4770      	bx	lr

08000358 <Hal_DMA1_vInit>:

uint8_t TransmitData[10] =
		{0xBB, 0xB1, 0xB2, 0xBC, 0xFB, 0xEF, 0xCC, 0xDD, 0xBB, 0x22};

void Hal_DMA1_vInit(void)
{
 8000358:	b480      	push	{r7}
 800035a:	af00      	add	r7, sp, #0
	// Disable DMA1
	DMA1->CCR2 &= ~(1U << 0);						// EN = 0
 800035c:	4b16      	ldr	r3, [pc, #88]	@ (80003b8 <Hal_DMA1_vInit+0x60>)
 800035e:	69db      	ldr	r3, [r3, #28]
 8000360:	4a15      	ldr	r2, [pc, #84]	@ (80003b8 <Hal_DMA1_vInit+0x60>)
 8000362:	f023 0301 	bic.w	r3, r3, #1
 8000366:	61d3      	str	r3, [r2, #28]

	// Set peripheral register address (USART3->TDR)
	DMA1->CPAR2 = (USART3_BASE_ADDR + 0x28);		// 0x28 is the offset to TDR
 8000368:	4b13      	ldr	r3, [pc, #76]	@ (80003b8 <Hal_DMA1_vInit+0x60>)
 800036a:	4a14      	ldr	r2, [pc, #80]	@ (80003bc <Hal_DMA1_vInit+0x64>)
 800036c:	625a      	str	r2, [r3, #36]	@ 0x24

	// Set memory address (array address)
	DMA1->CMAR2 = (uint32_t)&TransmitData;
 800036e:	4b12      	ldr	r3, [pc, #72]	@ (80003b8 <Hal_DMA1_vInit+0x60>)
 8000370:	4a13      	ldr	r2, [pc, #76]	@ (80003c0 <Hal_DMA1_vInit+0x68>)
 8000372:	629a      	str	r2, [r3, #40]	@ 0x28

	// Configure the total numbers of data to transfer
	DMA1->CNDTR2 = 10U;								// One byte to send
 8000374:	4b10      	ldr	r3, [pc, #64]	@ (80003b8 <Hal_DMA1_vInit+0x60>)
 8000376:	220a      	movs	r2, #10
 8000378:	621a      	str	r2, [r3, #32]

	// Configure the CCR1 register
	DMA1->CCR2 |= (1U<<1) 							// Transfer complete interrupt
 800037a:	4b0f      	ldr	r3, [pc, #60]	@ (80003b8 <Hal_DMA1_vInit+0x60>)
 800037c:	69db      	ldr	r3, [r3, #28]
 800037e:	4a0e      	ldr	r2, [pc, #56]	@ (80003b8 <Hal_DMA1_vInit+0x60>)
 8000380:	f443 5384 	orr.w	r3, r3, #4224	@ 0x1080
 8000384:	f043 0312 	orr.w	r3, r3, #18
 8000388:	61d3      	str	r3, [r2, #28]
			| (1U << 4)								// Read from memory
			| (0U << 5)								// Non-Circular mode
			| (1U << 7)								// Memory increment mode
			| (1U << 12);							// Priority mode medium

	DMA1->CCR2 &= ~(0x3 << 8);						// Peripheral size 8 bit
 800038a:	4b0b      	ldr	r3, [pc, #44]	@ (80003b8 <Hal_DMA1_vInit+0x60>)
 800038c:	69db      	ldr	r3, [r3, #28]
 800038e:	4a0a      	ldr	r2, [pc, #40]	@ (80003b8 <Hal_DMA1_vInit+0x60>)
 8000390:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000394:	61d3      	str	r3, [r2, #28]
	DMA1->CCR2 &= ~(0x3 << 10);						// Memory size 8 bit
 8000396:	4b08      	ldr	r3, [pc, #32]	@ (80003b8 <Hal_DMA1_vInit+0x60>)
 8000398:	69db      	ldr	r3, [r3, #28]
 800039a:	4a07      	ldr	r2, [pc, #28]	@ (80003b8 <Hal_DMA1_vInit+0x60>)
 800039c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80003a0:	61d3      	str	r3, [r2, #28]

//	DMA1->CCR2 |= (1U << 0);						// Enable DMA

    USART3->CR3 |= (1U << 7);
 80003a2:	4b08      	ldr	r3, [pc, #32]	@ (80003c4 <Hal_DMA1_vInit+0x6c>)
 80003a4:	689b      	ldr	r3, [r3, #8]
 80003a6:	4a07      	ldr	r2, [pc, #28]	@ (80003c4 <Hal_DMA1_vInit+0x6c>)
 80003a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80003ac:	6093      	str	r3, [r2, #8]
}
 80003ae:	bf00      	nop
 80003b0:	46bd      	mov	sp, r7
 80003b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b6:	4770      	bx	lr
 80003b8:	40020000 	.word	0x40020000
 80003bc:	40004828 	.word	0x40004828
 80003c0:	20000000 	.word	0x20000000
 80003c4:	40004800 	.word	0x40004800

080003c8 <Hal_vEnableDMA>:

void Hal_vEnableDMA(void)
{
 80003c8:	b480      	push	{r7}
 80003ca:	af00      	add	r7, sp, #0
    // Disable DMA before reconfiguring
    DMA1->CCR2 &= ~(1U << 0);        // Clear EN
 80003cc:	4b09      	ldr	r3, [pc, #36]	@ (80003f4 <Hal_vEnableDMA+0x2c>)
 80003ce:	69db      	ldr	r3, [r3, #28]
 80003d0:	4a08      	ldr	r2, [pc, #32]	@ (80003f4 <Hal_vEnableDMA+0x2c>)
 80003d2:	f023 0301 	bic.w	r3, r3, #1
 80003d6:	61d3      	str	r3, [r2, #28]

	// Reset the transfer count
	DMA1->CNDTR2 = 10;
 80003d8:	4b06      	ldr	r3, [pc, #24]	@ (80003f4 <Hal_vEnableDMA+0x2c>)
 80003da:	220a      	movs	r2, #10
 80003dc:	621a      	str	r2, [r3, #32]

	// Activate DMA again
	DMA1->CCR2 |= (1U << 0);
 80003de:	4b05      	ldr	r3, [pc, #20]	@ (80003f4 <Hal_vEnableDMA+0x2c>)
 80003e0:	69db      	ldr	r3, [r3, #28]
 80003e2:	4a04      	ldr	r2, [pc, #16]	@ (80003f4 <Hal_vEnableDMA+0x2c>)
 80003e4:	f043 0301 	orr.w	r3, r3, #1
 80003e8:	61d3      	str	r3, [r2, #28]
}
 80003ea:	bf00      	nop
 80003ec:	46bd      	mov	sp, r7
 80003ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f2:	4770      	bx	lr
 80003f4:	40020000 	.word	0x40020000

080003f8 <Hal_DMA1_vCorruptData>:

void Hal_DMA1_vCorruptData(void)
{
 80003f8:	b480      	push	{r7}
 80003fa:	af00      	add	r7, sp, #0
	TransmitData[0] = ~TransmitData[0];
 80003fc:	4b05      	ldr	r3, [pc, #20]	@ (8000414 <Hal_DMA1_vCorruptData+0x1c>)
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	43db      	mvns	r3, r3
 8000402:	b2da      	uxtb	r2, r3
 8000404:	4b03      	ldr	r3, [pc, #12]	@ (8000414 <Hal_DMA1_vCorruptData+0x1c>)
 8000406:	701a      	strb	r2, [r3, #0]
}
 8000408:	bf00      	nop
 800040a:	46bd      	mov	sp, r7
 800040c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000410:	4770      	bx	lr
 8000412:	bf00      	nop
 8000414:	20000000 	.word	0x20000000

08000418 <Hal_DMA1_vGetTransmitData>:

uint32_t* Hal_DMA1_vGetTransmitData(void)
{
 8000418:	b480      	push	{r7}
 800041a:	af00      	add	r7, sp, #0
	return (&TransmitData);
 800041c:	4b02      	ldr	r3, [pc, #8]	@ (8000428 <Hal_DMA1_vGetTransmitData+0x10>)
}
 800041e:	4618      	mov	r0, r3
 8000420:	46bd      	mov	sp, r7
 8000422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000426:	4770      	bx	lr
 8000428:	20000000 	.word	0x20000000

0800042c <Hal_GPIO_vEnable>:
 */

#include "hal_gpio.h"

void Hal_GPIO_vEnable(short u8PinNumber, char u8Type, GPIO_X gpio)
{
 800042c:	b480      	push	{r7}
 800042e:	b083      	sub	sp, #12
 8000430:	af00      	add	r7, sp, #0
 8000432:	4603      	mov	r3, r0
 8000434:	80fb      	strh	r3, [r7, #6]
 8000436:	460b      	mov	r3, r1
 8000438:	717b      	strb	r3, [r7, #5]
 800043a:	4613      	mov	r3, r2
 800043c:	713b      	strb	r3, [r7, #4]
	switch(gpio)
 800043e:	793b      	ldrb	r3, [r7, #4]
 8000440:	2b02      	cmp	r3, #2
 8000442:	d046      	beq.n	80004d2 <Hal_GPIO_vEnable+0xa6>
 8000444:	2b02      	cmp	r3, #2
 8000446:	dc62      	bgt.n	800050e <Hal_GPIO_vEnable+0xe2>
 8000448:	2b00      	cmp	r3, #0
 800044a:	d002      	beq.n	8000452 <Hal_GPIO_vEnable+0x26>
 800044c:	2b01      	cmp	r3, #1
 800044e:	d022      	beq.n	8000496 <Hal_GPIO_vEnable+0x6a>

	case GPIO_D:
	case GPIO_E:
	case GPIO_H:
	default:
		break;
 8000450:	e05d      	b.n	800050e <Hal_GPIO_vEnable+0xe2>
		GPIOA->MODER &= ~(3U << (2 * u8PinNumber));
 8000452:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	4619      	mov	r1, r3
 800045a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800045e:	005b      	lsls	r3, r3, #1
 8000460:	2203      	movs	r2, #3
 8000462:	fa02 f303 	lsl.w	r3, r2, r3
 8000466:	43db      	mvns	r3, r3
 8000468:	ea01 0203 	and.w	r2, r1, r3
 800046c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000470:	601a      	str	r2, [r3, #0]
		GPIOA->MODER |= ((u8Type & 0x3U) << 2*u8PinNumber);
 8000472:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	4619      	mov	r1, r3
 800047a:	797b      	ldrb	r3, [r7, #5]
 800047c:	f003 0203 	and.w	r2, r3, #3
 8000480:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000484:	005b      	lsls	r3, r3, #1
 8000486:	fa02 f303 	lsl.w	r3, r2, r3
 800048a:	ea41 0203 	orr.w	r2, r1, r3
 800048e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000492:	601a      	str	r2, [r3, #0]
		break;
 8000494:	e03c      	b.n	8000510 <Hal_GPIO_vEnable+0xe4>
		GPIOB->MODER &= ~(3U << (2 * u8PinNumber));
 8000496:	4b21      	ldr	r3, [pc, #132]	@ (800051c <Hal_GPIO_vEnable+0xf0>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	4619      	mov	r1, r3
 800049c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80004a0:	005b      	lsls	r3, r3, #1
 80004a2:	2203      	movs	r2, #3
 80004a4:	fa02 f303 	lsl.w	r3, r2, r3
 80004a8:	43db      	mvns	r3, r3
 80004aa:	ea01 0203 	and.w	r2, r1, r3
 80004ae:	4b1b      	ldr	r3, [pc, #108]	@ (800051c <Hal_GPIO_vEnable+0xf0>)
 80004b0:	601a      	str	r2, [r3, #0]
		GPIOB->MODER |= ((u8Type & 0x3U) << 2*u8PinNumber);
 80004b2:	4b1a      	ldr	r3, [pc, #104]	@ (800051c <Hal_GPIO_vEnable+0xf0>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	4619      	mov	r1, r3
 80004b8:	797b      	ldrb	r3, [r7, #5]
 80004ba:	f003 0203 	and.w	r2, r3, #3
 80004be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80004c2:	005b      	lsls	r3, r3, #1
 80004c4:	fa02 f303 	lsl.w	r3, r2, r3
 80004c8:	ea41 0203 	orr.w	r2, r1, r3
 80004cc:	4b13      	ldr	r3, [pc, #76]	@ (800051c <Hal_GPIO_vEnable+0xf0>)
 80004ce:	601a      	str	r2, [r3, #0]
		break;
 80004d0:	e01e      	b.n	8000510 <Hal_GPIO_vEnable+0xe4>
		GPIOC->MODER &= ~(3U << (2 * u8PinNumber));
 80004d2:	4b13      	ldr	r3, [pc, #76]	@ (8000520 <Hal_GPIO_vEnable+0xf4>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	4619      	mov	r1, r3
 80004d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80004dc:	005b      	lsls	r3, r3, #1
 80004de:	2203      	movs	r2, #3
 80004e0:	fa02 f303 	lsl.w	r3, r2, r3
 80004e4:	43db      	mvns	r3, r3
 80004e6:	ea01 0203 	and.w	r2, r1, r3
 80004ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000520 <Hal_GPIO_vEnable+0xf4>)
 80004ec:	601a      	str	r2, [r3, #0]
		GPIOC->MODER |= ((u8Type & 0x3U) << 2*u8PinNumber);
 80004ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000520 <Hal_GPIO_vEnable+0xf4>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	4619      	mov	r1, r3
 80004f4:	797b      	ldrb	r3, [r7, #5]
 80004f6:	f003 0203 	and.w	r2, r3, #3
 80004fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80004fe:	005b      	lsls	r3, r3, #1
 8000500:	fa02 f303 	lsl.w	r3, r2, r3
 8000504:	ea41 0203 	orr.w	r2, r1, r3
 8000508:	4b05      	ldr	r3, [pc, #20]	@ (8000520 <Hal_GPIO_vEnable+0xf4>)
 800050a:	601a      	str	r2, [r3, #0]
		break;
 800050c:	e000      	b.n	8000510 <Hal_GPIO_vEnable+0xe4>
		break;
 800050e:	bf00      	nop
	}
}
 8000510:	bf00      	nop
 8000512:	370c      	adds	r7, #12
 8000514:	46bd      	mov	sp, r7
 8000516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051a:	4770      	bx	lr
 800051c:	48000400 	.word	0x48000400
 8000520:	48000800 	.word	0x48000800

08000524 <Hal_GPIO_vTyp>:

void Hal_GPIO_vTyp(short u8PinNumber, short u8Typ, GPIO_X gpio)
{
 8000524:	b480      	push	{r7}
 8000526:	b083      	sub	sp, #12
 8000528:	af00      	add	r7, sp, #0
 800052a:	4603      	mov	r3, r0
 800052c:	80fb      	strh	r3, [r7, #6]
 800052e:	460b      	mov	r3, r1
 8000530:	80bb      	strh	r3, [r7, #4]
 8000532:	4613      	mov	r3, r2
 8000534:	70fb      	strb	r3, [r7, #3]
	switch(gpio)
 8000536:	78fb      	ldrb	r3, [r7, #3]
 8000538:	2b02      	cmp	r3, #2
 800053a:	d03e      	beq.n	80005ba <Hal_GPIO_vTyp+0x96>
 800053c:	2b02      	cmp	r3, #2
 800053e:	dc56      	bgt.n	80005ee <Hal_GPIO_vTyp+0xca>
 8000540:	2b00      	cmp	r3, #0
 8000542:	d002      	beq.n	800054a <Hal_GPIO_vTyp+0x26>
 8000544:	2b01      	cmp	r3, #1
 8000546:	d01e      	beq.n	8000586 <Hal_GPIO_vTyp+0x62>

	case GPIO_D:
	case GPIO_E:
	case GPIO_H:
	default:
		break;
 8000548:	e051      	b.n	80005ee <Hal_GPIO_vTyp+0xca>
		GPIOA->OTYPER &= ~(1U << u8PinNumber);
 800054a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800054e:	685b      	ldr	r3, [r3, #4]
 8000550:	4619      	mov	r1, r3
 8000552:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000556:	2201      	movs	r2, #1
 8000558:	fa02 f303 	lsl.w	r3, r2, r3
 800055c:	43db      	mvns	r3, r3
 800055e:	ea01 0203 	and.w	r2, r1, r3
 8000562:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000566:	605a      	str	r2, [r3, #4]
		GPIOA->OTYPER |= ((u8Typ & 0x1) << u8PinNumber);
 8000568:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800056c:	685a      	ldr	r2, [r3, #4]
 800056e:	88bb      	ldrh	r3, [r7, #4]
 8000570:	f003 0101 	and.w	r1, r3, #1
 8000574:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000578:	fa01 f303 	lsl.w	r3, r1, r3
 800057c:	f04f 4190 	mov.w	r1, #1207959552	@ 0x48000000
 8000580:	4313      	orrs	r3, r2
 8000582:	604b      	str	r3, [r1, #4]
		break;
 8000584:	e034      	b.n	80005f0 <Hal_GPIO_vTyp+0xcc>
		GPIOB->OTYPER &= ~(1U << u8PinNumber);
 8000586:	4b1d      	ldr	r3, [pc, #116]	@ (80005fc <Hal_GPIO_vTyp+0xd8>)
 8000588:	685b      	ldr	r3, [r3, #4]
 800058a:	4619      	mov	r1, r3
 800058c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000590:	2201      	movs	r2, #1
 8000592:	fa02 f303 	lsl.w	r3, r2, r3
 8000596:	43db      	mvns	r3, r3
 8000598:	ea01 0203 	and.w	r2, r1, r3
 800059c:	4b17      	ldr	r3, [pc, #92]	@ (80005fc <Hal_GPIO_vTyp+0xd8>)
 800059e:	605a      	str	r2, [r3, #4]
		GPIOB->OTYPER |= ((u8Typ & 0x1) << u8PinNumber);
 80005a0:	4b16      	ldr	r3, [pc, #88]	@ (80005fc <Hal_GPIO_vTyp+0xd8>)
 80005a2:	685a      	ldr	r2, [r3, #4]
 80005a4:	88bb      	ldrh	r3, [r7, #4]
 80005a6:	f003 0101 	and.w	r1, r3, #1
 80005aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005ae:	fa01 f303 	lsl.w	r3, r1, r3
 80005b2:	4912      	ldr	r1, [pc, #72]	@ (80005fc <Hal_GPIO_vTyp+0xd8>)
 80005b4:	4313      	orrs	r3, r2
 80005b6:	604b      	str	r3, [r1, #4]
		break;
 80005b8:	e01a      	b.n	80005f0 <Hal_GPIO_vTyp+0xcc>
		GPIOC->OTYPER &= ~(1U << u8PinNumber);
 80005ba:	4b11      	ldr	r3, [pc, #68]	@ (8000600 <Hal_GPIO_vTyp+0xdc>)
 80005bc:	685b      	ldr	r3, [r3, #4]
 80005be:	4619      	mov	r1, r3
 80005c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005c4:	2201      	movs	r2, #1
 80005c6:	fa02 f303 	lsl.w	r3, r2, r3
 80005ca:	43db      	mvns	r3, r3
 80005cc:	ea01 0203 	and.w	r2, r1, r3
 80005d0:	4b0b      	ldr	r3, [pc, #44]	@ (8000600 <Hal_GPIO_vTyp+0xdc>)
 80005d2:	605a      	str	r2, [r3, #4]
		GPIOC->OTYPER |= ((u8Typ & 0x1) << u8PinNumber);
 80005d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000600 <Hal_GPIO_vTyp+0xdc>)
 80005d6:	685a      	ldr	r2, [r3, #4]
 80005d8:	88bb      	ldrh	r3, [r7, #4]
 80005da:	f003 0101 	and.w	r1, r3, #1
 80005de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005e2:	fa01 f303 	lsl.w	r3, r1, r3
 80005e6:	4906      	ldr	r1, [pc, #24]	@ (8000600 <Hal_GPIO_vTyp+0xdc>)
 80005e8:	4313      	orrs	r3, r2
 80005ea:	604b      	str	r3, [r1, #4]
		break;
 80005ec:	e000      	b.n	80005f0 <Hal_GPIO_vTyp+0xcc>
		break;
 80005ee:	bf00      	nop
	}
}
 80005f0:	bf00      	nop
 80005f2:	370c      	adds	r7, #12
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr
 80005fc:	48000400 	.word	0x48000400
 8000600:	48000800 	.word	0x48000800

08000604 <Hal_GPIO_vPullUpPullDown>:
{
	GPIOA->OSPEEDR |= (u8OutputSpeed << u8PinNumber);
}

void Hal_GPIO_vPullUpPullDown(short u8PinNumber, short u8PullUpPullDown, GPIO_X gpio)
{
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	4603      	mov	r3, r0
 800060c:	80fb      	strh	r3, [r7, #6]
 800060e:	460b      	mov	r3, r1
 8000610:	80bb      	strh	r3, [r7, #4]
 8000612:	4613      	mov	r3, r2
 8000614:	70fb      	strb	r3, [r7, #3]
	switch(gpio)
 8000616:	78fb      	ldrb	r3, [r7, #3]
 8000618:	2b02      	cmp	r3, #2
 800061a:	d020      	beq.n	800065e <Hal_GPIO_vPullUpPullDown+0x5a>
 800061c:	2b02      	cmp	r3, #2
 800061e:	dc2a      	bgt.n	8000676 <Hal_GPIO_vPullUpPullDown+0x72>
 8000620:	2b00      	cmp	r3, #0
 8000622:	d002      	beq.n	800062a <Hal_GPIO_vPullUpPullDown+0x26>
 8000624:	2b01      	cmp	r3, #1
 8000626:	d00e      	beq.n	8000646 <Hal_GPIO_vPullUpPullDown+0x42>

	case GPIO_D:
	case GPIO_E:
	case GPIO_H:
	default:
		break;
 8000628:	e025      	b.n	8000676 <Hal_GPIO_vPullUpPullDown+0x72>
		GPIOA->PUPDR |= (u8PullUpPullDown << u8PinNumber);
 800062a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800062e:	68da      	ldr	r2, [r3, #12]
 8000630:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000634:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000638:	fa01 f303 	lsl.w	r3, r1, r3
 800063c:	f04f 4190 	mov.w	r1, #1207959552	@ 0x48000000
 8000640:	4313      	orrs	r3, r2
 8000642:	60cb      	str	r3, [r1, #12]
		break;
 8000644:	e018      	b.n	8000678 <Hal_GPIO_vPullUpPullDown+0x74>
		GPIOB->PUPDR |= (u8PullUpPullDown << u8PinNumber);
 8000646:	4b0f      	ldr	r3, [pc, #60]	@ (8000684 <Hal_GPIO_vPullUpPullDown+0x80>)
 8000648:	68da      	ldr	r2, [r3, #12]
 800064a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800064e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000652:	fa01 f303 	lsl.w	r3, r1, r3
 8000656:	490b      	ldr	r1, [pc, #44]	@ (8000684 <Hal_GPIO_vPullUpPullDown+0x80>)
 8000658:	4313      	orrs	r3, r2
 800065a:	60cb      	str	r3, [r1, #12]
		break;
 800065c:	e00c      	b.n	8000678 <Hal_GPIO_vPullUpPullDown+0x74>
		GPIOC->PUPDR |= (u8PullUpPullDown << u8PinNumber);
 800065e:	4b0a      	ldr	r3, [pc, #40]	@ (8000688 <Hal_GPIO_vPullUpPullDown+0x84>)
 8000660:	68da      	ldr	r2, [r3, #12]
 8000662:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000666:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800066a:	fa01 f303 	lsl.w	r3, r1, r3
 800066e:	4906      	ldr	r1, [pc, #24]	@ (8000688 <Hal_GPIO_vPullUpPullDown+0x84>)
 8000670:	4313      	orrs	r3, r2
 8000672:	60cb      	str	r3, [r1, #12]
		break;
 8000674:	e000      	b.n	8000678 <Hal_GPIO_vPullUpPullDown+0x74>
		break;
 8000676:	bf00      	nop
	}
}
 8000678:	bf00      	nop
 800067a:	370c      	adds	r7, #12
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr
 8000684:	48000400 	.word	0x48000400
 8000688:	48000800 	.word	0x48000800

0800068c <Hal_GPIO_vOutputToggle>:
		break;
	}
}

void Hal_GPIO_vOutputToggle(short u8PinNumber, GPIO_X gpio)
{
 800068c:	b480      	push	{r7}
 800068e:	b083      	sub	sp, #12
 8000690:	af00      	add	r7, sp, #0
 8000692:	4603      	mov	r3, r0
 8000694:	460a      	mov	r2, r1
 8000696:	80fb      	strh	r3, [r7, #6]
 8000698:	4613      	mov	r3, r2
 800069a:	717b      	strb	r3, [r7, #5]
	switch(gpio)
 800069c:	797b      	ldrb	r3, [r7, #5]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d002      	beq.n	80006a8 <Hal_GPIO_vOutputToggle+0x1c>
 80006a2:	2b01      	cmp	r3, #1
 80006a4:	d008      	beq.n	80006b8 <Hal_GPIO_vOutputToggle+0x2c>

	case GPIO_D:
	case GPIO_E:
	case GPIO_H:
	default:
		break;
 80006a6:	e00f      	b.n	80006c8 <Hal_GPIO_vOutputToggle+0x3c>
		GPIOA->BSRR = ~(GPIOA->ODR);
 80006a8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80006ac:	695b      	ldr	r3, [r3, #20]
 80006ae:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80006b2:	43db      	mvns	r3, r3
 80006b4:	6193      	str	r3, [r2, #24]
		break;
 80006b6:	e007      	b.n	80006c8 <Hal_GPIO_vOutputToggle+0x3c>
		GPIOB->BSRR = (GPIO_PIN_EN << u8PinNumber);
 80006b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006bc:	4a05      	ldr	r2, [pc, #20]	@ (80006d4 <Hal_GPIO_vOutputToggle+0x48>)
 80006be:	2101      	movs	r1, #1
 80006c0:	fa01 f303 	lsl.w	r3, r1, r3
 80006c4:	6193      	str	r3, [r2, #24]
		break;
 80006c6:	bf00      	nop
	}
}
 80006c8:	bf00      	nop
 80006ca:	370c      	adds	r7, #12
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	48000400 	.word	0x48000400

080006d8 <Config_vSetupGPIO>:
		break;
	}
}

void Config_vSetupGPIO(uint8_t u8Pin, uint8_t u8PinType, uint8_t u8Typ, uint8_t u8PuPd, GPIO_X gpio)
{
 80006d8:	b590      	push	{r4, r7, lr}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
 80006de:	4604      	mov	r4, r0
 80006e0:	4608      	mov	r0, r1
 80006e2:	4611      	mov	r1, r2
 80006e4:	461a      	mov	r2, r3
 80006e6:	4623      	mov	r3, r4
 80006e8:	71fb      	strb	r3, [r7, #7]
 80006ea:	4603      	mov	r3, r0
 80006ec:	71bb      	strb	r3, [r7, #6]
 80006ee:	460b      	mov	r3, r1
 80006f0:	717b      	strb	r3, [r7, #5]
 80006f2:	4613      	mov	r3, r2
 80006f4:	713b      	strb	r3, [r7, #4]
	Hal_GPIO_vEnable(u8Pin, u8PinType, gpio);
 80006f6:	79fb      	ldrb	r3, [r7, #7]
 80006f8:	b21b      	sxth	r3, r3
 80006fa:	7e3a      	ldrb	r2, [r7, #24]
 80006fc:	79b9      	ldrb	r1, [r7, #6]
 80006fe:	4618      	mov	r0, r3
 8000700:	f7ff fe94 	bl	800042c <Hal_GPIO_vEnable>
	Hal_GPIO_vTyp(u8Pin, u8Typ, gpio);
 8000704:	79fb      	ldrb	r3, [r7, #7]
 8000706:	b21b      	sxth	r3, r3
 8000708:	797a      	ldrb	r2, [r7, #5]
 800070a:	b211      	sxth	r1, r2
 800070c:	7e3a      	ldrb	r2, [r7, #24]
 800070e:	4618      	mov	r0, r3
 8000710:	f7ff ff08 	bl	8000524 <Hal_GPIO_vTyp>
	Hal_GPIO_vPullUpPullDown(u8Pin, u8PuPd, gpio);
 8000714:	79fb      	ldrb	r3, [r7, #7]
 8000716:	b21b      	sxth	r3, r3
 8000718:	793a      	ldrb	r2, [r7, #4]
 800071a:	b211      	sxth	r1, r2
 800071c:	7e3a      	ldrb	r2, [r7, #24]
 800071e:	4618      	mov	r0, r3
 8000720:	f7ff ff70 	bl	8000604 <Hal_GPIO_vPullUpPullDown>
}
 8000724:	bf00      	nop
 8000726:	370c      	adds	r7, #12
 8000728:	46bd      	mov	sp, r7
 800072a:	bd90      	pop	{r4, r7, pc}

0800072c <Hal_GPIO_vSetupAlternateFunction>:

void Hal_GPIO_vSetupAlternateFunction(uint8_t u8Pin, uint8_t u8AltFunc, GPIO_X gpio)
{
 800072c:	b480      	push	{r7}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
 8000732:	4603      	mov	r3, r0
 8000734:	71fb      	strb	r3, [r7, #7]
 8000736:	460b      	mov	r3, r1
 8000738:	71bb      	strb	r3, [r7, #6]
 800073a:	4613      	mov	r3, r2
 800073c:	717b      	strb	r3, [r7, #5]
	switch (gpio){
 800073e:	797b      	ldrb	r3, [r7, #5]
 8000740:	2b05      	cmp	r3, #5
 8000742:	f200 8131 	bhi.w	80009a8 <Hal_GPIO_vSetupAlternateFunction+0x27c>
 8000746:	a201      	add	r2, pc, #4	@ (adr r2, 800074c <Hal_GPIO_vSetupAlternateFunction+0x20>)
 8000748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800074c:	08000765 	.word	0x08000765
 8000750:	080007d3 	.word	0x080007d3
 8000754:	08000831 	.word	0x08000831
 8000758:	0800088f 	.word	0x0800088f
 800075c:	080008ed 	.word	0x080008ed
 8000760:	0800094b 	.word	0x0800094b
		case GPIO_A:
			if (u8Pin <= 7)
 8000764:	79fb      	ldrb	r3, [r7, #7]
 8000766:	2b07      	cmp	r3, #7
 8000768:	d819      	bhi.n	800079e <Hal_GPIO_vSetupAlternateFunction+0x72>
			{
			    GPIOA->AFRL &= ~(0xF << (u8Pin*4));
 800076a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800076e:	6a1a      	ldr	r2, [r3, #32]
 8000770:	79fb      	ldrb	r3, [r7, #7]
 8000772:	009b      	lsls	r3, r3, #2
 8000774:	210f      	movs	r1, #15
 8000776:	fa01 f303 	lsl.w	r3, r1, r3
 800077a:	43db      	mvns	r3, r3
 800077c:	f04f 4190 	mov.w	r1, #1207959552	@ 0x48000000
 8000780:	4013      	ands	r3, r2
 8000782:	620b      	str	r3, [r1, #32]
			    GPIOA->AFRL |=  (u8AltFunc << (u8Pin*4));
 8000784:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000788:	6a1a      	ldr	r2, [r3, #32]
 800078a:	79b9      	ldrb	r1, [r7, #6]
 800078c:	79fb      	ldrb	r3, [r7, #7]
 800078e:	009b      	lsls	r3, r3, #2
 8000790:	fa01 f303 	lsl.w	r3, r1, r3
 8000794:	f04f 4190 	mov.w	r1, #1207959552	@ 0x48000000
 8000798:	4313      	orrs	r3, r2
 800079a:	620b      	str	r3, [r1, #32]
			else
			{
			    GPIOA->AFRH &= ~(0xF << (u8Pin*4));
			    GPIOA->AFRL |=  (u8AltFunc << (u8Pin*4));
			}
			break;
 800079c:	e105      	b.n	80009aa <Hal_GPIO_vSetupAlternateFunction+0x27e>
			    GPIOA->AFRH &= ~(0xF << (u8Pin*4));
 800079e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80007a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80007a4:	79fb      	ldrb	r3, [r7, #7]
 80007a6:	009b      	lsls	r3, r3, #2
 80007a8:	210f      	movs	r1, #15
 80007aa:	fa01 f303 	lsl.w	r3, r1, r3
 80007ae:	43db      	mvns	r3, r3
 80007b0:	f04f 4190 	mov.w	r1, #1207959552	@ 0x48000000
 80007b4:	4013      	ands	r3, r2
 80007b6:	624b      	str	r3, [r1, #36]	@ 0x24
			    GPIOA->AFRL |=  (u8AltFunc << (u8Pin*4));
 80007b8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80007bc:	6a1a      	ldr	r2, [r3, #32]
 80007be:	79b9      	ldrb	r1, [r7, #6]
 80007c0:	79fb      	ldrb	r3, [r7, #7]
 80007c2:	009b      	lsls	r3, r3, #2
 80007c4:	fa01 f303 	lsl.w	r3, r1, r3
 80007c8:	f04f 4190 	mov.w	r1, #1207959552	@ 0x48000000
 80007cc:	4313      	orrs	r3, r2
 80007ce:	620b      	str	r3, [r1, #32]
			break;
 80007d0:	e0eb      	b.n	80009aa <Hal_GPIO_vSetupAlternateFunction+0x27e>

		case GPIO_B:
			if (u8Pin <= 7)
 80007d2:	79fb      	ldrb	r3, [r7, #7]
 80007d4:	2b07      	cmp	r3, #7
 80007d6:	d815      	bhi.n	8000804 <Hal_GPIO_vSetupAlternateFunction+0xd8>
			{
			    GPIOB->AFRL &= ~(0xF << (u8Pin*4));
 80007d8:	4b77      	ldr	r3, [pc, #476]	@ (80009b8 <Hal_GPIO_vSetupAlternateFunction+0x28c>)
 80007da:	6a1a      	ldr	r2, [r3, #32]
 80007dc:	79fb      	ldrb	r3, [r7, #7]
 80007de:	009b      	lsls	r3, r3, #2
 80007e0:	210f      	movs	r1, #15
 80007e2:	fa01 f303 	lsl.w	r3, r1, r3
 80007e6:	43db      	mvns	r3, r3
 80007e8:	4973      	ldr	r1, [pc, #460]	@ (80009b8 <Hal_GPIO_vSetupAlternateFunction+0x28c>)
 80007ea:	4013      	ands	r3, r2
 80007ec:	620b      	str	r3, [r1, #32]
			    GPIOB->AFRL |=  (u8AltFunc << (u8Pin*4));
 80007ee:	4b72      	ldr	r3, [pc, #456]	@ (80009b8 <Hal_GPIO_vSetupAlternateFunction+0x28c>)
 80007f0:	6a1a      	ldr	r2, [r3, #32]
 80007f2:	79b9      	ldrb	r1, [r7, #6]
 80007f4:	79fb      	ldrb	r3, [r7, #7]
 80007f6:	009b      	lsls	r3, r3, #2
 80007f8:	fa01 f303 	lsl.w	r3, r1, r3
 80007fc:	496e      	ldr	r1, [pc, #440]	@ (80009b8 <Hal_GPIO_vSetupAlternateFunction+0x28c>)
 80007fe:	4313      	orrs	r3, r2
 8000800:	620b      	str	r3, [r1, #32]
			else
			{
			    GPIOB->AFRH &= ~(0xF << (u8Pin*4));
			    GPIOB->AFRL |=  (u8AltFunc << (u8Pin*4));
			}
			break;
 8000802:	e0d2      	b.n	80009aa <Hal_GPIO_vSetupAlternateFunction+0x27e>
			    GPIOB->AFRH &= ~(0xF << (u8Pin*4));
 8000804:	4b6c      	ldr	r3, [pc, #432]	@ (80009b8 <Hal_GPIO_vSetupAlternateFunction+0x28c>)
 8000806:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000808:	79fb      	ldrb	r3, [r7, #7]
 800080a:	009b      	lsls	r3, r3, #2
 800080c:	210f      	movs	r1, #15
 800080e:	fa01 f303 	lsl.w	r3, r1, r3
 8000812:	43db      	mvns	r3, r3
 8000814:	4968      	ldr	r1, [pc, #416]	@ (80009b8 <Hal_GPIO_vSetupAlternateFunction+0x28c>)
 8000816:	4013      	ands	r3, r2
 8000818:	624b      	str	r3, [r1, #36]	@ 0x24
			    GPIOB->AFRL |=  (u8AltFunc << (u8Pin*4));
 800081a:	4b67      	ldr	r3, [pc, #412]	@ (80009b8 <Hal_GPIO_vSetupAlternateFunction+0x28c>)
 800081c:	6a1a      	ldr	r2, [r3, #32]
 800081e:	79b9      	ldrb	r1, [r7, #6]
 8000820:	79fb      	ldrb	r3, [r7, #7]
 8000822:	009b      	lsls	r3, r3, #2
 8000824:	fa01 f303 	lsl.w	r3, r1, r3
 8000828:	4963      	ldr	r1, [pc, #396]	@ (80009b8 <Hal_GPIO_vSetupAlternateFunction+0x28c>)
 800082a:	4313      	orrs	r3, r2
 800082c:	620b      	str	r3, [r1, #32]
			break;
 800082e:	e0bc      	b.n	80009aa <Hal_GPIO_vSetupAlternateFunction+0x27e>

		case GPIO_C:
			if (u8Pin <= 7)
 8000830:	79fb      	ldrb	r3, [r7, #7]
 8000832:	2b07      	cmp	r3, #7
 8000834:	d815      	bhi.n	8000862 <Hal_GPIO_vSetupAlternateFunction+0x136>
			{
			    GPIOC->AFRL &= ~(0xF << (u8Pin*4));  // Clear AFR for PB9
 8000836:	4b61      	ldr	r3, [pc, #388]	@ (80009bc <Hal_GPIO_vSetupAlternateFunction+0x290>)
 8000838:	6a1a      	ldr	r2, [r3, #32]
 800083a:	79fb      	ldrb	r3, [r7, #7]
 800083c:	009b      	lsls	r3, r3, #2
 800083e:	210f      	movs	r1, #15
 8000840:	fa01 f303 	lsl.w	r3, r1, r3
 8000844:	43db      	mvns	r3, r3
 8000846:	495d      	ldr	r1, [pc, #372]	@ (80009bc <Hal_GPIO_vSetupAlternateFunction+0x290>)
 8000848:	4013      	ands	r3, r2
 800084a:	620b      	str	r3, [r1, #32]
			    GPIOC->AFRL |=  (u8AltFunc << (u8Pin*4));  // AF7 = USART3
 800084c:	4b5b      	ldr	r3, [pc, #364]	@ (80009bc <Hal_GPIO_vSetupAlternateFunction+0x290>)
 800084e:	6a1a      	ldr	r2, [r3, #32]
 8000850:	79b9      	ldrb	r1, [r7, #6]
 8000852:	79fb      	ldrb	r3, [r7, #7]
 8000854:	009b      	lsls	r3, r3, #2
 8000856:	fa01 f303 	lsl.w	r3, r1, r3
 800085a:	4958      	ldr	r1, [pc, #352]	@ (80009bc <Hal_GPIO_vSetupAlternateFunction+0x290>)
 800085c:	4313      	orrs	r3, r2
 800085e:	620b      	str	r3, [r1, #32]
			else
			{
			    GPIOC->AFRH &= ~(0xF << (u8Pin*4));  // Clear AFR for PB9
			    GPIOC->AFRL |=  (u8AltFunc << (u8Pin*4));
			}
			break;
 8000860:	e0a3      	b.n	80009aa <Hal_GPIO_vSetupAlternateFunction+0x27e>
			    GPIOC->AFRH &= ~(0xF << (u8Pin*4));  // Clear AFR for PB9
 8000862:	4b56      	ldr	r3, [pc, #344]	@ (80009bc <Hal_GPIO_vSetupAlternateFunction+0x290>)
 8000864:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000866:	79fb      	ldrb	r3, [r7, #7]
 8000868:	009b      	lsls	r3, r3, #2
 800086a:	210f      	movs	r1, #15
 800086c:	fa01 f303 	lsl.w	r3, r1, r3
 8000870:	43db      	mvns	r3, r3
 8000872:	4952      	ldr	r1, [pc, #328]	@ (80009bc <Hal_GPIO_vSetupAlternateFunction+0x290>)
 8000874:	4013      	ands	r3, r2
 8000876:	624b      	str	r3, [r1, #36]	@ 0x24
			    GPIOC->AFRL |=  (u8AltFunc << (u8Pin*4));
 8000878:	4b50      	ldr	r3, [pc, #320]	@ (80009bc <Hal_GPIO_vSetupAlternateFunction+0x290>)
 800087a:	6a1a      	ldr	r2, [r3, #32]
 800087c:	79b9      	ldrb	r1, [r7, #6]
 800087e:	79fb      	ldrb	r3, [r7, #7]
 8000880:	009b      	lsls	r3, r3, #2
 8000882:	fa01 f303 	lsl.w	r3, r1, r3
 8000886:	494d      	ldr	r1, [pc, #308]	@ (80009bc <Hal_GPIO_vSetupAlternateFunction+0x290>)
 8000888:	4313      	orrs	r3, r2
 800088a:	620b      	str	r3, [r1, #32]
			break;
 800088c:	e08d      	b.n	80009aa <Hal_GPIO_vSetupAlternateFunction+0x27e>

		case GPIO_D:
			if (u8Pin <= 7)
 800088e:	79fb      	ldrb	r3, [r7, #7]
 8000890:	2b07      	cmp	r3, #7
 8000892:	d815      	bhi.n	80008c0 <Hal_GPIO_vSetupAlternateFunction+0x194>
			{
			    GPIOD->AFRL &= ~(0xF << (u8Pin*4));  // Clear AFR for PB9
 8000894:	4b4a      	ldr	r3, [pc, #296]	@ (80009c0 <Hal_GPIO_vSetupAlternateFunction+0x294>)
 8000896:	6a1a      	ldr	r2, [r3, #32]
 8000898:	79fb      	ldrb	r3, [r7, #7]
 800089a:	009b      	lsls	r3, r3, #2
 800089c:	210f      	movs	r1, #15
 800089e:	fa01 f303 	lsl.w	r3, r1, r3
 80008a2:	43db      	mvns	r3, r3
 80008a4:	4946      	ldr	r1, [pc, #280]	@ (80009c0 <Hal_GPIO_vSetupAlternateFunction+0x294>)
 80008a6:	4013      	ands	r3, r2
 80008a8:	620b      	str	r3, [r1, #32]
			    GPIOD->AFRL |=  (u8AltFunc << (u8Pin*4));  // AF7 = USART3
 80008aa:	4b45      	ldr	r3, [pc, #276]	@ (80009c0 <Hal_GPIO_vSetupAlternateFunction+0x294>)
 80008ac:	6a1a      	ldr	r2, [r3, #32]
 80008ae:	79b9      	ldrb	r1, [r7, #6]
 80008b0:	79fb      	ldrb	r3, [r7, #7]
 80008b2:	009b      	lsls	r3, r3, #2
 80008b4:	fa01 f303 	lsl.w	r3, r1, r3
 80008b8:	4941      	ldr	r1, [pc, #260]	@ (80009c0 <Hal_GPIO_vSetupAlternateFunction+0x294>)
 80008ba:	4313      	orrs	r3, r2
 80008bc:	620b      	str	r3, [r1, #32]
			else
			{
			    GPIOD->AFRH &= ~(0xF << (u8Pin*4));  // Clear AFR for PB9
			    GPIOD->AFRL |=  (u8AltFunc << (u8Pin*4));
			}
			break;
 80008be:	e074      	b.n	80009aa <Hal_GPIO_vSetupAlternateFunction+0x27e>
			    GPIOD->AFRH &= ~(0xF << (u8Pin*4));  // Clear AFR for PB9
 80008c0:	4b3f      	ldr	r3, [pc, #252]	@ (80009c0 <Hal_GPIO_vSetupAlternateFunction+0x294>)
 80008c2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80008c4:	79fb      	ldrb	r3, [r7, #7]
 80008c6:	009b      	lsls	r3, r3, #2
 80008c8:	210f      	movs	r1, #15
 80008ca:	fa01 f303 	lsl.w	r3, r1, r3
 80008ce:	43db      	mvns	r3, r3
 80008d0:	493b      	ldr	r1, [pc, #236]	@ (80009c0 <Hal_GPIO_vSetupAlternateFunction+0x294>)
 80008d2:	4013      	ands	r3, r2
 80008d4:	624b      	str	r3, [r1, #36]	@ 0x24
			    GPIOD->AFRL |=  (u8AltFunc << (u8Pin*4));
 80008d6:	4b3a      	ldr	r3, [pc, #232]	@ (80009c0 <Hal_GPIO_vSetupAlternateFunction+0x294>)
 80008d8:	6a1a      	ldr	r2, [r3, #32]
 80008da:	79b9      	ldrb	r1, [r7, #6]
 80008dc:	79fb      	ldrb	r3, [r7, #7]
 80008de:	009b      	lsls	r3, r3, #2
 80008e0:	fa01 f303 	lsl.w	r3, r1, r3
 80008e4:	4936      	ldr	r1, [pc, #216]	@ (80009c0 <Hal_GPIO_vSetupAlternateFunction+0x294>)
 80008e6:	4313      	orrs	r3, r2
 80008e8:	620b      	str	r3, [r1, #32]
			break;
 80008ea:	e05e      	b.n	80009aa <Hal_GPIO_vSetupAlternateFunction+0x27e>

		case GPIO_E:
			if (u8Pin <= 7)
 80008ec:	79fb      	ldrb	r3, [r7, #7]
 80008ee:	2b07      	cmp	r3, #7
 80008f0:	d815      	bhi.n	800091e <Hal_GPIO_vSetupAlternateFunction+0x1f2>
			{
			    GPIOE->AFRL &= ~(0xF << (u8Pin*4));  // Clear AFR for PB9
 80008f2:	4b34      	ldr	r3, [pc, #208]	@ (80009c4 <Hal_GPIO_vSetupAlternateFunction+0x298>)
 80008f4:	6a1a      	ldr	r2, [r3, #32]
 80008f6:	79fb      	ldrb	r3, [r7, #7]
 80008f8:	009b      	lsls	r3, r3, #2
 80008fa:	210f      	movs	r1, #15
 80008fc:	fa01 f303 	lsl.w	r3, r1, r3
 8000900:	43db      	mvns	r3, r3
 8000902:	4930      	ldr	r1, [pc, #192]	@ (80009c4 <Hal_GPIO_vSetupAlternateFunction+0x298>)
 8000904:	4013      	ands	r3, r2
 8000906:	620b      	str	r3, [r1, #32]
			    GPIOE->AFRL |=  (u8AltFunc << (u8Pin*4));  // AF7 = USART3
 8000908:	4b2e      	ldr	r3, [pc, #184]	@ (80009c4 <Hal_GPIO_vSetupAlternateFunction+0x298>)
 800090a:	6a1a      	ldr	r2, [r3, #32]
 800090c:	79b9      	ldrb	r1, [r7, #6]
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	009b      	lsls	r3, r3, #2
 8000912:	fa01 f303 	lsl.w	r3, r1, r3
 8000916:	492b      	ldr	r1, [pc, #172]	@ (80009c4 <Hal_GPIO_vSetupAlternateFunction+0x298>)
 8000918:	4313      	orrs	r3, r2
 800091a:	620b      	str	r3, [r1, #32]
			else
			{
			    GPIOE->AFRH &= ~(0xF << (u8Pin*4));  // Clear AFR for PB9
			    GPIOE->AFRL |=  (u8AltFunc << (u8Pin*4));
			}
			break;
 800091c:	e045      	b.n	80009aa <Hal_GPIO_vSetupAlternateFunction+0x27e>
			    GPIOE->AFRH &= ~(0xF << (u8Pin*4));  // Clear AFR for PB9
 800091e:	4b29      	ldr	r3, [pc, #164]	@ (80009c4 <Hal_GPIO_vSetupAlternateFunction+0x298>)
 8000920:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000922:	79fb      	ldrb	r3, [r7, #7]
 8000924:	009b      	lsls	r3, r3, #2
 8000926:	210f      	movs	r1, #15
 8000928:	fa01 f303 	lsl.w	r3, r1, r3
 800092c:	43db      	mvns	r3, r3
 800092e:	4925      	ldr	r1, [pc, #148]	@ (80009c4 <Hal_GPIO_vSetupAlternateFunction+0x298>)
 8000930:	4013      	ands	r3, r2
 8000932:	624b      	str	r3, [r1, #36]	@ 0x24
			    GPIOE->AFRL |=  (u8AltFunc << (u8Pin*4));
 8000934:	4b23      	ldr	r3, [pc, #140]	@ (80009c4 <Hal_GPIO_vSetupAlternateFunction+0x298>)
 8000936:	6a1a      	ldr	r2, [r3, #32]
 8000938:	79b9      	ldrb	r1, [r7, #6]
 800093a:	79fb      	ldrb	r3, [r7, #7]
 800093c:	009b      	lsls	r3, r3, #2
 800093e:	fa01 f303 	lsl.w	r3, r1, r3
 8000942:	4920      	ldr	r1, [pc, #128]	@ (80009c4 <Hal_GPIO_vSetupAlternateFunction+0x298>)
 8000944:	4313      	orrs	r3, r2
 8000946:	620b      	str	r3, [r1, #32]
			break;
 8000948:	e02f      	b.n	80009aa <Hal_GPIO_vSetupAlternateFunction+0x27e>

		case GPIO_H:
			if (u8Pin <= 7)
 800094a:	79fb      	ldrb	r3, [r7, #7]
 800094c:	2b07      	cmp	r3, #7
 800094e:	d815      	bhi.n	800097c <Hal_GPIO_vSetupAlternateFunction+0x250>
			{
			    GPIOH->AFRL &= ~(0xF << (u8Pin*4));  // Clear AFR for PB9
 8000950:	4b1d      	ldr	r3, [pc, #116]	@ (80009c8 <Hal_GPIO_vSetupAlternateFunction+0x29c>)
 8000952:	6a1a      	ldr	r2, [r3, #32]
 8000954:	79fb      	ldrb	r3, [r7, #7]
 8000956:	009b      	lsls	r3, r3, #2
 8000958:	210f      	movs	r1, #15
 800095a:	fa01 f303 	lsl.w	r3, r1, r3
 800095e:	43db      	mvns	r3, r3
 8000960:	4919      	ldr	r1, [pc, #100]	@ (80009c8 <Hal_GPIO_vSetupAlternateFunction+0x29c>)
 8000962:	4013      	ands	r3, r2
 8000964:	620b      	str	r3, [r1, #32]
			    GPIOH->AFRL |=  (u8AltFunc << (u8Pin*4));  // AF7 = USART3
 8000966:	4b18      	ldr	r3, [pc, #96]	@ (80009c8 <Hal_GPIO_vSetupAlternateFunction+0x29c>)
 8000968:	6a1a      	ldr	r2, [r3, #32]
 800096a:	79b9      	ldrb	r1, [r7, #6]
 800096c:	79fb      	ldrb	r3, [r7, #7]
 800096e:	009b      	lsls	r3, r3, #2
 8000970:	fa01 f303 	lsl.w	r3, r1, r3
 8000974:	4914      	ldr	r1, [pc, #80]	@ (80009c8 <Hal_GPIO_vSetupAlternateFunction+0x29c>)
 8000976:	4313      	orrs	r3, r2
 8000978:	620b      	str	r3, [r1, #32]
			else
			{
			    GPIOH->AFRH &= ~(0xF << (u8Pin*4));  // Clear AFR for PB9
			    GPIOH->AFRL |=  (u8AltFunc << (u8Pin*4));
			}
			break;
 800097a:	e016      	b.n	80009aa <Hal_GPIO_vSetupAlternateFunction+0x27e>
			    GPIOH->AFRH &= ~(0xF << (u8Pin*4));  // Clear AFR for PB9
 800097c:	4b12      	ldr	r3, [pc, #72]	@ (80009c8 <Hal_GPIO_vSetupAlternateFunction+0x29c>)
 800097e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000980:	79fb      	ldrb	r3, [r7, #7]
 8000982:	009b      	lsls	r3, r3, #2
 8000984:	210f      	movs	r1, #15
 8000986:	fa01 f303 	lsl.w	r3, r1, r3
 800098a:	43db      	mvns	r3, r3
 800098c:	490e      	ldr	r1, [pc, #56]	@ (80009c8 <Hal_GPIO_vSetupAlternateFunction+0x29c>)
 800098e:	4013      	ands	r3, r2
 8000990:	624b      	str	r3, [r1, #36]	@ 0x24
			    GPIOH->AFRL |=  (u8AltFunc << (u8Pin*4));
 8000992:	4b0d      	ldr	r3, [pc, #52]	@ (80009c8 <Hal_GPIO_vSetupAlternateFunction+0x29c>)
 8000994:	6a1a      	ldr	r2, [r3, #32]
 8000996:	79b9      	ldrb	r1, [r7, #6]
 8000998:	79fb      	ldrb	r3, [r7, #7]
 800099a:	009b      	lsls	r3, r3, #2
 800099c:	fa01 f303 	lsl.w	r3, r1, r3
 80009a0:	4909      	ldr	r1, [pc, #36]	@ (80009c8 <Hal_GPIO_vSetupAlternateFunction+0x29c>)
 80009a2:	4313      	orrs	r3, r2
 80009a4:	620b      	str	r3, [r1, #32]
			break;
 80009a6:	e000      	b.n	80009aa <Hal_GPIO_vSetupAlternateFunction+0x27e>

		default:

			break;
 80009a8:	bf00      	nop
	}
}
 80009aa:	bf00      	nop
 80009ac:	370c      	adds	r7, #12
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	48000400 	.word	0x48000400
 80009bc:	48000800 	.word	0x48000800
 80009c0:	48000c00 	.word	0x48000c00
 80009c4:	48001000 	.word	0x48001000
 80009c8:	48001400 	.word	0x48001400

080009cc <Hal_I2C_vInitMaster>:
		{0xF8, 0x14, 0x12, 0x11, 0x11, 0x12, 0x14, 0xF8}
};

/* Configure the CR2 register for master transmission */
void Hal_I2C_vInitMaster(uint8_t address)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	4603      	mov	r3, r0
 80009d4:	71fb      	strb	r3, [r7, #7]
	I2C1->TIMINGR |= (0x1 < 28);		// PRESC
 80009d6:	4b1f      	ldr	r3, [pc, #124]	@ (8000a54 <Hal_I2C_vInitMaster+0x88>)
 80009d8:	691b      	ldr	r3, [r3, #16]
 80009da:	4a1e      	ldr	r2, [pc, #120]	@ (8000a54 <Hal_I2C_vInitMaster+0x88>)
 80009dc:	f043 0301 	orr.w	r3, r3, #1
 80009e0:	6113      	str	r3, [r2, #16]
	I2C1->TIMINGR |= (0x4 < 20);		// SCLDEL
 80009e2:	4b1c      	ldr	r3, [pc, #112]	@ (8000a54 <Hal_I2C_vInitMaster+0x88>)
 80009e4:	691b      	ldr	r3, [r3, #16]
 80009e6:	4a1b      	ldr	r2, [pc, #108]	@ (8000a54 <Hal_I2C_vInitMaster+0x88>)
 80009e8:	f043 0301 	orr.w	r3, r3, #1
 80009ec:	6113      	str	r3, [r2, #16]
	I2C1->TIMINGR |= (0x2 < 26);		// SDADEL
 80009ee:	4b19      	ldr	r3, [pc, #100]	@ (8000a54 <Hal_I2C_vInitMaster+0x88>)
 80009f0:	691b      	ldr	r3, [r3, #16]
 80009f2:	4a18      	ldr	r2, [pc, #96]	@ (8000a54 <Hal_I2C_vInitMaster+0x88>)
 80009f4:	f043 0301 	orr.w	r3, r3, #1
 80009f8:	6113      	str	r3, [r2, #16]
	I2C1->TIMINGR |= (0xF < 8);			// SCLH
 80009fa:	4b16      	ldr	r3, [pc, #88]	@ (8000a54 <Hal_I2C_vInitMaster+0x88>)
 80009fc:	4a15      	ldr	r2, [pc, #84]	@ (8000a54 <Hal_I2C_vInitMaster+0x88>)
 80009fe:	691b      	ldr	r3, [r3, #16]
 8000a00:	6113      	str	r3, [r2, #16]
	I2C1->TIMINGR |= (0x13 < 0);		// SCLL
 8000a02:	4b14      	ldr	r3, [pc, #80]	@ (8000a54 <Hal_I2C_vInitMaster+0x88>)
 8000a04:	4a13      	ldr	r2, [pc, #76]	@ (8000a54 <Hal_I2C_vInitMaster+0x88>)
 8000a06:	691b      	ldr	r3, [r3, #16]
 8000a08:	6113      	str	r3, [r2, #16]

	I2C1->CR2 |= (address << 1); // Set the slave address
 8000a0a:	4b12      	ldr	r3, [pc, #72]	@ (8000a54 <Hal_I2C_vInitMaster+0x88>)
 8000a0c:	685a      	ldr	r2, [r3, #4]
 8000a0e:	79fb      	ldrb	r3, [r7, #7]
 8000a10:	005b      	lsls	r3, r3, #1
 8000a12:	4910      	ldr	r1, [pc, #64]	@ (8000a54 <Hal_I2C_vInitMaster+0x88>)
 8000a14:	4313      	orrs	r3, r2
 8000a16:	604b      	str	r3, [r1, #4]
	I2C1->CR2 &= ~(1U << 10);	// Master request write transfer
 8000a18:	4b0e      	ldr	r3, [pc, #56]	@ (8000a54 <Hal_I2C_vInitMaster+0x88>)
 8000a1a:	685b      	ldr	r3, [r3, #4]
 8000a1c:	4a0d      	ldr	r2, [pc, #52]	@ (8000a54 <Hal_I2C_vInitMaster+0x88>)
 8000a1e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000a22:	6053      	str	r3, [r2, #4]
	I2C1->CR2 &= ~(1U << 11);	// 7bit addressing
 8000a24:	4b0b      	ldr	r3, [pc, #44]	@ (8000a54 <Hal_I2C_vInitMaster+0x88>)
 8000a26:	685b      	ldr	r3, [r3, #4]
 8000a28:	4a0a      	ldr	r2, [pc, #40]	@ (8000a54 <Hal_I2C_vInitMaster+0x88>)
 8000a2a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000a2e:	6053      	str	r3, [r2, #4]
	I2C1->CR2 |= (8 << 16); 	// 8 bytes to send
 8000a30:	4b08      	ldr	r3, [pc, #32]	@ (8000a54 <Hal_I2C_vInitMaster+0x88>)
 8000a32:	685b      	ldr	r3, [r3, #4]
 8000a34:	4a07      	ldr	r2, [pc, #28]	@ (8000a54 <Hal_I2C_vInitMaster+0x88>)
 8000a36:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000a3a:	6053      	str	r3, [r2, #4]

//	I2C1->TIMINGR = 0x0010061A;			// Config for 8MHz clock and 400kHz transmission

	I2C1->CR1 |= (1U << 0);  // Enable peripheral
 8000a3c:	4b05      	ldr	r3, [pc, #20]	@ (8000a54 <Hal_I2C_vInitMaster+0x88>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a04      	ldr	r2, [pc, #16]	@ (8000a54 <Hal_I2C_vInitMaster+0x88>)
 8000a42:	f043 0301 	orr.w	r3, r3, #1
 8000a46:	6013      	str	r3, [r2, #0]
}
 8000a48:	bf00      	nop
 8000a4a:	370c      	adds	r7, #12
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr
 8000a54:	40005400 	.word	0x40005400

08000a58 <Hal_I2C_vWriteCommand>:

void Hal_I2C_vWriteCommand(uint8_t addr, uint8_t cmd)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	4603      	mov	r3, r0
 8000a60:	460a      	mov	r2, r1
 8000a62:	71fb      	strb	r3, [r7, #7]
 8000a64:	4613      	mov	r3, r2
 8000a66:	71bb      	strb	r3, [r7, #6]
    // Clear previous settings
    I2C1->CR2 = 0;
 8000a68:	4b1b      	ldr	r3, [pc, #108]	@ (8000ad8 <Hal_I2C_vWriteCommand+0x80>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	605a      	str	r2, [r3, #4]

    // Set slave address (bits [7:1]) and number of bytes (bits [23:16])
    I2C1->CR2 = ((addr << 1) & 0xFE) | (2 << 16); // 2 bytes (control + data)
 8000a6e:	79fb      	ldrb	r3, [r7, #7]
 8000a70:	005b      	lsls	r3, r3, #1
 8000a72:	b2db      	uxtb	r3, r3
 8000a74:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000a78:	4b17      	ldr	r3, [pc, #92]	@ (8000ad8 <Hal_I2C_vWriteCommand+0x80>)
 8000a7a:	605a      	str	r2, [r3, #4]

    // Set START bit (bit 13)
    I2C1->CR2 |= (1U << 13);
 8000a7c:	4b16      	ldr	r3, [pc, #88]	@ (8000ad8 <Hal_I2C_vWriteCommand+0x80>)
 8000a7e:	685b      	ldr	r3, [r3, #4]
 8000a80:	4a15      	ldr	r2, [pc, #84]	@ (8000ad8 <Hal_I2C_vWriteCommand+0x80>)
 8000a82:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000a86:	6053      	str	r3, [r2, #4]

    // Wait until TXIS (bit 1 of ISR) is set â ready to transmit
    while (!(I2C1->ISR & (1U << 1)));
 8000a88:	bf00      	nop
 8000a8a:	4b13      	ldr	r3, [pc, #76]	@ (8000ad8 <Hal_I2C_vWriteCommand+0x80>)
 8000a8c:	699b      	ldr	r3, [r3, #24]
 8000a8e:	f003 0302 	and.w	r3, r3, #2
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d0f9      	beq.n	8000a8a <Hal_I2C_vWriteCommand+0x32>

    // Send control byte (0x00 = command)
    I2C1->TXDR = 0x00;
 8000a96:	4b10      	ldr	r3, [pc, #64]	@ (8000ad8 <Hal_I2C_vWriteCommand+0x80>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	629a      	str	r2, [r3, #40]	@ 0x28

    // Wait for next TXIS
    while (!(I2C1->ISR & (1U << 1)));
 8000a9c:	bf00      	nop
 8000a9e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad8 <Hal_I2C_vWriteCommand+0x80>)
 8000aa0:	699b      	ldr	r3, [r3, #24]
 8000aa2:	f003 0302 	and.w	r3, r3, #2
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d0f9      	beq.n	8000a9e <Hal_I2C_vWriteCommand+0x46>

    // Send actual command byte
    I2C1->TXDR = cmd;
 8000aaa:	4a0b      	ldr	r2, [pc, #44]	@ (8000ad8 <Hal_I2C_vWriteCommand+0x80>)
 8000aac:	79bb      	ldrb	r3, [r7, #6]
 8000aae:	6293      	str	r3, [r2, #40]	@ 0x28

    // Wait until TC (bit 6 of ISR) = Transfer Complete
    while (!(I2C1->ISR & (1U << 6)));
 8000ab0:	bf00      	nop
 8000ab2:	4b09      	ldr	r3, [pc, #36]	@ (8000ad8 <Hal_I2C_vWriteCommand+0x80>)
 8000ab4:	699b      	ldr	r3, [r3, #24]
 8000ab6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d0f9      	beq.n	8000ab2 <Hal_I2C_vWriteCommand+0x5a>

    // Set STOP (bit 14 of CR2)
    I2C1->CR2 |= (1U << 14);
 8000abe:	4b06      	ldr	r3, [pc, #24]	@ (8000ad8 <Hal_I2C_vWriteCommand+0x80>)
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	4a05      	ldr	r2, [pc, #20]	@ (8000ad8 <Hal_I2C_vWriteCommand+0x80>)
 8000ac4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ac8:	6053      	str	r3, [r2, #4]
}
 8000aca:	bf00      	nop
 8000acc:	370c      	adds	r7, #12
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	40005400 	.word	0x40005400

08000adc <SSD1306_vInit>:

void SSD1306_vInit(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
    Hal_I2C_vWriteCommand(OLED, 0xAE); // Display off
 8000ae0:	21ae      	movs	r1, #174	@ 0xae
 8000ae2:	203c      	movs	r0, #60	@ 0x3c
 8000ae4:	f7ff ffb8 	bl	8000a58 <Hal_I2C_vWriteCommand>
    Hal_I2C_vWriteCommand(OLED, 0xD5); Hal_I2C_vWriteCommand(OLED, 0x80); // Clock divide
 8000ae8:	21d5      	movs	r1, #213	@ 0xd5
 8000aea:	203c      	movs	r0, #60	@ 0x3c
 8000aec:	f7ff ffb4 	bl	8000a58 <Hal_I2C_vWriteCommand>
 8000af0:	2180      	movs	r1, #128	@ 0x80
 8000af2:	203c      	movs	r0, #60	@ 0x3c
 8000af4:	f7ff ffb0 	bl	8000a58 <Hal_I2C_vWriteCommand>
    Hal_I2C_vWriteCommand(OLED, 0xA8); Hal_I2C_vWriteCommand(OLED, 0x1F); // Multiplex = 32
 8000af8:	21a8      	movs	r1, #168	@ 0xa8
 8000afa:	203c      	movs	r0, #60	@ 0x3c
 8000afc:	f7ff ffac 	bl	8000a58 <Hal_I2C_vWriteCommand>
 8000b00:	211f      	movs	r1, #31
 8000b02:	203c      	movs	r0, #60	@ 0x3c
 8000b04:	f7ff ffa8 	bl	8000a58 <Hal_I2C_vWriteCommand>
    Hal_I2C_vWriteCommand(OLED, 0xD3); Hal_I2C_vWriteCommand(OLED, 0x00); // Offset
 8000b08:	21d3      	movs	r1, #211	@ 0xd3
 8000b0a:	203c      	movs	r0, #60	@ 0x3c
 8000b0c:	f7ff ffa4 	bl	8000a58 <Hal_I2C_vWriteCommand>
 8000b10:	2100      	movs	r1, #0
 8000b12:	203c      	movs	r0, #60	@ 0x3c
 8000b14:	f7ff ffa0 	bl	8000a58 <Hal_I2C_vWriteCommand>
    Hal_I2C_vWriteCommand(OLED, 0x40); // Start line
 8000b18:	2140      	movs	r1, #64	@ 0x40
 8000b1a:	203c      	movs	r0, #60	@ 0x3c
 8000b1c:	f7ff ff9c 	bl	8000a58 <Hal_I2C_vWriteCommand>
    Hal_I2C_vWriteCommand(OLED, 0x8D); Hal_I2C_vWriteCommand(OLED, 0x14); // Charge pump on
 8000b20:	218d      	movs	r1, #141	@ 0x8d
 8000b22:	203c      	movs	r0, #60	@ 0x3c
 8000b24:	f7ff ff98 	bl	8000a58 <Hal_I2C_vWriteCommand>
 8000b28:	2114      	movs	r1, #20
 8000b2a:	203c      	movs	r0, #60	@ 0x3c
 8000b2c:	f7ff ff94 	bl	8000a58 <Hal_I2C_vWriteCommand>
    Hal_I2C_vWriteCommand(OLED, 0x20); Hal_I2C_vWriteCommand(OLED, 0x00); // Horizontal addressing
 8000b30:	2120      	movs	r1, #32
 8000b32:	203c      	movs	r0, #60	@ 0x3c
 8000b34:	f7ff ff90 	bl	8000a58 <Hal_I2C_vWriteCommand>
 8000b38:	2100      	movs	r1, #0
 8000b3a:	203c      	movs	r0, #60	@ 0x3c
 8000b3c:	f7ff ff8c 	bl	8000a58 <Hal_I2C_vWriteCommand>
    Hal_I2C_vWriteCommand(OLED, 0xA1); // Segment remap
 8000b40:	21a1      	movs	r1, #161	@ 0xa1
 8000b42:	203c      	movs	r0, #60	@ 0x3c
 8000b44:	f7ff ff88 	bl	8000a58 <Hal_I2C_vWriteCommand>
    Hal_I2C_vWriteCommand(OLED, 0xC8); // COM scan direction
 8000b48:	21c8      	movs	r1, #200	@ 0xc8
 8000b4a:	203c      	movs	r0, #60	@ 0x3c
 8000b4c:	f7ff ff84 	bl	8000a58 <Hal_I2C_vWriteCommand>
    Hal_I2C_vWriteCommand(OLED, 0xDA); Hal_I2C_vWriteCommand(OLED, 0x02); // COM config
 8000b50:	21da      	movs	r1, #218	@ 0xda
 8000b52:	203c      	movs	r0, #60	@ 0x3c
 8000b54:	f7ff ff80 	bl	8000a58 <Hal_I2C_vWriteCommand>
 8000b58:	2102      	movs	r1, #2
 8000b5a:	203c      	movs	r0, #60	@ 0x3c
 8000b5c:	f7ff ff7c 	bl	8000a58 <Hal_I2C_vWriteCommand>
    Hal_I2C_vWriteCommand(OLED, 0x81); Hal_I2C_vWriteCommand(OLED, 0x8F); // Contrast
 8000b60:	2181      	movs	r1, #129	@ 0x81
 8000b62:	203c      	movs	r0, #60	@ 0x3c
 8000b64:	f7ff ff78 	bl	8000a58 <Hal_I2C_vWriteCommand>
 8000b68:	218f      	movs	r1, #143	@ 0x8f
 8000b6a:	203c      	movs	r0, #60	@ 0x3c
 8000b6c:	f7ff ff74 	bl	8000a58 <Hal_I2C_vWriteCommand>
    Hal_I2C_vWriteCommand(OLED, 0xD9); Hal_I2C_vWriteCommand(OLED, 0xF1); // Precharge
 8000b70:	21d9      	movs	r1, #217	@ 0xd9
 8000b72:	203c      	movs	r0, #60	@ 0x3c
 8000b74:	f7ff ff70 	bl	8000a58 <Hal_I2C_vWriteCommand>
 8000b78:	21f1      	movs	r1, #241	@ 0xf1
 8000b7a:	203c      	movs	r0, #60	@ 0x3c
 8000b7c:	f7ff ff6c 	bl	8000a58 <Hal_I2C_vWriteCommand>
    Hal_I2C_vWriteCommand(OLED, 0xDB); Hal_I2C_vWriteCommand(OLED, 0x40); // VCOM detect
 8000b80:	21db      	movs	r1, #219	@ 0xdb
 8000b82:	203c      	movs	r0, #60	@ 0x3c
 8000b84:	f7ff ff68 	bl	8000a58 <Hal_I2C_vWriteCommand>
 8000b88:	2140      	movs	r1, #64	@ 0x40
 8000b8a:	203c      	movs	r0, #60	@ 0x3c
 8000b8c:	f7ff ff64 	bl	8000a58 <Hal_I2C_vWriteCommand>
    Hal_I2C_vWriteCommand(OLED, 0xA4); // Resume RAM content
 8000b90:	21a4      	movs	r1, #164	@ 0xa4
 8000b92:	203c      	movs	r0, #60	@ 0x3c
 8000b94:	f7ff ff60 	bl	8000a58 <Hal_I2C_vWriteCommand>
    Hal_I2C_vWriteCommand(OLED, 0xA6); // Normal display
 8000b98:	21a6      	movs	r1, #166	@ 0xa6
 8000b9a:	203c      	movs	r0, #60	@ 0x3c
 8000b9c:	f7ff ff5c 	bl	8000a58 <Hal_I2C_vWriteCommand>
    Hal_I2C_vWriteCommand(OLED, 0xAF); // Display ON
 8000ba0:	21af      	movs	r1, #175	@ 0xaf
 8000ba2:	203c      	movs	r0, #60	@ 0x3c
 8000ba4:	f7ff ff58 	bl	8000a58 <Hal_I2C_vWriteCommand>
}
 8000ba8:	bf00      	nop
 8000baa:	bd80      	pop	{r7, pc}

08000bac <SSD1306_vWriteData>:

void SSD1306_vWriteData(uint8_t addr, uint8_t data)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	460a      	mov	r2, r1
 8000bb6:	71fb      	strb	r3, [r7, #7]
 8000bb8:	4613      	mov	r3, r2
 8000bba:	71bb      	strb	r3, [r7, #6]
    // Clear previous transfer settings
    I2C1->CR2 = 0;
 8000bbc:	4b1b      	ldr	r3, [pc, #108]	@ (8000c2c <SSD1306_vWriteData+0x80>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	605a      	str	r2, [r3, #4]

    // Set slave address and number of bytes to send (2 bytes: control + data)
    I2C1->CR2 = ((addr << 1) & 0xFE) | (2 << 16); // 7-bit address, write mode
 8000bc2:	79fb      	ldrb	r3, [r7, #7]
 8000bc4:	005b      	lsls	r3, r3, #1
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000bcc:	4b17      	ldr	r3, [pc, #92]	@ (8000c2c <SSD1306_vWriteData+0x80>)
 8000bce:	605a      	str	r2, [r3, #4]

    // Start the transmission
    I2C1->CR2 |= (1U << 13); // START
 8000bd0:	4b16      	ldr	r3, [pc, #88]	@ (8000c2c <SSD1306_vWriteData+0x80>)
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	4a15      	ldr	r2, [pc, #84]	@ (8000c2c <SSD1306_vWriteData+0x80>)
 8000bd6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000bda:	6053      	str	r3, [r2, #4]

    // Wait for TXIS (ready to transmit)
    while (!(I2C1->ISR & (1U << 1)));
 8000bdc:	bf00      	nop
 8000bde:	4b13      	ldr	r3, [pc, #76]	@ (8000c2c <SSD1306_vWriteData+0x80>)
 8000be0:	699b      	ldr	r3, [r3, #24]
 8000be2:	f003 0302 	and.w	r3, r3, #2
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d0f9      	beq.n	8000bde <SSD1306_vWriteData+0x32>

    // Send control byte: 0x40 indicates "data" follows
    I2C1->TXDR = 0x40;
 8000bea:	4b10      	ldr	r3, [pc, #64]	@ (8000c2c <SSD1306_vWriteData+0x80>)
 8000bec:	2240      	movs	r2, #64	@ 0x40
 8000bee:	629a      	str	r2, [r3, #40]	@ 0x28

    // Wait for TXIS again
    while (!(I2C1->ISR & (1U << 1)));
 8000bf0:	bf00      	nop
 8000bf2:	4b0e      	ldr	r3, [pc, #56]	@ (8000c2c <SSD1306_vWriteData+0x80>)
 8000bf4:	699b      	ldr	r3, [r3, #24]
 8000bf6:	f003 0302 	and.w	r3, r3, #2
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d0f9      	beq.n	8000bf2 <SSD1306_vWriteData+0x46>

    // Send actual data byte
    I2C1->TXDR = data;
 8000bfe:	4a0b      	ldr	r2, [pc, #44]	@ (8000c2c <SSD1306_vWriteData+0x80>)
 8000c00:	79bb      	ldrb	r3, [r7, #6]
 8000c02:	6293      	str	r3, [r2, #40]	@ 0x28

    // Wait until transfer is complete
    while (!(I2C1->ISR & (1U << 6))); // TC
 8000c04:	bf00      	nop
 8000c06:	4b09      	ldr	r3, [pc, #36]	@ (8000c2c <SSD1306_vWriteData+0x80>)
 8000c08:	699b      	ldr	r3, [r3, #24]
 8000c0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d0f9      	beq.n	8000c06 <SSD1306_vWriteData+0x5a>

    // Send STOP condition
    I2C1->CR2 |= (1U << 14);
 8000c12:	4b06      	ldr	r3, [pc, #24]	@ (8000c2c <SSD1306_vWriteData+0x80>)
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	4a05      	ldr	r2, [pc, #20]	@ (8000c2c <SSD1306_vWriteData+0x80>)
 8000c18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c1c:	6053      	str	r3, [r2, #4]
}
 8000c1e:	bf00      	nop
 8000c20:	370c      	adds	r7, #12
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	40005400 	.word	0x40005400

08000c30 <SSD1306_vSendCommandBlock>:

void SSD1306_vSendCommandBlock(uint8_t page, uint8_t columnLow, uint8_t columnHigh)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	4603      	mov	r3, r0
 8000c38:	71fb      	strb	r3, [r7, #7]
 8000c3a:	460b      	mov	r3, r1
 8000c3c:	71bb      	strb	r3, [r7, #6]
 8000c3e:	4613      	mov	r3, r2
 8000c40:	717b      	strb	r3, [r7, #5]
    Hal_I2C_vWriteCommand(OLED, 0xB0 | (page & 0x03));     // Page address
 8000c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c46:	f003 0303 	and.w	r3, r3, #3
 8000c4a:	b25b      	sxtb	r3, r3
 8000c4c:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 8000c50:	b25b      	sxtb	r3, r3
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	4619      	mov	r1, r3
 8000c56:	203c      	movs	r0, #60	@ 0x3c
 8000c58:	f7ff fefe 	bl	8000a58 <Hal_I2C_vWriteCommand>
    Hal_I2C_vWriteCommand(OLED, 0x00 | (columnLow & 0x0F)); // Lower column
 8000c5c:	79bb      	ldrb	r3, [r7, #6]
 8000c5e:	f003 030f 	and.w	r3, r3, #15
 8000c62:	b2db      	uxtb	r3, r3
 8000c64:	4619      	mov	r1, r3
 8000c66:	203c      	movs	r0, #60	@ 0x3c
 8000c68:	f7ff fef6 	bl	8000a58 <Hal_I2C_vWriteCommand>
    Hal_I2C_vWriteCommand(OLED, 0x10 | (columnHigh & 0x0F)); // Upper column
 8000c6c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000c70:	f003 030f 	and.w	r3, r3, #15
 8000c74:	b25b      	sxtb	r3, r3
 8000c76:	f043 0310 	orr.w	r3, r3, #16
 8000c7a:	b25b      	sxtb	r3, r3
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	4619      	mov	r1, r3
 8000c80:	203c      	movs	r0, #60	@ 0x3c
 8000c82:	f7ff fee9 	bl	8000a58 <Hal_I2C_vWriteCommand>
}
 8000c86:	bf00      	nop
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <SSD1306_vSendData>:

void SSD1306_vSendData(uint8_t data)
{
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	b082      	sub	sp, #8
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	4603      	mov	r3, r0
 8000c96:	71fb      	strb	r3, [r7, #7]
	// Send the data
	SSD1306_vWriteData(OLED, data);
 8000c98:	79fb      	ldrb	r3, [r7, #7]
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	203c      	movs	r0, #60	@ 0x3c
 8000c9e:	f7ff ff85 	bl	8000bac <SSD1306_vWriteData>
}
 8000ca2:	bf00      	nop
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}

08000caa <SSD1306_vResetDisplay>:

void SSD1306_vResetDisplay(void)
{
 8000caa:	b580      	push	{r7, lr}
 8000cac:	b084      	sub	sp, #16
 8000cae:	af00      	add	r7, sp, #0
    for (int k = 0; k < 4; k++)
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	60fb      	str	r3, [r7, #12]
 8000cb4:	e020      	b.n	8000cf8 <SSD1306_vResetDisplay+0x4e>
    {
        for (int i = 0; i<128; i++)
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	60bb      	str	r3, [r7, #8]
 8000cba:	e017      	b.n	8000cec <SSD1306_vResetDisplay+0x42>
        {
        	uint8_t lower = (i & 0x0F);
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	b2db      	uxtb	r3, r3
 8000cc0:	f003 030f 	and.w	r3, r3, #15
 8000cc4:	71fb      	strb	r3, [r7, #7]
        	uint8_t upper = ((i >> 4) & 0x0F);
 8000cc6:	68bb      	ldr	r3, [r7, #8]
 8000cc8:	111b      	asrs	r3, r3, #4
 8000cca:	b2db      	uxtb	r3, r3
 8000ccc:	f003 030f 	and.w	r3, r3, #15
 8000cd0:	71bb      	strb	r3, [r7, #6]
            SSD1306_vSendCommandBlock(k, lower, upper);
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	79ba      	ldrb	r2, [r7, #6]
 8000cd8:	79f9      	ldrb	r1, [r7, #7]
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f7ff ffa8 	bl	8000c30 <SSD1306_vSendCommandBlock>
            SSD1306_vSendData(0x00);
 8000ce0:	2000      	movs	r0, #0
 8000ce2:	f7ff ffd4 	bl	8000c8e <SSD1306_vSendData>
        for (int i = 0; i<128; i++)
 8000ce6:	68bb      	ldr	r3, [r7, #8]
 8000ce8:	3301      	adds	r3, #1
 8000cea:	60bb      	str	r3, [r7, #8]
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	2b7f      	cmp	r3, #127	@ 0x7f
 8000cf0:	dde4      	ble.n	8000cbc <SSD1306_vResetDisplay+0x12>
    for (int k = 0; k < 4; k++)
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	2b03      	cmp	r3, #3
 8000cfc:	dddb      	ble.n	8000cb6 <SSD1306_vResetDisplay+0xc>
        }
    }
}
 8000cfe:	bf00      	nop
 8000d00:	bf00      	nop
 8000d02:	3710      	adds	r7, #16
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}

08000d08 <SSD1306_vWriteDisplay>:

void SSD1306_vWriteDisplay(uint8_t row, uint8_t position, uint8_t number)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b08e      	sub	sp, #56	@ 0x38
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	71fb      	strb	r3, [r7, #7]
 8000d12:	460b      	mov	r3, r1
 8000d14:	71bb      	strb	r3, [r7, #6]
 8000d16:	4613      	mov	r3, r2
 8000d18:	717b      	strb	r3, [r7, #5]
	/* The position range for element 0 is 0-7 */
	/* Depending on the position, 8 needs to be added for the cases */

	// Get the starting bit
	uint8_t AdjPosition = (position*8);
 8000d1a:	79bb      	ldrb	r3, [r7, #6]
 8000d1c:	00db      	lsls	r3, r3, #3
 8000d1e:	75fb      	strb	r3, [r7, #23]
	switch (row)
 8000d20:	79fb      	ldrb	r3, [r7, #7]
 8000d22:	2b03      	cmp	r3, #3
 8000d24:	f200 80c8 	bhi.w	8000eb8 <SSD1306_vWriteDisplay+0x1b0>
 8000d28:	a201      	add	r2, pc, #4	@ (adr r2, 8000d30 <SSD1306_vWriteDisplay+0x28>)
 8000d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d2e:	bf00      	nop
 8000d30:	08000d41 	.word	0x08000d41
 8000d34:	08000da1 	.word	0x08000da1
 8000d38:	08000e01 	.word	0x08000e01
 8000d3c:	08000e61 	.word	0x08000e61
	{
		case 0:
			uint8_t count = 0;
 8000d40:	2300      	movs	r3, #0
 8000d42:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			for (int i = AdjPosition; i < (AdjPosition+8); i++)
 8000d46:	7dfb      	ldrb	r3, [r7, #23]
 8000d48:	633b      	str	r3, [r7, #48]	@ 0x30
 8000d4a:	e023      	b.n	8000d94 <SSD1306_vWriteDisplay+0x8c>
			{
	        	uint8_t lower = (i & 0x0F);
 8000d4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d4e:	b2db      	uxtb	r3, r3
 8000d50:	f003 030f 	and.w	r3, r3, #15
 8000d54:	743b      	strb	r3, [r7, #16]
	        	uint8_t upper = ((i >> 4) & 0x0F);
 8000d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d58:	111b      	asrs	r3, r3, #4
 8000d5a:	b2db      	uxtb	r3, r3
 8000d5c:	f003 030f 	and.w	r3, r3, #15
 8000d60:	73fb      	strb	r3, [r7, #15]
	            SSD1306_vSendCommandBlock(row, lower, upper);
 8000d62:	7bfa      	ldrb	r2, [r7, #15]
 8000d64:	7c39      	ldrb	r1, [r7, #16]
 8000d66:	79fb      	ldrb	r3, [r7, #7]
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f7ff ff61 	bl	8000c30 <SSD1306_vSendCommandBlock>
	            SSD1306_vSendData(SSD1306_Numbers[number][count]);
 8000d6e:	797a      	ldrb	r2, [r7, #5]
 8000d70:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000d74:	4952      	ldr	r1, [pc, #328]	@ (8000ec0 <SSD1306_vWriteDisplay+0x1b8>)
 8000d76:	00d2      	lsls	r2, r2, #3
 8000d78:	440a      	add	r2, r1
 8000d7a:	4413      	add	r3, r2
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff ff85 	bl	8000c8e <SSD1306_vSendData>
	            count++;
 8000d84:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000d88:	3301      	adds	r3, #1
 8000d8a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			for (int i = AdjPosition; i < (AdjPosition+8); i++)
 8000d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d90:	3301      	adds	r3, #1
 8000d92:	633b      	str	r3, [r7, #48]	@ 0x30
 8000d94:	7dfb      	ldrb	r3, [r7, #23]
 8000d96:	3307      	adds	r3, #7
 8000d98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000d9a:	429a      	cmp	r2, r3
 8000d9c:	ddd6      	ble.n	8000d4c <SSD1306_vWriteDisplay+0x44>

			}
			break;
 8000d9e:	e08b      	b.n	8000eb8 <SSD1306_vWriteDisplay+0x1b0>

		case 1:
			uint8_t count1 = 0;
 8000da0:	2300      	movs	r3, #0
 8000da2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			for (int i = AdjPosition; i < (AdjPosition+8); i++)
 8000da6:	7dfb      	ldrb	r3, [r7, #23]
 8000da8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000daa:	e023      	b.n	8000df4 <SSD1306_vWriteDisplay+0xec>
			{
	        	uint8_t lower = (i & 0x0F);
 8000dac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	f003 030f 	and.w	r3, r3, #15
 8000db4:	74bb      	strb	r3, [r7, #18]
	        	uint8_t upper = ((i >> 4) & 0x0F);
 8000db6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000db8:	111b      	asrs	r3, r3, #4
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	f003 030f 	and.w	r3, r3, #15
 8000dc0:	747b      	strb	r3, [r7, #17]
	            SSD1306_vSendCommandBlock(row, lower, upper);
 8000dc2:	7c7a      	ldrb	r2, [r7, #17]
 8000dc4:	7cb9      	ldrb	r1, [r7, #18]
 8000dc6:	79fb      	ldrb	r3, [r7, #7]
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f7ff ff31 	bl	8000c30 <SSD1306_vSendCommandBlock>
	            SSD1306_vSendData(SSD1306_Numbers[number][count1]);
 8000dce:	797a      	ldrb	r2, [r7, #5]
 8000dd0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000dd4:	493a      	ldr	r1, [pc, #232]	@ (8000ec0 <SSD1306_vWriteDisplay+0x1b8>)
 8000dd6:	00d2      	lsls	r2, r2, #3
 8000dd8:	440a      	add	r2, r1
 8000dda:	4413      	add	r3, r2
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	4618      	mov	r0, r3
 8000de0:	f7ff ff55 	bl	8000c8e <SSD1306_vSendData>
	            count1++;
 8000de4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000de8:	3301      	adds	r3, #1
 8000dea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			for (int i = AdjPosition; i < (AdjPosition+8); i++)
 8000dee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000df0:	3301      	adds	r3, #1
 8000df2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000df4:	7dfb      	ldrb	r3, [r7, #23]
 8000df6:	3307      	adds	r3, #7
 8000df8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000dfa:	429a      	cmp	r2, r3
 8000dfc:	ddd6      	ble.n	8000dac <SSD1306_vWriteDisplay+0xa4>

			}
			break;
 8000dfe:	e05b      	b.n	8000eb8 <SSD1306_vWriteDisplay+0x1b0>

		case 2:
			uint8_t count2 = 0;
 8000e00:	2300      	movs	r3, #0
 8000e02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			for (int i = AdjPosition; i < (AdjPosition+8); i++)
 8000e06:	7dfb      	ldrb	r3, [r7, #23]
 8000e08:	623b      	str	r3, [r7, #32]
 8000e0a:	e023      	b.n	8000e54 <SSD1306_vWriteDisplay+0x14c>
			{
	        	uint8_t lower = (i & 0x0F);
 8000e0c:	6a3b      	ldr	r3, [r7, #32]
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	f003 030f 	and.w	r3, r3, #15
 8000e14:	753b      	strb	r3, [r7, #20]
	        	uint8_t upper = ((i >> 4) & 0x0F);
 8000e16:	6a3b      	ldr	r3, [r7, #32]
 8000e18:	111b      	asrs	r3, r3, #4
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	f003 030f 	and.w	r3, r3, #15
 8000e20:	74fb      	strb	r3, [r7, #19]
	            SSD1306_vSendCommandBlock(row, lower, upper);
 8000e22:	7cfa      	ldrb	r2, [r7, #19]
 8000e24:	7d39      	ldrb	r1, [r7, #20]
 8000e26:	79fb      	ldrb	r3, [r7, #7]
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f7ff ff01 	bl	8000c30 <SSD1306_vSendCommandBlock>
	            SSD1306_vSendData(SSD1306_Numbers[number][count2]);
 8000e2e:	797a      	ldrb	r2, [r7, #5]
 8000e30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000e34:	4922      	ldr	r1, [pc, #136]	@ (8000ec0 <SSD1306_vWriteDisplay+0x1b8>)
 8000e36:	00d2      	lsls	r2, r2, #3
 8000e38:	440a      	add	r2, r1
 8000e3a:	4413      	add	r3, r2
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f7ff ff25 	bl	8000c8e <SSD1306_vSendData>
	            count2++;
 8000e44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000e48:	3301      	adds	r3, #1
 8000e4a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			for (int i = AdjPosition; i < (AdjPosition+8); i++)
 8000e4e:	6a3b      	ldr	r3, [r7, #32]
 8000e50:	3301      	adds	r3, #1
 8000e52:	623b      	str	r3, [r7, #32]
 8000e54:	7dfb      	ldrb	r3, [r7, #23]
 8000e56:	3307      	adds	r3, #7
 8000e58:	6a3a      	ldr	r2, [r7, #32]
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	ddd6      	ble.n	8000e0c <SSD1306_vWriteDisplay+0x104>

			}
			break;
 8000e5e:	e02b      	b.n	8000eb8 <SSD1306_vWriteDisplay+0x1b0>

		case 3:
			uint8_t count3 = 0;
 8000e60:	2300      	movs	r3, #0
 8000e62:	77fb      	strb	r3, [r7, #31]
			for (int i = AdjPosition; i < (AdjPosition+8); i++)
 8000e64:	7dfb      	ldrb	r3, [r7, #23]
 8000e66:	61bb      	str	r3, [r7, #24]
 8000e68:	e020      	b.n	8000eac <SSD1306_vWriteDisplay+0x1a4>
			{
	        	uint8_t lower = (i & 0x0F);
 8000e6a:	69bb      	ldr	r3, [r7, #24]
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	f003 030f 	and.w	r3, r3, #15
 8000e72:	75bb      	strb	r3, [r7, #22]
	        	uint8_t upper = ((i >> 4) & 0x0F);
 8000e74:	69bb      	ldr	r3, [r7, #24]
 8000e76:	111b      	asrs	r3, r3, #4
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	f003 030f 	and.w	r3, r3, #15
 8000e7e:	757b      	strb	r3, [r7, #21]
	            SSD1306_vSendCommandBlock(row, lower, upper);
 8000e80:	7d7a      	ldrb	r2, [r7, #21]
 8000e82:	7db9      	ldrb	r1, [r7, #22]
 8000e84:	79fb      	ldrb	r3, [r7, #7]
 8000e86:	4618      	mov	r0, r3
 8000e88:	f7ff fed2 	bl	8000c30 <SSD1306_vSendCommandBlock>
	            SSD1306_vSendData(SSD1306_Numbers[number][count3]);
 8000e8c:	797a      	ldrb	r2, [r7, #5]
 8000e8e:	7ffb      	ldrb	r3, [r7, #31]
 8000e90:	490b      	ldr	r1, [pc, #44]	@ (8000ec0 <SSD1306_vWriteDisplay+0x1b8>)
 8000e92:	00d2      	lsls	r2, r2, #3
 8000e94:	440a      	add	r2, r1
 8000e96:	4413      	add	r3, r2
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f7ff fef7 	bl	8000c8e <SSD1306_vSendData>
	            count3++;
 8000ea0:	7ffb      	ldrb	r3, [r7, #31]
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	77fb      	strb	r3, [r7, #31]
			for (int i = AdjPosition; i < (AdjPosition+8); i++)
 8000ea6:	69bb      	ldr	r3, [r7, #24]
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	61bb      	str	r3, [r7, #24]
 8000eac:	7dfb      	ldrb	r3, [r7, #23]
 8000eae:	3307      	adds	r3, #7
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	429a      	cmp	r2, r3
 8000eb4:	ddd9      	ble.n	8000e6a <SSD1306_vWriteDisplay+0x162>

			}
			break;
 8000eb6:	bf00      	nop

	}
}
 8000eb8:	bf00      	nop
 8000eba:	3738      	adds	r7, #56	@ 0x38
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	2000000c 	.word	0x2000000c

08000ec4 <hal_vEnableRCCclock>:


#include "hal_rcc.h"

void hal_vEnableRCCclock(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
	/* Enable all necessary clocks */
	RCC->CR |= (1U << 0); 			// HSI clock, 8 MHz
 8000ec8:	4b23      	ldr	r3, [pc, #140]	@ (8000f58 <hal_vEnableRCCclock+0x94>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a22      	ldr	r2, [pc, #136]	@ (8000f58 <hal_vEnableRCCclock+0x94>)
 8000ece:	f043 0301 	orr.w	r3, r3, #1
 8000ed2:	6013      	str	r3, [r2, #0]
	RCC->CFGR &= ~(0xF << 4);		// HSI clock not divided
 8000ed4:	4b20      	ldr	r3, [pc, #128]	@ (8000f58 <hal_vEnableRCCclock+0x94>)
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	4a1f      	ldr	r2, [pc, #124]	@ (8000f58 <hal_vEnableRCCclock+0x94>)
 8000eda:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000ede:	6053      	str	r3, [r2, #4]
    RCC->APB1ENR |= (1U << 17);     // USART2EN
 8000ee0:	4b1d      	ldr	r3, [pc, #116]	@ (8000f58 <hal_vEnableRCCclock+0x94>)
 8000ee2:	69db      	ldr	r3, [r3, #28]
 8000ee4:	4a1c      	ldr	r2, [pc, #112]	@ (8000f58 <hal_vEnableRCCclock+0x94>)
 8000ee6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000eea:	61d3      	str	r3, [r2, #28]
    RCC->APB1ENR |= (1U << 18);     // USART3EN
 8000eec:	4b1a      	ldr	r3, [pc, #104]	@ (8000f58 <hal_vEnableRCCclock+0x94>)
 8000eee:	69db      	ldr	r3, [r3, #28]
 8000ef0:	4a19      	ldr	r2, [pc, #100]	@ (8000f58 <hal_vEnableRCCclock+0x94>)
 8000ef2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ef6:	61d3      	str	r3, [r2, #28]
    RCC->AHBENR |= (1U << 17);		// GPIOA clock enable
 8000ef8:	4b17      	ldr	r3, [pc, #92]	@ (8000f58 <hal_vEnableRCCclock+0x94>)
 8000efa:	695b      	ldr	r3, [r3, #20]
 8000efc:	4a16      	ldr	r2, [pc, #88]	@ (8000f58 <hal_vEnableRCCclock+0x94>)
 8000efe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f02:	6153      	str	r3, [r2, #20]
    RCC->AHBENR |= (1U << 18);
 8000f04:	4b14      	ldr	r3, [pc, #80]	@ (8000f58 <hal_vEnableRCCclock+0x94>)
 8000f06:	695b      	ldr	r3, [r3, #20]
 8000f08:	4a13      	ldr	r2, [pc, #76]	@ (8000f58 <hal_vEnableRCCclock+0x94>)
 8000f0a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f0e:	6153      	str	r3, [r2, #20]
    RCC->AHBENR |= (1U << 19);		// GPIOC
 8000f10:	4b11      	ldr	r3, [pc, #68]	@ (8000f58 <hal_vEnableRCCclock+0x94>)
 8000f12:	695b      	ldr	r3, [r3, #20]
 8000f14:	4a10      	ldr	r2, [pc, #64]	@ (8000f58 <hal_vEnableRCCclock+0x94>)
 8000f16:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000f1a:	6153      	str	r3, [r2, #20]
    RCC->APB2ENR |= (1U << 0);		// SYSCFG
 8000f1c:	4b0e      	ldr	r3, [pc, #56]	@ (8000f58 <hal_vEnableRCCclock+0x94>)
 8000f1e:	699b      	ldr	r3, [r3, #24]
 8000f20:	4a0d      	ldr	r2, [pc, #52]	@ (8000f58 <hal_vEnableRCCclock+0x94>)
 8000f22:	f043 0301 	orr.w	r3, r3, #1
 8000f26:	6193      	str	r3, [r2, #24]
    RCC->AHBENR |= (1U << 0);		// DMA1 enable
 8000f28:	4b0b      	ldr	r3, [pc, #44]	@ (8000f58 <hal_vEnableRCCclock+0x94>)
 8000f2a:	695b      	ldr	r3, [r3, #20]
 8000f2c:	4a0a      	ldr	r2, [pc, #40]	@ (8000f58 <hal_vEnableRCCclock+0x94>)
 8000f2e:	f043 0301 	orr.w	r3, r3, #1
 8000f32:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |= (1U << 21);		// I2C1
 8000f34:	4b08      	ldr	r3, [pc, #32]	@ (8000f58 <hal_vEnableRCCclock+0x94>)
 8000f36:	69db      	ldr	r3, [r3, #28]
 8000f38:	4a07      	ldr	r2, [pc, #28]	@ (8000f58 <hal_vEnableRCCclock+0x94>)
 8000f3a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000f3e:	61d3      	str	r3, [r2, #28]
    RCC->AHBENR |= (1U << 28);		// ADC1 & 2
 8000f40:	4b05      	ldr	r3, [pc, #20]	@ (8000f58 <hal_vEnableRCCclock+0x94>)
 8000f42:	695b      	ldr	r3, [r3, #20]
 8000f44:	4a04      	ldr	r2, [pc, #16]	@ (8000f58 <hal_vEnableRCCclock+0x94>)
 8000f46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f4a:	6153      	str	r3, [r2, #20]


}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	40021000 	.word	0x40021000

08000f5c <Hal_SysTick_vInit>:

#include "hal_systick.h"


void Hal_SysTick_vInit(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
	STK_LOAD = RELOAD_VAL;
 8000f60:	4b07      	ldr	r3, [pc, #28]	@ (8000f80 <Hal_SysTick_vInit+0x24>)
 8000f62:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8000f66:	601a      	str	r2, [r3, #0]
	STK_VAL = 0;
 8000f68:	4b06      	ldr	r3, [pc, #24]	@ (8000f84 <Hal_SysTick_vInit+0x28>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
	STK_CTRL = CTRL_ENABLE | CTRL_TICKINT | CTRL_CLKSRC;
 8000f6e:	4b06      	ldr	r3, [pc, #24]	@ (8000f88 <Hal_SysTick_vInit+0x2c>)
 8000f70:	2207      	movs	r2, #7
 8000f72:	601a      	str	r2, [r3, #0]
}
 8000f74:	bf00      	nop
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	e000e014 	.word	0xe000e014
 8000f84:	e000e018 	.word	0xe000e018
 8000f88:	e000e010 	.word	0xe000e010

08000f8c <Hal_ButtonInterrupt_vInit>:

void Hal_ButtonInterrupt_vInit(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
	// Configure SYSCFG
	SYSCFG->EXTICR4 &= ~(0xF << 4);
 8000f90:	4b13      	ldr	r3, [pc, #76]	@ (8000fe0 <Hal_ButtonInterrupt_vInit+0x54>)
 8000f92:	695b      	ldr	r3, [r3, #20]
 8000f94:	4a12      	ldr	r2, [pc, #72]	@ (8000fe0 <Hal_ButtonInterrupt_vInit+0x54>)
 8000f96:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000f9a:	6153      	str	r3, [r2, #20]
	SYSCFG->EXTICR4 |= (0x2 << 4);
 8000f9c:	4b10      	ldr	r3, [pc, #64]	@ (8000fe0 <Hal_ButtonInterrupt_vInit+0x54>)
 8000f9e:	695b      	ldr	r3, [r3, #20]
 8000fa0:	4a0f      	ldr	r2, [pc, #60]	@ (8000fe0 <Hal_ButtonInterrupt_vInit+0x54>)
 8000fa2:	f043 0320 	orr.w	r3, r3, #32
 8000fa6:	6153      	str	r3, [r2, #20]
	// Configure EXTI13 line
    EXTI->IMR  |=  (1U << 13);         // Unmask interrupt
 8000fa8:	4b0e      	ldr	r3, [pc, #56]	@ (8000fe4 <Hal_ButtonInterrupt_vInit+0x58>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a0d      	ldr	r2, [pc, #52]	@ (8000fe4 <Hal_ButtonInterrupt_vInit+0x58>)
 8000fae:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000fb2:	6013      	str	r3, [r2, #0]
    EXTI->FTSR1 |=  (0U << 13);         // Falling edge trigger
 8000fb4:	4b0b      	ldr	r3, [pc, #44]	@ (8000fe4 <Hal_ButtonInterrupt_vInit+0x58>)
 8000fb6:	4a0b      	ldr	r2, [pc, #44]	@ (8000fe4 <Hal_ButtonInterrupt_vInit+0x58>)
 8000fb8:	68db      	ldr	r3, [r3, #12]
 8000fba:	60d3      	str	r3, [r2, #12]
    EXTI->RTSR1 |= (1U << 13);         // (optional) Disable rising edge
 8000fbc:	4b09      	ldr	r3, [pc, #36]	@ (8000fe4 <Hal_ButtonInterrupt_vInit+0x58>)
 8000fbe:	689b      	ldr	r3, [r3, #8]
 8000fc0:	4a08      	ldr	r2, [pc, #32]	@ (8000fe4 <Hal_ButtonInterrupt_vInit+0x58>)
 8000fc2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000fc6:	6093      	str	r3, [r2, #8]

	// Configure NVIC
    NVIC_ISER1 |= (1U << (8));  // Enable IRQ 40 (EXTI15_10)
 8000fc8:	4b07      	ldr	r3, [pc, #28]	@ (8000fe8 <Hal_ButtonInterrupt_vInit+0x5c>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a06      	ldr	r2, [pc, #24]	@ (8000fe8 <Hal_ButtonInterrupt_vInit+0x5c>)
 8000fce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fd2:	6013      	str	r3, [r2, #0]
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	40010000 	.word	0x40010000
 8000fe4:	40010400 	.word	0x40010400
 8000fe8:	e000e104 	.word	0xe000e104

08000fec <Hal_USART3_vInit>:
/*
 * USART 3 Tx Init
 */

void Hal_USART3_vInit(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b085      	sub	sp, #20
 8000ff0:	af00      	add	r7, sp, #0
	/* USART2 configuration */
	USART3->CR1 &= ~(1U << 0);      // UE = 0 (disable)
 8000ff2:	4b20      	ldr	r3, [pc, #128]	@ (8001074 <Hal_USART3_vInit+0x88>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a1f      	ldr	r2, [pc, #124]	@ (8001074 <Hal_USART3_vInit+0x88>)
 8000ff8:	f023 0301 	bic.w	r3, r3, #1
 8000ffc:	6013      	str	r3, [r2, #0]
    USART3->CR1 &= ~(1U << 12);     // M = 0 (8-bit)
 8000ffe:	4b1d      	ldr	r3, [pc, #116]	@ (8001074 <Hal_USART3_vInit+0x88>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a1c      	ldr	r2, [pc, #112]	@ (8001074 <Hal_USART3_vInit+0x88>)
 8001004:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001008:	6013      	str	r3, [r2, #0]
    USART3->CR1 &= ~(1U << 10);     // PCE = 0 (no parity)
 800100a:	4b1a      	ldr	r3, [pc, #104]	@ (8001074 <Hal_USART3_vInit+0x88>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a19      	ldr	r2, [pc, #100]	@ (8001074 <Hal_USART3_vInit+0x88>)
 8001010:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001014:	6013      	str	r3, [r2, #0]
    USART3->CR2 &= ~(3U << 12);     // STOP[1:0] = 00 (1 stop bit)
 8001016:	4b17      	ldr	r3, [pc, #92]	@ (8001074 <Hal_USART3_vInit+0x88>)
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	4a16      	ldr	r2, [pc, #88]	@ (8001074 <Hal_USART3_vInit+0x88>)
 800101c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001020:	6053      	str	r3, [r2, #4]
    // Baud = 115200 @ PCLK2 = 16 MHz
    uint32_t u32PeriphClock = 8000000;
 8001022:	4b15      	ldr	r3, [pc, #84]	@ (8001078 <Hal_USART3_vInit+0x8c>)
 8001024:	60fb      	str	r3, [r7, #12]
    uint32_t u32BaudRate = 115200;
 8001026:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800102a:	60bb      	str	r3, [r7, #8]
    uint16_t brr = (u32PeriphClock + (u32BaudRate/2))/u32BaudRate;
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	085a      	lsrs	r2, r3, #1
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	441a      	add	r2, r3
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	fbb2 f3f3 	udiv	r3, r2, r3
 800103a:	80fb      	strh	r3, [r7, #6]
    USART3->BRR = brr;
 800103c:	4a0d      	ldr	r2, [pc, #52]	@ (8001074 <Hal_USART3_vInit+0x88>)
 800103e:	88fb      	ldrh	r3, [r7, #6]
 8001040:	60d3      	str	r3, [r2, #12]

    // Enable DMA for transmit (DMAT)
    USART3->CR3 |= (1U << 7);
 8001042:	4b0c      	ldr	r3, [pc, #48]	@ (8001074 <Hal_USART3_vInit+0x88>)
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	4a0b      	ldr	r2, [pc, #44]	@ (8001074 <Hal_USART3_vInit+0x88>)
 8001048:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800104c:	6093      	str	r3, [r2, #8]

    /* Transfer direction */
	USART3->CR1 |= (1U<<3);
 800104e:	4b09      	ldr	r3, [pc, #36]	@ (8001074 <Hal_USART3_vInit+0x88>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a08      	ldr	r2, [pc, #32]	@ (8001074 <Hal_USART3_vInit+0x88>)
 8001054:	f043 0308 	orr.w	r3, r3, #8
 8001058:	6013      	str	r3, [r2, #0]

    /* Enable the module */
    USART3->CR1 |= (1U << 0);   // UE = 1
 800105a:	4b06      	ldr	r3, [pc, #24]	@ (8001074 <Hal_USART3_vInit+0x88>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4a05      	ldr	r2, [pc, #20]	@ (8001074 <Hal_USART3_vInit+0x88>)
 8001060:	f043 0301 	orr.w	r3, r3, #1
 8001064:	6013      	str	r3, [r2, #0]
}
 8001066:	bf00      	nop
 8001068:	3714      	adds	r7, #20
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	40004800 	.word	0x40004800
 8001078:	007a1200 	.word	0x007a1200

0800107c <SysTick_Handler>:
 *********************************************************************************************************************************/
uint16_t dataADC = 0;

// SysTick interrupt
void SysTick_Handler(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
	Hal_vEnableDMA();
 8001082:	f7ff f9a1 	bl	80003c8 <Hal_vEnableDMA>
	uint32_t* prData = Hal_DMA1_vGetTransmitData();
 8001086:	f7ff f9c7 	bl	8000418 <Hal_DMA1_vGetTransmitData>
 800108a:	6078      	str	r0, [r7, #4]
	int j = 0;
 800108c:	2300      	movs	r3, #0
 800108e:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 10; i++)
 8001090:	2300      	movs	r3, #0
 8001092:	60bb      	str	r3, [r7, #8]
 8001094:	e011      	b.n	80010ba <SysTick_Handler+0x3e>
	{
		SSD1306_vWriteDisplay(0, i, prData[j]);
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	b2d9      	uxtb	r1, r3
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	687a      	ldr	r2, [r7, #4]
 80010a0:	4413      	add	r3, r2
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	461a      	mov	r2, r3
 80010a8:	2000      	movs	r0, #0
 80010aa:	f7ff fe2d 	bl	8000d08 <SSD1306_vWriteDisplay>
		j++;
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	3301      	adds	r3, #1
 80010b2:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 10; i++)
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	3301      	adds	r3, #1
 80010b8:	60bb      	str	r3, [r7, #8]
 80010ba:	68bb      	ldr	r3, [r7, #8]
 80010bc:	2b09      	cmp	r3, #9
 80010be:	ddea      	ble.n	8001096 <SysTick_Handler+0x1a>
	}
    dataADC = Hal_ADC_u16ReadChannel();
 80010c0:	f7ff f92f 	bl	8000322 <Hal_ADC_u16ReadChannel>
 80010c4:	4603      	mov	r3, r0
 80010c6:	461a      	mov	r2, r3
 80010c8:	4b0c      	ldr	r3, [pc, #48]	@ (80010fc <SysTick_Handler+0x80>)
 80010ca:	801a      	strh	r2, [r3, #0]
    if (dataADC != 0)
 80010cc:	4b0b      	ldr	r3, [pc, #44]	@ (80010fc <SysTick_Handler+0x80>)
 80010ce:	881b      	ldrh	r3, [r3, #0]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d003      	beq.n	80010dc <SysTick_Handler+0x60>
    {
        Hal_GPIO_vOutputToggle(5, GPIO_A);  // Your action
 80010d4:	2100      	movs	r1, #0
 80010d6:	2005      	movs	r0, #5
 80010d8:	f7ff fad8 	bl	800068c <Hal_GPIO_vOutputToggle>
    }

	/* Trigger PendSV to keep SysTick predictable */
	SCB_SHPR3 |= (0xFF << 16);  // Bits[23:16] = PendSV priority
 80010dc:	4b08      	ldr	r3, [pc, #32]	@ (8001100 <SysTick_Handler+0x84>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a07      	ldr	r2, [pc, #28]	@ (8001100 <SysTick_Handler+0x84>)
 80010e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80010e6:	6013      	str	r3, [r2, #0]
	SCB_ICSR |= (1U << 28);
 80010e8:	4b06      	ldr	r3, [pc, #24]	@ (8001104 <SysTick_Handler+0x88>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a05      	ldr	r2, [pc, #20]	@ (8001104 <SysTick_Handler+0x88>)
 80010ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010f2:	6013      	str	r3, [r2, #0]
}
 80010f4:	bf00      	nop
 80010f6:	3710      	adds	r7, #16
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	20000078 	.word	0x20000078
 8001100:	e000ed20 	.word	0xe000ed20
 8001104:	e000e00c 	.word	0xe000e00c

08001108 <PendSV_Handler>:

void PendSV_Handler()
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0

}
 800110c:	bf00      	nop
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
	...

08001118 <EXTI15_10_IRQHandler>:

// Button interrupt
void EXTI15_10_IRQHandler(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
    if (EXTI->PR1 & (1U << 13))  // Check if EXTI13 triggered
 800111c:	4b09      	ldr	r3, [pc, #36]	@ (8001144 <EXTI15_10_IRQHandler+0x2c>)
 800111e:	695b      	ldr	r3, [r3, #20]
 8001120:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001124:	2b00      	cmp	r3, #0
 8001126:	d00b      	beq.n	8001140 <EXTI15_10_IRQHandler+0x28>
    {
        EXTI->PR1 |= (1U << 13);  // Clear pending bit by writing 1
 8001128:	4b06      	ldr	r3, [pc, #24]	@ (8001144 <EXTI15_10_IRQHandler+0x2c>)
 800112a:	695b      	ldr	r3, [r3, #20]
 800112c:	4a05      	ldr	r2, [pc, #20]	@ (8001144 <EXTI15_10_IRQHandler+0x2c>)
 800112e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001132:	6153      	str	r3, [r2, #20]
        Hal_DMA1_vCorruptData();
 8001134:	f7ff f960 	bl	80003f8 <Hal_DMA1_vCorruptData>
        Hal_GPIO_vOutputToggle(5, GPIO_A);  // Your action
 8001138:	2100      	movs	r1, #0
 800113a:	2005      	movs	r0, #5
 800113c:	f7ff faa6 	bl	800068c <Hal_GPIO_vOutputToggle>
    }
}
 8001140:	bf00      	nop
 8001142:	bd80      	pop	{r7, pc}
 8001144:	40010400 	.word	0x40010400

08001148 <main>:
/*********************************************************************************************************************************
 * Main Function
 *********************************************************************************************************************************/

int main(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
	// Activate all system clocks which are needed
	hal_vEnableRCCclock();
 800114c:	f7ff feba 	bl	8000ec4 <hal_vEnableRCCclock>

	// Activate all GPIOs needed
	Main_vSetupGPIOs();
 8001150:	f000 f816 	bl	8001180 <Main_vSetupGPIOs>
	 * 	- I2C1
	 * 	- ADC1
	 ***************************************************/

	// USART3 Init
	Hal_USART3_vInit();
 8001154:	f7ff ff4a 	bl	8000fec <Hal_USART3_vInit>

	// DMA1 Init
	Hal_DMA1_vInit();
 8001158:	f7ff f8fe 	bl	8000358 <Hal_DMA1_vInit>

	// I2C Init
    Hal_I2C_vInitMaster(OLED);
 800115c:	203c      	movs	r0, #60	@ 0x3c
 800115e:	f7ff fc35 	bl	80009cc <Hal_I2C_vInitMaster>

    // OLED SSD Init
    SSD1306_vInit();
 8001162:	f7ff fcbb 	bl	8000adc <SSD1306_vInit>

    // ADC1 Init
    Hal_ADC_vInit();
 8001166:	f7ff f835 	bl	80001d4 <Hal_ADC_vInit>
	/***************************************************
	 * Initial functions
	 ***************************************************/

    // Reset Display
    SSD1306_vResetDisplay();
 800116a:	f7ff fd9e 	bl	8000caa <SSD1306_vResetDisplay>

    // Start ADC1
    Hal_ADC_vStart();
 800116e:	f7ff f8c9 	bl	8000304 <Hal_ADC_vStart>
	/***************************************************
	 * Activate the interrupts (system and peripherals)
	 ***************************************************/

    // Enable Interrupts globally
    __asm volatile ("CPSIE i");
 8001172:	b662      	cpsie	i

    // Enable Button interrupt
    Hal_ButtonInterrupt_vInit();
 8001174:	f7ff ff0a 	bl	8000f8c <Hal_ButtonInterrupt_vInit>

    // Enable SysTick interrupt
	Hal_SysTick_vInit();
 8001178:	f7ff fef0 	bl	8000f5c <Hal_SysTick_vInit>


    while(1)
 800117c:	bf00      	nop
 800117e:	e7fd      	b.n	800117c <main+0x34>

08001180 <Main_vSetupGPIOs>:
/*********************************************************************************************************************************
 * Main Functions
 *********************************************************************************************************************************/

void Main_vSetupGPIOs(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af02      	add	r7, sp, #8
	// Activate button at PC13
	Config_vSetupGPIO(13, GPIO_INPUT, GPIO_PUSHPULL, GPIO_PULLUP, GPIO_C);
 8001186:	2302      	movs	r3, #2
 8001188:	9300      	str	r3, [sp, #0]
 800118a:	2301      	movs	r3, #1
 800118c:	2200      	movs	r2, #0
 800118e:	2100      	movs	r1, #0
 8001190:	200d      	movs	r0, #13
 8001192:	f7ff faa1 	bl	80006d8 <Config_vSetupGPIO>

	// Set LED at GPIOA on Pin5 to output
	Config_vSetupGPIO(5, GPIO_OUTPUT, GPIO_PUSHPULL, GPIO_PULLUP, GPIO_A);
 8001196:	2300      	movs	r3, #0
 8001198:	9300      	str	r3, [sp, #0]
 800119a:	2301      	movs	r3, #1
 800119c:	2200      	movs	r2, #0
 800119e:	2101      	movs	r1, #1
 80011a0:	2005      	movs	r0, #5
 80011a2:	f7ff fa99 	bl	80006d8 <Config_vSetupGPIO>

	// Activate PB9 for USART3 Tx
	Config_vSetupGPIO(9, GPIO_AF, GPIO_PUSHPULL, GPIO_PULLUP, GPIO_B);
 80011a6:	2301      	movs	r3, #1
 80011a8:	9300      	str	r3, [sp, #0]
 80011aa:	2301      	movs	r3, #1
 80011ac:	2200      	movs	r2, #0
 80011ae:	2102      	movs	r1, #2
 80011b0:	2009      	movs	r0, #9
 80011b2:	f7ff fa91 	bl	80006d8 <Config_vSetupGPIO>
	Hal_GPIO_vSetupAlternateFunction(9, 7, GPIO_B);
 80011b6:	2201      	movs	r2, #1
 80011b8:	2107      	movs	r1, #7
 80011ba:	2009      	movs	r0, #9
 80011bc:	f7ff fab6 	bl	800072c <Hal_GPIO_vSetupAlternateFunction>

	/* Using PB6 SCL and PB7 SDA, because the other ones interfere with debug */
	Config_vSetupGPIO(6, GPIO_AF, GPIO_PUSHPULL, GPIO_PULLUP, GPIO_B);
 80011c0:	2301      	movs	r3, #1
 80011c2:	9300      	str	r3, [sp, #0]
 80011c4:	2301      	movs	r3, #1
 80011c6:	2200      	movs	r2, #0
 80011c8:	2102      	movs	r1, #2
 80011ca:	2006      	movs	r0, #6
 80011cc:	f7ff fa84 	bl	80006d8 <Config_vSetupGPIO>
	Hal_GPIO_vSetupAlternateFunction(6, 4, GPIO_B);
 80011d0:	2201      	movs	r2, #1
 80011d2:	2104      	movs	r1, #4
 80011d4:	2006      	movs	r0, #6
 80011d6:	f7ff faa9 	bl	800072c <Hal_GPIO_vSetupAlternateFunction>

	Config_vSetupGPIO(7, GPIO_AF, GPIO_PUSHPULL, GPIO_PULLUP, GPIO_B);
 80011da:	2301      	movs	r3, #1
 80011dc:	9300      	str	r3, [sp, #0]
 80011de:	2301      	movs	r3, #1
 80011e0:	2200      	movs	r2, #0
 80011e2:	2102      	movs	r1, #2
 80011e4:	2007      	movs	r0, #7
 80011e6:	f7ff fa77 	bl	80006d8 <Config_vSetupGPIO>
	Hal_GPIO_vSetupAlternateFunction(7, 4, GPIO_B);
 80011ea:	2201      	movs	r2, #1
 80011ec:	2104      	movs	r1, #4
 80011ee:	2007      	movs	r0, #7
 80011f0:	f7ff fa9c 	bl	800072c <Hal_GPIO_vSetupAlternateFunction>

    // Activate PA0 for the ADC as Analog input
	Config_vSetupGPIO(0, GPIO_ANALOG, GPIO_PUSHPULL, GPIO_NON, GPIO_A);
 80011f4:	2300      	movs	r3, #0
 80011f6:	9300      	str	r3, [sp, #0]
 80011f8:	2300      	movs	r3, #0
 80011fa:	2200      	movs	r2, #0
 80011fc:	2103      	movs	r1, #3
 80011fe:	2000      	movs	r0, #0
 8001200:	f7ff fa6a 	bl	80006d8 <Config_vSetupGPIO>
}
 8001204:	bf00      	nop
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
	...

0800120c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800120c:	480d      	ldr	r0, [pc, #52]	@ (8001244 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800120e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001210:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001214:	480c      	ldr	r0, [pc, #48]	@ (8001248 <LoopForever+0x6>)
  ldr r1, =_edata
 8001216:	490d      	ldr	r1, [pc, #52]	@ (800124c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001218:	4a0d      	ldr	r2, [pc, #52]	@ (8001250 <LoopForever+0xe>)
  movs r3, #0
 800121a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800121c:	e002      	b.n	8001224 <LoopCopyDataInit>

0800121e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800121e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001220:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001222:	3304      	adds	r3, #4

08001224 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001224:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001226:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001228:	d3f9      	bcc.n	800121e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800122a:	4a0a      	ldr	r2, [pc, #40]	@ (8001254 <LoopForever+0x12>)
  ldr r4, =_ebss
 800122c:	4c0a      	ldr	r4, [pc, #40]	@ (8001258 <LoopForever+0x16>)
  movs r3, #0
 800122e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001230:	e001      	b.n	8001236 <LoopFillZerobss>

08001232 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001232:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001234:	3204      	adds	r2, #4

08001236 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001236:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001238:	d3fb      	bcc.n	8001232 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800123a:	f000 f811 	bl	8001260 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800123e:	f7ff ff83 	bl	8001148 <main>

08001242 <LoopForever>:

LoopForever:
  b LoopForever
 8001242:	e7fe      	b.n	8001242 <LoopForever>
  ldr   r0, =_estack
 8001244:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001248:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800124c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001250:	080012c8 	.word	0x080012c8
  ldr r2, =_sbss
 8001254:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001258:	2000007c 	.word	0x2000007c

0800125c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800125c:	e7fe      	b.n	800125c <ADC1_2_IRQHandler>
	...

08001260 <__libc_init_array>:
 8001260:	b570      	push	{r4, r5, r6, lr}
 8001262:	4d0d      	ldr	r5, [pc, #52]	@ (8001298 <__libc_init_array+0x38>)
 8001264:	4c0d      	ldr	r4, [pc, #52]	@ (800129c <__libc_init_array+0x3c>)
 8001266:	1b64      	subs	r4, r4, r5
 8001268:	10a4      	asrs	r4, r4, #2
 800126a:	2600      	movs	r6, #0
 800126c:	42a6      	cmp	r6, r4
 800126e:	d109      	bne.n	8001284 <__libc_init_array+0x24>
 8001270:	4d0b      	ldr	r5, [pc, #44]	@ (80012a0 <__libc_init_array+0x40>)
 8001272:	4c0c      	ldr	r4, [pc, #48]	@ (80012a4 <__libc_init_array+0x44>)
 8001274:	f000 f818 	bl	80012a8 <_init>
 8001278:	1b64      	subs	r4, r4, r5
 800127a:	10a4      	asrs	r4, r4, #2
 800127c:	2600      	movs	r6, #0
 800127e:	42a6      	cmp	r6, r4
 8001280:	d105      	bne.n	800128e <__libc_init_array+0x2e>
 8001282:	bd70      	pop	{r4, r5, r6, pc}
 8001284:	f855 3b04 	ldr.w	r3, [r5], #4
 8001288:	4798      	blx	r3
 800128a:	3601      	adds	r6, #1
 800128c:	e7ee      	b.n	800126c <__libc_init_array+0xc>
 800128e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001292:	4798      	blx	r3
 8001294:	3601      	adds	r6, #1
 8001296:	e7f2      	b.n	800127e <__libc_init_array+0x1e>
 8001298:	080012c0 	.word	0x080012c0
 800129c:	080012c0 	.word	0x080012c0
 80012a0:	080012c0 	.word	0x080012c0
 80012a4:	080012c4 	.word	0x080012c4

080012a8 <_init>:
 80012a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012aa:	bf00      	nop
 80012ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012ae:	bc08      	pop	{r3}
 80012b0:	469e      	mov	lr, r3
 80012b2:	4770      	bx	lr

080012b4 <_fini>:
 80012b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012b6:	bf00      	nop
 80012b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012ba:	bc08      	pop	{r3}
 80012bc:	469e      	mov	lr, r3
 80012be:	4770      	bx	lr
